{
  "generation_timestamp": "2025-07-14T04:12:07.818961",
  "monitoring_status": true,
  "tracked_files": 60,
  "code_changes": {
    "total_changes": 0,
    "recent_changes": 0,
    "change_types": {
      "modified": 0,
      "created": 0,
      "deleted": 0
    }
  },
  "tensor_evolution": {
    "signature_changes": 7,
    "modules_with_tensors": 3,
    "recent_tensor_changes": 7
  },
  "test_evolution": {
    "coverage_events": 19,
    "test_modules": 19,
    "recent_test_changes": 19
  },
  "architecture_evolution": {
    "total_events": 0,
    "recent_events": 0,
    "impact_distribution": {
      "low": 0,
      "medium": 0,
      "high": 0,
      "critical": 0
    }
  },
  "documentation_state": {
    "generation_timestamp": "2025-07-14T04:12:07.819004",
    "modules_analyzed": 57,
    "diagrams_generated": 108,
    "modules_info": {
      "cognitive_grammar": {
        "name": "cognitive_grammar",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/cognitive_grammar.py",
        "classes": [
          "AtomType",
          "LinkType",
          "TruthValue",
          "Atom",
          "Link",
          "AtomSpace",
          "PLN",
          "PatternMatcher",
          "CognitiveGrammar"
        ],
        "functions": [
          "__post_init__",
          "__post_init__",
          "__post_init__",
          "__init__",
          "add_atom",
          "add_link",
          "get_atom",
          "get_link",
          "find_atoms_by_type",
          "find_links_by_type",
          "get_connected_atoms",
          "_get_next_prime",
          "get_hypergraph_density",
          "__init__",
          "deduction",
          "induction",
          "abduction",
          "__init__",
          "define_pattern",
          "match_pattern",
          "_matches_template",
          "scheme_pattern_match",
          "__init__",
          "_initialize_default_patterns",
          "create_entity",
          "create_relationship",
          "infer_knowledge",
          "get_knowledge_stats",
          "is_prime"
        ],
        "dependencies": [
          "uuid",
          "enum",
          "typing",
          "json",
          "numpy",
          "collections",
          "dataclasses"
        ],
        "docstring": "Cognitive Grammar Field\n\nImplements AtomSpace for hypergraph knowledge representation, PLN for probabilistic logic,\nand template-based pattern recognition. Integrates memory systems for symbolic and\nsub-symbolic storage.",
        "complexity_score": 50.5,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.479121"
      },
      "phase3_verification": {
        "name": "phase3_verification",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/phase3_verification.py",
        "classes": [
          "Phase3VerificationSuite"
        ],
        "functions": [
          "run_phase3_verification",
          "__init__",
          "run_all_tests",
          "test_kernel_customization",
          "test_tensor_signature_benchmarking",
          "test_neural_symbolic_synthesis",
          "test_integration_verification",
          "test_performance_validation",
          "test_real_implementation_verification",
          "test_distributed_mesh_integration",
          "_generate_test_summary",
          "save_verification_report",
          "count_tests",
          "test_operation",
          "memory_intensive_operation"
        ],
        "dependencies": [
          "neural_symbolic_kernels",
          "tensor_kernel",
          "typing",
          "os",
          "time",
          "pathlib",
          "json",
          "numpy",
          "tensor_benchmarking",
          "sys"
        ],
        "docstring": "Phase 3 Verification and Testing System\n\nComprehensive testing protocols for Neural-Symbolic Synthesis via Custom ggml Kernels.\nImplements real implementation verification with no mocks.",
        "complexity_score": 22.0,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.482121"
      },
      "phase1_acceptance_test": {
        "name": "phase1_acceptance_test",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/phase1_acceptance_test.py",
        "classes": [],
        "functions": [
          "test_hypergraph_visualization",
          "validate_all_acceptance_criteria",
          "test_real_implementation",
          "test_comprehensive_tests",
          "test_documentation",
          "test_recursive_modularity",
          "test_integration_tests",
          "main"
        ],
        "dependencies": [
          "tensor_kernel",
          "hypergraph_visualizer",
          "os",
          "attention_allocation",
          "sys",
          "numpy",
          "cognitive_grammar",
          "tensor_fragments",
          "subprocess",
          "meta_cognitive"
        ],
        "docstring": "Phase 1 Final Acceptance Test with Visualization Validation\n\nValidates all Phase 1 acceptance criteria including the specific requirement\nfor \"Visualization: Hypergraph fragment flowcharts\"",
        "complexity_score": 13.0,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.481121"
      },
      "phase6_demo": {
        "name": "phase6_demo",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/phase6_demo.py",
        "classes": [
          "Phase6Demo"
        ],
        "functions": [
          "main",
          "__init__",
          "setup_cognitive_architecture",
          "demonstrate_cognitive_unification_validation",
          "demonstrate_real_data_validation",
          "demonstrate_boundary_testing",
          "demonstrate_integration_testing",
          "demonstrate_end_to_end_workflow",
          "demonstrate_acceptance_criteria_validation",
          "generate_demo_summary",
          "run_complete_demonstration"
        ],
        "dependencies": [
          "tensor_kernel",
          "evolutionary_optimizer",
          "datetime",
          "phase6_acceptance_test",
          "phase6_integration_test",
          "os",
          "time",
          "sys",
          "json",
          "phase6_comprehensive_test",
          "logging",
          "phase6_deep_testing_protocols",
          "cognitive_grammar",
          "attention_allocation",
          "feedback_self_analysis",
          "numpy",
          "meta_cognitive",
          "traceback"
        ],
        "docstring": "Phase 6: Rigorous Testing, Documentation, and Cognitive Unification\nInteractive Demonstration\n\nThis script demonstrates the complete Phase 6 testing infrastructure,\nincluding comprehensive testing, deep testing protocols, integration testing,\nand acceptance criteria validation.\n\nAuthor: Cognitive Architecture Team\nDate: 2024-07-14\nPhase: 6 - Interactive Demonstration",
        "complexity_score": 22.0,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.484121"
      },
      "phase6_acceptance_test": {
        "name": "phase6_acceptance_test",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/phase6_acceptance_test.py",
        "classes": [
          "AcceptanceCriteriaResult",
          "Phase6AcceptanceCriteriaValidator",
          "Phase6AcceptanceTestSuite"
        ],
        "functions": [
          "__init__",
          "_setup_cognitive_architecture",
          "validate_all_acceptance_criteria",
          "_validate_real_data_implementation",
          "_validate_comprehensive_testing",
          "_validate_documentation_and_diagrams",
          "_validate_recursive_modularity",
          "_validate_integration_testing",
          "_calculate_overall_acceptance_score",
          "_generate_acceptance_report",
          "setUpClass",
          "test_phase6_acceptance_criteria",
          "tearDownClass"
        ],
        "dependencies": [
          "unittest",
          "typing",
          "evolutionary_optimizer",
          "os",
          "attention_allocation",
          "sys",
          "phase6_comprehensive_test",
          "cognitive_grammar",
          "feedback_self_analysis",
          "meta_cognitive",
          "logging",
          "time",
          "phase6_deep_testing_protocols",
          "dataclasses",
          "tensor_kernel",
          "datetime",
          "phase6_integration_test",
          "json",
          "numpy"
        ],
        "docstring": "Phase 6: Rigorous Testing, Documentation, and Cognitive Unification\nAcceptance Test Suite\n\nThis module implements the final acceptance tests for Phase 6, validating that\nall acceptance criteria have been met for the Distributed Agentic Cognitive\nGrammar Network with rigorous testing and cognitive unification.\n\nAuthor: Cognitive Architecture Team\nDate: 2024-07-14\nPhase: 6 - Acceptance Testing & Final Validation",
        "complexity_score": 28.5,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.484121"
      },
      "web_agent_adapter": {
        "name": "web_agent_adapter",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/web_agent_adapter.py",
        "classes": [
          "WebAgent",
          "WebTask",
          "WebVisualization",
          "WebAgentIntegrationAdapter"
        ],
        "functions": [
          "main",
          "__post_init__",
          "__post_init__",
          "__post_init__",
          "__init__",
          "_setup_routes",
          "_setup_websocket_handlers",
          "_assign_web_task",
          "_handle_attention_focus",
          "_handle_cognitive_synthesis_request",
          "_handle_visualization_request",
          "_generate_visualization_data",
          "start_server",
          "stop_server",
          "_monitor_agents",
          "_update_dashboard",
          "get_status",
          "dashboard",
          "list_web_agents",
          "get_web_agent",
          "create_web_task",
          "get_web_task",
          "web_cognitive_synthesize",
          "list_visualizations",
          "create_visualization",
          "get_mesh_state",
          "cognitive_agent_sdk",
          "handle_connect",
          "handle_disconnect",
          "handle_register_agent",
          "handle_cognitive_state_update",
          "handle_task_result",
          "handle_agent_event",
          "handle_dashboard_subscribe"
        ],
        "dependencies": [
          "flask_socketio",
          "uuid",
          "typing",
          "argparse",
          "flask",
          "json",
          "time",
          "numpy",
          "logging",
          "dataclasses",
          "threading",
          "concurrent.futures"
        ],
        "docstring": "Web Agent Integration Adapter\n\nProvides web-based integration for the distributed cognitive mesh.\nHandles bidirectional communication with browser-based cognitive agents\nand web applications for distributed embodied cognition.\n\nKey Features:\n- WebSocket communication with browser agents\n- REST API for web applications\n- JavaScript SDK compatibility\n- Real-time cognitive state synchronization\n- Browser-based visualization support\n- Cross-origin resource sharing (CORS)",
        "complexity_score": 48.0,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.486121"
      },
      "attention_allocation": {
        "name": "attention_allocation",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/attention_allocation.py",
        "classes": [
          "AttentionType",
          "AttentionValue",
          "EconomicParams",
          "AttentionBank",
          "ActivationSpreading",
          "AttentionVisualizer",
          "ECANAttention",
          "ResourceType",
          "ResourcePriority"
        ],
        "functions": [
          "total_attention",
          "__init__",
          "allocate_attention",
          "calculate_utility",
          "calculate_novelty",
          "allocate_wages",
          "allocate_rents",
          "get_attention_tensor",
          "decay_attention",
          "__init__",
          "initialize_activation",
          "spread_activation",
          "get_top_activated",
          "__init__",
          "record_attention_state",
          "get_attention_dynamics",
          "generate_attention_summary",
          "__init__",
          "focus_attention",
          "update_attention_economy",
          "get_attention_focus",
          "visualize_attention_tensor",
          "get_economic_stats",
          "run_attention_cycle",
          "scheme_attention_spec",
          "register_mesh_node",
          "_spread_attention_to_mesh",
          "sync_mesh_attention",
          "get_mesh_statistics",
          "run_enhanced_attention_cycle"
        ],
        "dependencies": [
          "resource_kernel",
          "enum",
          "typing",
          "time",
          "json",
          "numpy",
          "collections",
          "dataclasses"
        ],
        "docstring": "ECAN Attention Allocation System\n\nImplements economic attention allocation with cognitive 'wages' and 'rents',\nactivation spreading, and attention tensor visualization.\nEnhanced for Phase 2 with dynamic mesh integration and resource management.",
        "complexity_score": 52.0,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.479121"
      },
      "phase4_simplified_integration_test": {
        "name": "phase4_simplified_integration_test",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/phase4_simplified_integration_test.py",
        "classes": [
          "Phase4SimplifiedIntegrationTest"
        ],
        "functions": [
          "run_phase4_simplified_integration_test",
          "setUpClass",
          "test_embodiment_recursion_level_1",
          "test_embodiment_recursion_level_2",
          "test_embodiment_recursion_level_3",
          "test_distributed_task_orchestration",
          "test_real_time_state_propagation",
          "test_end_to_end_embodiment_scenario"
        ],
        "dependencies": [
          "web_agent_adapter",
          "unittest",
          "typing",
          "ros_adapter",
          "phase4_api_server",
          "unity3d_adapter",
          "time",
          "json",
          "numpy",
          "logging"
        ],
        "docstring": "Phase 4: Simplified Full-Stack Integration Test\n\nFocused test demonstrating core embodiment interface recursion functionality\nwith stable synthesis operations.",
        "complexity_score": 15.0,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.483121"
      },
      "neural_symbolic_kernels": {
        "name": "neural_symbolic_kernels",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/neural_symbolic_kernels.py",
        "classes": [
          "SymbolicPrimitive",
          "TensorSignature",
          "NeuralSymbolicKernel",
          "GGMLConceptualEmbeddingKernel",
          "GGMLLogicalInferenceKernel",
          "GGMLAttentionAllocationKernel",
          "GGMLHypergraphConvolutionKernel",
          "CustomGGMLKernelRegistry",
          "NeuralSymbolicSynthesizer"
        ],
        "functions": [
          "create_default_kernel_registry",
          "forward",
          "backward",
          "get_signature",
          "__init__",
          "_init_ggml_matrix",
          "register_atomspace_node",
          "add_neural_inference_hook",
          "forward",
          "_ggml_tensor_optimize",
          "_apply_atomspace_inference",
          "backward",
          "_compute_attention",
          "get_signature",
          "__init__",
          "forward",
          "_neural_and",
          "_neural_or",
          "_neural_not",
          "_neural_implication",
          "backward",
          "get_signature",
          "__init__",
          "forward",
          "_softmax",
          "backward",
          "get_signature",
          "__init__",
          "forward",
          "_compute_hypergraph_messages",
          "backward",
          "get_signature",
          "__init__",
          "register_kernel",
          "execute_kernel",
          "get_kernel_signature",
          "list_kernels",
          "get_registry_stats",
          "__init__",
          "synthesize",
          "_symbolize_to_tensor",
          "get_synthesis_stats",
          "benchmark_kernels"
        ],
        "dependencies": [
          "enum",
          "typing",
          "abc",
          "json",
          "time",
          "numpy",
          "dataclasses"
        ],
        "docstring": "Neural-Symbolic Synthesis Kernels\n\nCustom GGML kernels for seamless neural-symbolic computation and inference.\nImplements real neural-symbolic operations replacing Phase 2 placeholders.\n\nEnhanced with AtomSpace integration and comprehensive GGML optimizations.",
        "complexity_score": 64.5,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.480121"
      },
      "phase6_comprehensive_test": {
        "name": "phase6_comprehensive_test",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/phase6_comprehensive_test.py",
        "classes": [
          "Phase6TestResult",
          "CognitiveUnificationValidator",
          "RealDataValidator",
          "Phase6ComprehensiveTestSuite"
        ],
        "functions": [
          "__init__",
          "validate_cognitive_unity",
          "_validate_phase_coherence",
          "_validate_data_flow",
          "_validate_recursive_modularity",
          "_validate_cross_phase_integration",
          "_test_component_integration",
          "_test_tensor_grammar_integration",
          "_test_grammar_attention_integration",
          "_test_attention_meta_integration",
          "_validate_emergent_synthesis",
          "__init__",
          "validate_no_mocks",
          "_validate_component_real_data",
          "setUpClass",
          "setUp",
          "tearDown",
          "test_complete_cognitive_architecture_integration",
          "_test_cross_phase_data_flow",
          "_test_emergent_behavior",
          "test_recursive_modularity_validation",
          "_test_self_similarity",
          "_test_recursive_introspection",
          "_test_modular_composition",
          "test_edge_case_resilience",
          "_test_empty_inputs",
          "_test_extreme_values",
          "_test_resource_limits",
          "_test_rapid_state_changes",
          "test_performance_benchmarks",
          "tearDownClass"
        ],
        "dependencies": [
          "tensor_kernel",
          "unittest",
          "typing",
          "evolutionary_optimizer",
          "datetime",
          "os",
          "time",
          "json",
          "sys",
          "numpy",
          "logging",
          "cognitive_grammar",
          "attention_allocation",
          "feedback_self_analysis",
          "dataclasses",
          "meta_cognitive"
        ],
        "docstring": "Phase 6: Rigorous Testing, Documentation, and Cognitive Unification\nComprehensive Test Suite\n\nThis module implements the comprehensive testing protocols for the complete\nDistributed Agentic Cognitive Grammar Network, validating all phases working\ntogether with real data and no mocks or simulations.\n\nAuthor: Cognitive Architecture Team\nDate: 2024-07-14\nPhase: 6 - Rigorous Testing & Cognitive Unification",
        "complexity_score": 47.0,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.484121"
      },
      "documentation_generator": {
        "name": "documentation_generator",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/documentation_generator.py",
        "classes": [
          "ModuleInfo",
          "ArchitecturalDiagram",
          "DocumentationGenerator"
        ],
        "functions": [
          "main",
          "__init__",
          "scan_cognitive_modules",
          "_analyze_module",
          "_calculate_test_coverage",
          "generate_flowchart_for_module",
          "_create_module_flowchart",
          "generate_dependency_graph",
          "_create_dependency_graph",
          "generate_class_diagram_for_module",
          "_create_class_diagram",
          "update_living_documentation",
          "_update_tensor_signatures",
          "_update_test_coverage",
          "_track_architecture_changes",
          "generate_all_documentation",
          "_create_documentation_report",
          "_calculate_documentation_completeness",
          "save_documentation_to_files",
          "datetime_converter"
        ],
        "dependencies": [
          "ast",
          "typing",
          "datetime",
          "os",
          "json",
          "sys",
          "pathlib",
          "importlib",
          "logging",
          "inspect",
          "dataclasses"
        ],
        "docstring": "Phase 6: Recursive Documentation Generator\nAuto-generates architectural flowcharts and maintains living documentation\n\nThis module implements automatic generation of architectural diagrams for every\nmodule in the cognitive architecture, maintaining living documentation that\ntracks code, tensors, tests, and evolution.\n\nAuthor: Cognitive Architecture Team\nDate: 2024-07-14\nPhase: 6 - Recursive Documentation & Auto-Generation",
        "complexity_score": 31.5,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:10:11.256366"
      },
      "phase6_deep_testing_protocols": {
        "name": "phase6_deep_testing_protocols",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/phase6_deep_testing_protocols.py",
        "classes": [
          "StressTestResult",
          "EdgeCaseResult",
          "CognitiveBoundaryTester",
          "StressTester",
          "EdgeCaseTester",
          "SystemMonitor",
          "Phase6DeepTestingProtocols"
        ],
        "functions": [
          "__init__",
          "test_knowledge_scale_boundaries",
          "test_attention_saturation_boundaries",
          "test_tensor_computation_boundaries",
          "test_meta_cognitive_recursion_boundaries",
          "__init__",
          "concurrent_operations_stress_test",
          "memory_pressure_stress_test",
          "__init__",
          "test_malformed_inputs",
          "test_extreme_values",
          "test_race_conditions",
          "__init__",
          "start_monitoring",
          "stop_monitoring",
          "setUpClass",
          "test_cognitive_boundary_validation",
          "test_stress_testing_protocols",
          "test_edge_case_protocols",
          "tearDownClass",
          "tensor_operations",
          "knowledge_operations",
          "attention_operations",
          "meta_operations",
          "create_entities_concurrently",
          "allocate_attention_concurrently",
          "monitor"
        ],
        "dependencies": [
          "unittest",
          "typing",
          "evolutionary_optimizer",
          "os",
          "attention_allocation",
          "sys",
          "cognitive_grammar",
          "feedback_self_analysis",
          "meta_cognitive",
          "logging",
          "psutil",
          "random",
          "time",
          "dataclasses",
          "tensor_kernel",
          "gc",
          "datetime",
          "math",
          "json",
          "numpy",
          "threading",
          "concurrent.futures"
        ],
        "docstring": "Phase 6: Deep Testing Protocols\nAdvanced testing protocols for edge cases, stress testing, and cognitive boundary validation\n\nThis module implements deep testing protocols that go beyond standard unit testing\nto validate the cognitive architecture under extreme conditions, edge cases, and\nboundary scenarios. All tests use real data and implementations.\n\nAuthor: Cognitive Architecture Team\nDate: 2024-07-14\nPhase: 6 - Deep Testing Protocols",
        "complexity_score": 52.0,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.484121"
      },
      "evolutionary_optimizer": {
        "name": "evolutionary_optimizer",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/evolutionary_optimizer.py",
        "classes": [
          "OptimizationTarget",
          "MutationType",
          "Genome",
          "EvolutionMetrics",
          "FitnessEvaluator",
          "GeneticOperators",
          "SelectionStrategy",
          "EvolutionaryOptimizer"
        ],
        "functions": [
          "__post_init__",
          "__init__",
          "evaluate_genome",
          "_genome_to_cache_key",
          "_evaluate_parameter_coherence",
          "_evaluate_structural_validity",
          "_validate_structure_content",
          "_predict_performance",
          "_test_real_performance",
          "_backup_system_config",
          "_apply_genome_to_system",
          "_restore_system_config",
          "_measure_system_performance",
          "_synthetic_performance",
          "__init__",
          "mutate",
          "_mutate_parameters",
          "_mutate_structure",
          "_mutate_thresholds",
          "_mutate_weights",
          "crossover",
          "tournament_selection",
          "roulette_wheel_selection",
          "elitist_selection",
          "__init__",
          "initialize_population",
          "_create_random_genome",
          "evolve",
          "_update_best_genome",
          "_calculate_evolution_metrics",
          "_create_next_generation",
          "get_optimization_summary",
          "export_best_configuration"
        ],
        "dependencies": [
          "enum",
          "copy",
          "typing",
          "random",
          "time",
          "json",
          "numpy",
          "collections",
          "dataclasses"
        ],
        "docstring": "Evolutionary Optimization System\n\nImplements MOSES-equivalent evolutionary algorithms for optimizing cognitive kernels.\nUses real genetic algorithms with mutation, crossover, and selection to evolve\nsystem parameters and configurations.",
        "complexity_score": 53.5,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.479121"
      },
      "tensor_fragments": {
        "name": "tensor_fragments",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/tensor_fragments.py",
        "classes": [
          "FragmentType",
          "SyncState",
          "FragmentMetadata",
          "TensorFragment",
          "FragmentRegistry",
          "TensorFragmentArchitecture"
        ],
        "functions": [
          "__post_init__",
          "_compute_checksum",
          "is_stale",
          "update_data",
          "__init__",
          "register_fragment",
          "get_fragment",
          "get_fragments_by_type",
          "get_dependent_fragments",
          "mark_dirty_cascade",
          "__init__",
          "create_fragment",
          "decompose_tensor",
          "compose_fragments",
          "fragment_contraction",
          "parallel_fragment_operation",
          "synchronize_fragments",
          "_synchronize_single_fragment",
          "_grid_decompose",
          "_hierarchical_decompose",
          "_compose_by_shape_compatibility",
          "get_fragment_stats",
          "_get_sync_state_counts",
          "generate_scheme_fragment_spec"
        ],
        "dependencies": [
          "tensor_kernel",
          "uuid",
          "enum",
          "typing",
          "os",
          "time",
          "sys",
          "numpy",
          "dataclasses",
          "threading"
        ],
        "docstring": "Tensor Fragment Architecture\n\nImplements distributed tensor fragment system for Phase 1 cognitive primitives.\nProvides tensor composition/decomposition, fragment synchronization, and \ndistributed parallel processing capabilities.",
        "complexity_score": 41.0,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.485121"
      },
      "living_documentation": {
        "name": "living_documentation",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/living_documentation.py",
        "classes": [
          "CodeChangeEvent",
          "TensorSignatureChange",
          "TestCoverageEvent",
          "EvolutionEvent",
          "FileWatcher",
          "LivingDocumentationSystem"
        ],
        "functions": [
          "main",
          "__init__",
          "on_modified",
          "on_created",
          "on_deleted",
          "__init__",
          "start_monitoring",
          "stop_monitoring",
          "_initial_scan",
          "_monitoring_loop",
          "_periodic_update",
          "handle_file_change",
          "_update_file_hash",
          "_scan_tensor_signatures",
          "_scan_test_coverage",
          "_analyze_architectural_impact",
          "_generate_evolution_summary",
          "register_callback",
          "_trigger_callbacks",
          "get_living_documentation_report",
          "save_living_documentation",
          "generate_markdown_report",
          "datetime_converter"
        ],
        "dependencies": [
          "watchdog.observers",
          "watchdog.events",
          "documentation_generator",
          "typing",
          "datetime",
          "os",
          "json",
          "sys",
          "time",
          "pathlib",
          "logging",
          "dataclasses",
          "threading",
          "hashlib"
        ],
        "docstring": "Phase 6: Living Documentation System\nMaintains dynamic documentation that tracks code, tensors, tests, and evolution\n\nThis module implements a living documentation system that automatically tracks\nchanges, updates documentation, and maintains real-time awareness of the\ncognitive architecture evolution.\n\nAuthor: Cognitive Architecture Team\nDate: 2024-07-14\nPhase: 6 - Living Documentation & Real-time Tracking",
        "complexity_score": 42.0,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:11:42.188431"
      },
      "phase3_demo": {
        "name": "phase3_demo",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/phase3_demo.py",
        "classes": [
          "Phase3Demo"
        ],
        "functions": [
          "main",
          "__init__",
          "demo_custom_ggml_kernels",
          "demo_neural_symbolic_synthesis",
          "demo_tensor_signature_benchmarking",
          "demo_distributed_mesh_integration",
          "demo_phase_integration",
          "generate_demo_summary",
          "run_complete_demo"
        ],
        "dependencies": [
          "neural_symbolic_kernels",
          "typing",
          "os",
          "time",
          "sys",
          "json",
          "numpy",
          "tensor_benchmarking"
        ],
        "docstring": "Phase 3 Demonstration: Neural-Symbolic Synthesis via Custom ggml Kernels\n\nInteractive demonstration of neural-symbolic synthesis capabilities,\ncustom GGML kernels, and tensor signature benchmarking.",
        "complexity_score": 15.0,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.482121"
      },
      "tensor_benchmarking": {
        "name": "tensor_benchmarking",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/tensor_benchmarking.py",
        "classes": [
          "BenchmarkMetric",
          "BenchmarkResult",
          "BenchmarkSuite",
          "TensorSignatureBenchmark"
        ],
        "functions": [
          "create_standard_benchmark_suite",
          "to_dict",
          "get_summary_stats",
          "__init__",
          "_collect_system_info",
          "benchmark_operation",
          "_calculate_accuracy",
          "benchmark_kernel_registry",
          "_generate_test_inputs",
          "benchmark_distributed_mesh",
          "profile_memory_usage",
          "generate_performance_report",
          "save_benchmark_data",
          "compare_benchmarks",
          "benchmark_func"
        ],
        "dependencies": [
          "psutil",
          "enum",
          "typing",
          "os",
          "time",
          "json",
          "pathlib",
          "numpy",
          "dataclasses",
          "statistics",
          "platform"
        ],
        "docstring": "Tensor Signature Benchmarking System\n\nComprehensive performance measurement framework for neural-symbolic tensor operations.\nProvides benchmarking, profiling, and performance optimization for custom GGML kernels.",
        "complexity_score": 28.5,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.485121"
      },
      "phase4_acceptance_test": {
        "name": "phase4_acceptance_test",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/phase4_acceptance_test.py",
        "classes": [
          "Phase4AcceptanceTest"
        ],
        "functions": [
          "run_phase4_acceptance_test",
          "setUp",
          "test_real_data_implementation",
          "test_api_server_functionality",
          "test_unity3d_integration",
          "test_ros_integration",
          "test_web_agent_integration",
          "test_distributed_state_propagation",
          "test_task_orchestration",
          "test_comprehensive_integration",
          "test_performance_validation"
        ],
        "dependencies": [
          "neural_symbolic_kernels",
          "web_agent_adapter",
          "unittest",
          "typing",
          "ros_adapter",
          "phase4_api_server",
          "unity3d_adapter",
          "time",
          "json",
          "numpy",
          "logging",
          "threading"
        ],
        "docstring": "Phase 4 Acceptance Test\n\nSimplified test to validate Phase 4 acceptance criteria without complex server setup.\nTests core functionality, real data usage, and integration capabilities.",
        "complexity_score": 19.0,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.482121"
      },
      "tensor_signature_tests": {
        "name": "tensor_signature_tests",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/tensor_signature_tests.py",
        "classes": [
          "TestTensorSignatures",
          "TestPrimeFactorizationMapping",
          "TestFragmentSignatureValidation"
        ],
        "functions": [
          "setUp",
          "test_attention_tensor_signature",
          "test_grammar_tensor_signature",
          "test_meta_cognitive_tensor_signature",
          "test_scheme_tensor_generation",
          "setUp",
          "test_prime_index_assignment",
          "test_prime_sequence_generation",
          "test_hypergraph_density_calculation",
          "test_prime_index_collision_prevention",
          "test_density_scaling_properties",
          "setUp",
          "test_fragment_metadata_signature",
          "test_fragment_operation_signatures",
          "test_decomposition_signature",
          "test_scheme_fragment_specification",
          "is_prime"
        ],
        "dependencies": [
          "tensor_kernel",
          "unittest",
          "typing",
          "os",
          "sys",
          "numpy",
          "cognitive_grammar",
          "tensor_fragments"
        ],
        "docstring": "Tensor Signature and Prime Factorization Validation Tests\n\nTests specifically for the enhanced documentation and implementation\nof tensor signatures and prime factorization mapping.",
        "complexity_score": 27.0,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.485121"
      },
      "tensor_kernel": {
        "name": "tensor_kernel",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/tensor_kernel.py",
        "classes": [
          "TensorFormat",
          "TensorKernel"
        ],
        "functions": [
          "initialize_default_shapes",
          "__init__",
          "enable_neural_symbolic_synthesis",
          "neural_symbolic_operation",
          "define_canonical_shape",
          "get_canonical_shape",
          "create_tensor",
          "_convert_tensor_format",
          "_apply_ggml_optimizations",
          "_apply_kokkos_layout",
          "_apply_a0ml_metadata",
          "tensor_contraction",
          "parallel_operation",
          "_parallel_reduce",
          "_parallel_map",
          "_parallel_scan",
          "_parallel_stencil",
          "_apply_stencil_kernel",
          "meta_learning_update",
          "_compute_adaptive_learning_rate",
          "get_operation_stats",
          "scheme_tensor_shape"
        ],
        "dependencies": [
          "neural_symbolic_kernels",
          "enum",
          "typing",
          "os",
          "json",
          "sys",
          "numpy"
        ],
        "docstring": "Tensor Kernel Cohesion Layer\n\nIntegrates GGML for backend-abstracted tensor computation, Kokkos for parallel operations,\nand A0ML for meta-learning orchestration. Provides seamless tensor format conversion\nand canonical tensor shape specifications.\n\nEnhanced for Phase 3: Neural-Symbolic Synthesis via Custom ggml Kernels",
        "complexity_score": 29.5,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.485121"
      },
      "phase1_final_validation": {
        "name": "phase1_final_validation",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/phase1_final_validation.py",
        "classes": [],
        "functions": [
          "run_test_suite",
          "validate_documentation",
          "validate_real_implementation",
          "main"
        ],
        "dependencies": [
          "time",
          "sys",
          "subprocess",
          "os"
        ],
        "docstring": "Phase 1 Final Validation Test\n\nComprehensive validation of all Phase 1 acceptance criteria:\n- All implementation is completed with real data (no mocks or simulations)\n- Comprehensive tests are written and passing\n- Documentation is updated with architectural diagrams\n- Code follows recursive modularity principles\n- Integration tests validate the functionality\n- Tensor signatures and prime factorization mapping documented",
        "complexity_score": 6.0,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.481121"
      },
      "phase3_acceptance_test": {
        "name": "phase3_acceptance_test",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/phase3_acceptance_test.py",
        "classes": [],
        "functions": [
          "test_acceptance_criteria",
          "main"
        ],
        "dependencies": [
          "neural_symbolic_kernels",
          "tensor_kernel",
          "phase3_verification",
          "os",
          "time",
          "sys",
          "json",
          "numpy",
          "tensor_benchmarking"
        ],
        "docstring": "Phase 3 Final Integration Test\nValidates all acceptance criteria for Phase 3: Neural-Symbolic Synthesis via Custom ggml Kernels\n\nThis test ensures:\n- All implementation is completed with real data (no mocks or simulations)\n- Comprehensive tests are written and passing\n- Documentation is updated with architectural diagrams\n- Code follows recursive modularity principles\n- Integration tests validate the functionality",
        "complexity_score": 6.5,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.481121"
      },
      "phase1_demo_with_visualization": {
        "name": "phase1_demo_with_visualization",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/phase1_demo_with_visualization.py",
        "classes": [
          "Phase1DemoWithVisualization"
        ],
        "functions": [
          "main",
          "__init__",
          "run_complete_demo",
          "demo_microservices_architecture",
          "demo_ko6ml_translation",
          "demo_tensor_fragment_operations",
          "demo_hypergraph_knowledge",
          "demo_attention_allocation",
          "create_comprehensive_visualizations",
          "demo_integration_scenario",
          "final_validation",
          "cleanup"
        ],
        "dependencies": [
          "tensor_kernel",
          "microservices.ko6ml_translator",
          "hypergraph_visualizer",
          "tensor_fragments",
          "traceback",
          "typing",
          "os",
          "time",
          "sys",
          "attention_allocation",
          "numpy",
          "cognitive_grammar",
          "microservices",
          "threading",
          "meta_cognitive"
        ],
        "docstring": "Phase 1 Comprehensive Demo with Hypergraph Visualization\n\nDemonstrates all Phase 1 components with real-time visualization:\n- Cognitive primitives and hypergraph encoding\n- ko6ml \u2194 AtomSpace bidirectional translation\n- Tensor fragment operations with flowcharts\n- Microservices architecture\n- Comprehensive hypergraph fragment flowcharts\n\nThis demo satisfies the Phase 1 requirement for \"Visualization: Hypergraph fragment flowcharts\"",
        "complexity_score": 21.5,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.481121"
      },
      "test_validation": {
        "name": "test_validation",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/test_validation.py",
        "classes": [],
        "functions": [
          "test_tensor_kernel",
          "test_cognitive_grammar",
          "test_attention_allocation",
          "test_meta_cognitive",
          "test_integration",
          "main"
        ],
        "dependencies": [
          "cognitive.cognitive_grammar",
          "cognitive.meta_cognitive",
          "os",
          "cognitive.attention_allocation",
          "sys",
          "numpy",
          "cognitive.tensor_kernel",
          "traceback"
        ],
        "docstring": "Basic validation tests for the cognitive architecture",
        "complexity_score": 10.0,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.485121"
      },
      "demo": {
        "name": "demo",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/demo.py",
        "classes": [],
        "functions": [
          "demonstrate_tensor_operations",
          "demonstrate_cognitive_grammar",
          "demonstrate_attention_allocation",
          "demonstrate_meta_cognitive",
          "demonstrate_full_integration",
          "main"
        ],
        "dependencies": [
          "typing",
          "cognitive.cognitive_grammar",
          "cognitive.meta_cognitive",
          "os",
          "cognitive.attention_allocation",
          "sys",
          "numpy",
          "cognitive.tensor_kernel",
          "traceback"
        ],
        "docstring": "Cognitive Architecture Demo\n\nThis script demonstrates the complete cognitive architecture system\nintegrating tensor computation, knowledge representation, attention allocation,\nand meta-cognitive monitoring.",
        "complexity_score": 10.5,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.479121"
      },
      "phase4_fullstack_integration_test": {
        "name": "phase4_fullstack_integration_test",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/phase4_fullstack_integration_test.py",
        "classes": [
          "RecursiveEmbodimentScenario",
          "Phase4FullStackIntegrationTest"
        ],
        "functions": [
          "run_phase4_fullstack_integration_test",
          "__init__",
          "setUpClass",
          "_create_test_agents",
          "test_recursive_embodiment_level_1_direct_interaction",
          "test_recursive_embodiment_level_2_cross_platform",
          "test_recursive_embodiment_level_3_meta_cognitive",
          "test_concurrent_recursive_embodiment",
          "test_error_recovery_in_recursive_embodiment",
          "test_performance_under_recursive_load",
          "test_full_stack_integration_scenario",
          "execute_concurrent_scenario",
          "execute_load_test_operation"
        ],
        "dependencies": [
          "neural_symbolic_kernels",
          "web_agent_adapter",
          "unittest",
          "typing",
          "ros_adapter",
          "phase4_api_server",
          "unity3d_adapter",
          "asyncio",
          "time",
          "json",
          "numpy",
          "logging",
          "uuid",
          "threading",
          "concurrent.futures"
        ],
        "docstring": "Phase 4: Full-Stack Integration Test\n\nComprehensive test demonstrating end-to-end embodiment interface recursion\nacross Unity3D, ROS, and Web agents with real-time cognitive synthesis.\n\nThis test validates:\n1. Cross-platform embodiment coordination\n2. Recursive cognitive processing\n3. Distributed state propagation  \n4. Multi-modal synthesis integration\n5. Real-time performance under load",
        "complexity_score": 24.5,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.483121"
      },
      "adaptive_optimization_demo": {
        "name": "adaptive_optimization_demo",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/adaptive_optimization_demo.py",
        "classes": [
          "MockCognitiveKernel",
          "AdaptiveOptimizationDemo"
        ],
        "functions": [
          "main",
          "__init__",
          "get_operation_stats",
          "get_performance_metrics",
          "simulate_work",
          "update_config",
          "__init__",
          "setup_cognitive_system",
          "demonstrate_continuous_benchmarking",
          "demonstrate_kernel_autotuning",
          "demonstrate_adaptive_optimization_system",
          "demonstrate_evolutionary_trajectories",
          "run_complete_demo",
          "generate_demo_report"
        ],
        "dependencies": [
          "typing",
          "time",
          "json",
          "numpy",
          "feedback_self_analysis",
          "adaptive_optimization",
          "meta_cognitive"
        ],
        "docstring": "Adaptive Optimization Demonstration\n\nDemonstrates the complete adaptive optimization system including continuous\nbenchmarking, self-tuning of kernels and agents, and evolutionary optimization.\nThis demo specifically showcases the \"Adaptive Optimization\" capabilities\nrequired by Phase 5.",
        "complexity_score": 21.5,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.479121"
      },
      "phase6_integration_test": {
        "name": "phase6_integration_test",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/phase6_integration_test.py",
        "classes": [
          "IntegrationTestResult",
          "CognitiveFlowResult",
          "CognitiveUnificationEngine",
          "Phase6IntegrationTestSuite"
        ],
        "functions": [
          "__init__",
          "validate_unified_cognitive_architecture",
          "_validate_structural_unification",
          "_validate_functional_unification",
          "_validate_data_flow_unification",
          "_validate_emergent_behavior",
          "_validate_cognitive_coherence",
          "_check_interface_consistency",
          "_check_recursive_modularity",
          "_test_function_integration",
          "_test_state_synchronization",
          "_test_error_handling",
          "_test_tensor_to_grammar_flow",
          "_test_grammar_to_attention_flow",
          "_test_attention_to_meta_flow",
          "_test_meta_to_evolution_flow",
          "_test_full_roundtrip_flow",
          "_test_emergent_knowledge_synthesis",
          "_test_emergent_attention_patterns",
          "_test_emergent_optimization",
          "_test_emergent_cognitive_insights",
          "_test_temporal_coherence",
          "_test_spatial_coherence",
          "_test_logical_coherence",
          "_test_causal_coherence",
          "setUpClass",
          "test_unified_cognitive_architecture_validation",
          "test_end_to_end_cognitive_workflow",
          "test_cognitive_emergence_validation",
          "test_real_data_implementation_verification",
          "tearDownClass"
        ],
        "dependencies": [
          "tensor_kernel",
          "unittest",
          "typing",
          "evolutionary_optimizer",
          "datetime",
          "os",
          "time",
          "json",
          "sys",
          "numpy",
          "logging",
          "cognitive_grammar",
          "attention_allocation",
          "feedback_self_analysis",
          "dataclasses",
          "meta_cognitive"
        ],
        "docstring": "Phase 6: Integration Test Suite\nUnified System Integration Tests for Cognitive Unification\n\nThis module implements comprehensive integration tests that validate the entire\nDistributed Agentic Cognitive Grammar Network as a unified cognitive system.\nTests ensure all phases work together seamlessly with real data.\n\nAuthor: Cognitive Architecture Team\nDate: 2024-07-14\nPhase: 6 - Integration Testing & Cognitive Unification",
        "complexity_score": 47.0,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.484121"
      },
      "meta_cognitive": {
        "name": "meta_cognitive",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/meta_cognitive.py",
        "classes": [
          "MetaLayer",
          "IntrospectionLevel",
          "MetaTensor",
          "CognitiveState",
          "MetaStateMonitor",
          "RecursiveIntrospector",
          "MetaCognitive"
        ],
        "functions": [
          "__post_init__",
          "__init__",
          "register_layer_monitor",
          "capture_layer_state",
          "_capture_tensor_kernel_state",
          "_capture_grammar_state",
          "_capture_attention_state",
          "_calculate_performance_metrics",
          "_monitor_resources",
          "_check_error_states",
          "start_monitoring",
          "stop_monitoring",
          "get_current_state",
          "get_state_trajectory",
          "__init__",
          "introspect_layer",
          "_perform_introspection",
          "_analyze_structure",
          "_analyze_behavior",
          "_analyze_state",
          "scheme_introspection",
          "__init__",
          "register_layer",
          "update_meta_state",
          "_compute_cognitive_state",
          "_calculate_coherence",
          "perform_deep_introspection",
          "get_meta_tensor_dynamics",
          "diagnose_system_health",
          "_calculate_stability",
          "get_current_state",
          "get_system_stats"
        ],
        "dependencies": [
          "psutil",
          "enum",
          "typing",
          "time",
          "json",
          "numpy",
          "inspect",
          "collections",
          "dataclasses"
        ],
        "docstring": "Meta-Cognitive Enhancement System\n\nImplements meta-tensor state tracking, recursive introspection capabilities,\nand operational state monitoring for each cognitive layer.",
        "complexity_score": 50.5,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.480121"
      },
      "adaptive_optimization": {
        "name": "adaptive_optimization",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/adaptive_optimization.py",
        "classes": [
          "AdaptationStrategy",
          "PerformanceTrajectory",
          "FitnessLandscape",
          "ContinuousBenchmark",
          "KernelAutoTuner",
          "AdaptiveOptimizer"
        ],
        "functions": [
          "add_measurement",
          "_update_trend_analysis",
          "add_sample_point",
          "_update_landscape_analysis",
          "__init__",
          "start_continuous_benchmarking",
          "stop_continuous_benchmarking",
          "_benchmarking_loop",
          "get_performance_trends",
          "get_landscape_analysis",
          "__init__",
          "auto_tune_kernel",
          "_calculate_adaptation_magnitude",
          "_apply_corrective_tuning",
          "_apply_progressive_tuning",
          "_apply_exploratory_tuning",
          "__init__",
          "start_adaptive_optimization",
          "stop_adaptive_optimization",
          "_adaptive_optimization_loop",
          "_should_adapt",
          "_perform_adaptive_optimization",
          "_extract_kernel_config",
          "_apply_kernel_config",
          "_create_genome_from_current_state",
          "_apply_evolutionary_result",
          "get_optimization_summary"
        ],
        "dependencies": [
          "enum",
          "evolutionary_optimizer",
          "typing",
          "queue",
          "time",
          "json",
          "numpy",
          "feedback_self_analysis",
          "collections",
          "dataclasses",
          "threading",
          "meta_cognitive"
        ],
        "docstring": "Adaptive Optimization Module\n\nImplements continuous benchmarking, self-tuning of kernels and agents with\nreal-time adaptation based on performance trajectories and fitness landscapes.\nThis module specifically addresses the \"Adaptive Optimization\" component\nof Phase 5 requirements.",
        "complexity_score": 45.0,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.479121"
      },
      "mesh_topology": {
        "name": "mesh_topology",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/mesh_topology.py",
        "classes": [
          "AgentRole",
          "MeshTopology",
          "AgentState",
          "MeshMessage",
          "DistributedAgent",
          "DynamicMesh"
        ],
        "functions": [
          "__post_init__",
          "__post_init__",
          "__init__",
          "_find_free_port",
          "_initialize_role_capabilities",
          "start",
          "stop",
          "send_message",
          "receive_message",
          "update_load",
          "get_capacity",
          "_handle_coordination",
          "_handle_state_sync",
          "_handle_topology_update",
          "_handle_attention_focus",
          "_handle_attention_spread",
          "_handle_memory_store",
          "_handle_memory_retrieve",
          "_handle_process_task",
          "_handle_compute_tensor",
          "_handle_run_inference",
          "_handle_update_beliefs",
          "__init__",
          "add_agent",
          "remove_agent",
          "_rebuild_topology",
          "_build_adaptive_topology",
          "_update_agent_connections",
          "propagate_state",
          "benchmark_attention_allocation",
          "get_mesh_topology_stats",
          "visualize_topology",
          "scheme_mesh_spec"
        ],
        "dependencies": [
          "uuid",
          "enum",
          "typing",
          "socket",
          "json",
          "time",
          "numpy",
          "collections",
          "dataclasses",
          "threading",
          "concurrent.futures",
          "hashlib"
        ],
        "docstring": "Dynamic Mesh Topology for Distributed Cognitive Agents\n\nImplements distributed agent mesh with dynamic topology management,\nstate propagation, and real-time agent communication.",
        "complexity_score": 51.0,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.480121"
      },
      "phase2_demo": {
        "name": "phase2_demo",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/phase2_demo.py",
        "classes": [
          "Phase2IntegratedDemo"
        ],
        "functions": [
          "main",
          "__init__",
          "print_section_header",
          "print_subsection",
          "setup_cognitive_infrastructure",
          "_create_business_scenario",
          "_create_attention_network",
          "_setup_cognitive_mesh",
          "_configure_agent_resources",
          "demonstrate_resource_allocation",
          "demonstrate_attention_scheduling",
          "demonstrate_mesh_integration",
          "demonstrate_economic_attention_model",
          "run_performance_benchmark",
          "generate_comprehensive_report",
          "demo_dynamic_mesh_creation",
          "demo_resource_kernel_construction",
          "demo_attention_allocation_across_mesh",
          "demo_comprehensive_benchmarking",
          "run_complete_demo",
          "run_complete_demonstration"
        ],
        "dependencies": [
          "typing",
          "cognitive.cognitive_grammar",
          "cognitive.benchmarking",
          "os",
          "time",
          "sys",
          "json",
          "numpy",
          "cognitive.attention_allocation",
          "cognitive.mesh_topology",
          "cognitive.resource_kernel",
          "traceback"
        ],
        "docstring": "Phase 2 Demo: ECAN Attention Allocation & Dynamic Mesh Integration\n\nComprehensive demonstration of Phase 2 capabilities including:\n- Dynamic mesh topology with distributed agents\n- ECAN-style attention allocation across the mesh\n- Resource kernel construction and allocation\n- Real-time benchmarking and performance monitoring\n- Mesh topology visualization and state propagation\n- Integrated cognitive infrastructure demonstration",
        "complexity_score": 29.0,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.481121"
      },
      "phase2_tests": {
        "name": "phase2_tests",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/phase2_tests.py",
        "classes": [
          "Phase2Tests"
        ],
        "functions": [
          "main",
          "__init__",
          "test_dynamic_mesh_creation",
          "test_resource_kernel_allocation",
          "test_distributed_resource_management",
          "test_attention_allocation_benchmarking",
          "test_mesh_communication_performance",
          "test_comprehensive_benchmarking",
          "test_integration_scenarios",
          "test_scheme_specifications",
          "run_all_tests"
        ],
        "dependencies": [
          "typing",
          "cognitive.benchmarking",
          "os",
          "time",
          "sys",
          "cognitive.attention_allocation",
          "numpy",
          "cognitive.resource_kernel",
          "cognitive.mesh_topology"
        ],
        "docstring": "Phase 2 Tests: ECAN Attention Allocation & Dynamic Mesh Integration\n\nComprehensive test suite for Phase 2 implementation including:\n- Dynamic mesh topology management\n- Distributed resource allocation\n- Attention allocation benchmarking\n- Mesh communication performance\n- Integration validation",
        "complexity_score": 17.5,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.481121"
      },
      "standalone_neural_symbolic": {
        "name": "standalone_neural_symbolic",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/standalone_neural_symbolic.py",
        "classes": [
          "SymbolicPrimitive",
          "TensorSignature",
          "AtomSpaceNode",
          "AtomSpaceLink",
          "NeuralSymbolicKernel",
          "EnhancedGGMLConceptualEmbeddingKernel",
          "EnhancedGGMLLogicalInferenceKernel",
          "EnhancedCustomGGMLKernelRegistry",
          "EnhancedNeuralSymbolicSynthesizer",
          "SimpleAttentionKernel",
          "SimpleHypergraphKernel"
        ],
        "functions": [
          "create_enhanced_kernel_registry",
          "create_atomspace_test_environment",
          "modus_ponens_hook",
          "conjunction_hook",
          "disjunction_hook",
          "forward",
          "backward",
          "get_signature",
          "__init__",
          "_init_ggml_matrix",
          "register_atomspace_node",
          "register_atomspace_link",
          "forward",
          "_ggml_tensor_optimize",
          "_compute_enhanced_attention",
          "_apply_atomspace_inference",
          "backward",
          "get_signature",
          "__init__",
          "_init_logic_matrix",
          "forward",
          "_ggml_optimize",
          "_enhanced_neural_and",
          "_enhanced_neural_or",
          "_enhanced_neural_not",
          "_enhanced_neural_implication",
          "_enhanced_neural_biconditional",
          "_propagate_uncertainty",
          "backward",
          "get_signature",
          "__init__",
          "register_kernel",
          "register_atomspace_node",
          "register_atomspace_link",
          "execute_kernel",
          "get_kernel_signature",
          "list_kernels",
          "get_registry_stats",
          "__init__",
          "_create_enhanced_registry",
          "register_inference_hook",
          "synthesize",
          "_enhanced_symbolize_to_tensor",
          "_apply_atomspace_context",
          "_prepare_synthesis_inputs",
          "_apply_inference_hooks",
          "_record_enhanced_metrics",
          "get_synthesis_stats",
          "benchmark_kernels",
          "__init__",
          "forward",
          "backward",
          "get_signature",
          "__init__",
          "forward",
          "backward",
          "get_signature"
        ],
        "dependencies": [
          "enum",
          "typing",
          "abc",
          "json",
          "time",
          "numpy",
          "dataclasses",
          "statistics"
        ],
        "docstring": "Standalone Neural-Symbolic Synthesis Engine\nPhase 3: Custom GGML Kernels for Neural-Symbolic Computation\n\nThis module provides a standalone implementation of neural-symbolic synthesis\nwithout frappe dependencies, ensuring real implementation with comprehensive testing.",
        "complexity_score": 83.0,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.485121"
      },
      "phase3_comprehensive_demo": {
        "name": "phase3_comprehensive_demo",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/phase3_comprehensive_demo.py",
        "classes": [],
        "functions": [
          "demonstrate_custom_ggml_kernels",
          "demonstrate_neural_symbolic_synthesis",
          "demonstrate_tensor_signature_benchmarking",
          "demonstrate_integration_verification",
          "demonstrate_performance_characteristics",
          "generate_comprehensive_report",
          "main"
        ],
        "dependencies": [
          "neural_symbolic_kernels",
          "tensor_kernel",
          "typing",
          "time",
          "pathlib",
          "json",
          "numpy",
          "tensor_benchmarking"
        ],
        "docstring": "Phase 3: Neural-Symbolic Synthesis via Custom ggml Kernels\nComprehensive Demonstration\n\nThis script demonstrates all Phase 3 capabilities with real tensor operations,\ncomprehensive benchmarking, and integration with Phase 1/2 components.\n\nNo mocks or simulations - all operations use real mathematical computations.",
        "complexity_score": 11.0,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.481121"
      },
      "phase5_acceptance_test": {
        "name": "phase5_acceptance_test",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/phase5_acceptance_test.py",
        "classes": [
          "MockCognitiveComponent",
          "Phase5AcceptanceTest",
          "TestRunner"
        ],
        "functions": [
          "main",
          "__init__",
          "get_operation_stats",
          "get_knowledge_stats",
          "get_economic_stats",
          "simulate_work",
          "setUp",
          "tearDown",
          "test_real_data_implementation",
          "test_comprehensive_tests",
          "test_recursive_modularity",
          "test_evolutionary_optimization_integration",
          "test_integration_with_existing_phases",
          "test_documentation_and_architecture",
          "test_acceptance_criteria_summary",
          "run_acceptance_tests"
        ],
        "dependencies": [
          "unittest",
          "typing",
          "evolutionary_optimizer",
          "os",
          "time",
          "json",
          "numpy",
          "feedback_self_analysis",
          "tempfile",
          "threading",
          "meta_cognitive"
        ],
        "docstring": "Phase 5 Acceptance Test\n\nValidates Phase 5 acceptance criteria for Recursive Meta-Cognition & Evolutionary Optimization.\nTests implementation with real data, comprehensive functionality, and integration.",
        "complexity_score": 27.5,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.483121"
      },
      "hypergraph_visualizer": {
        "name": "hypergraph_visualizer",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/hypergraph_visualizer.py",
        "classes": [
          "HypergraphNode",
          "HypergraphEdge",
          "FragmentLayout",
          "HypergraphVisualizer"
        ],
        "functions": [
          "main",
          "__init__",
          "create_hypergraph_flowchart",
          "create_ko6ml_translation_diagram",
          "create_tensor_fragment_visualization",
          "create_attention_heatmap",
          "create_comprehensive_flowchart",
          "_draw_node",
          "_draw_hyperedge",
          "_draw_ko6ml_primitives",
          "_draw_translation_arrows",
          "_draw_atomspace_atoms",
          "_draw_tensor_grid",
          "_draw_tensor_hierarchy",
          "_draw_fragment_composition",
          "_draw_operations_pipeline",
          "_draw_component_area",
          "_draw_component_connections",
          "_add_legend",
          "_add_comprehensive_legend",
          "generate_all_phase1_visualizations"
        ],
        "dependencies": [
          "typing",
          "matplotlib.pyplot",
          "json",
          "os",
          "numpy",
          "matplotlib.patches",
          "dataclasses",
          "seaborn"
        ],
        "docstring": "Hypergraph Fragment Flowchart Visualizer\n\nProvides comprehensive visualization for Phase 1 hypergraph fragments,\nko6ml translations, and cognitive primitive operations.",
        "complexity_score": 33.0,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.480121"
      },
      "phase1_demo": {
        "name": "phase1_demo",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/phase1_demo.py",
        "classes": [
          "Phase1Demo"
        ],
        "functions": [
          "print_header",
          "print_section",
          "print_success",
          "print_info",
          "main",
          "__init__",
          "run_complete_demo",
          "demo_microservices_architecture",
          "demo_ko6ml_translation",
          "demo_tensor_fragment_architecture",
          "demo_integrated_cognitive_scenario",
          "demo_scheme_integration",
          "show_final_statistics",
          "cleanup"
        ],
        "dependencies": [
          "tensor_kernel",
          "microservices.ko6ml_translator",
          "tensor_fragments",
          "typing",
          "os",
          "time",
          "sys",
          "numpy",
          "cognitive_grammar",
          "microservices",
          "threading",
          "traceback"
        ],
        "docstring": "Phase 1 Demonstration\n\nComprehensive demonstration of Phase 1: Cognitive Primitives & Foundational Hypergraph Encoding.\nShows microservices architecture, tensor fragment operations, and ko6ml translations in action.",
        "complexity_score": 22.0,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.481121"
      },
      "phase1_tests": {
        "name": "phase1_tests",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/phase1_tests.py",
        "classes": [
          "TestPhase1Microservices",
          "TestKo6mlTranslation",
          "TestTensorFragmentArchitecture",
          "TestPhase1Integration"
        ],
        "functions": [
          "run_phase1_verification",
          "setUpClass",
          "tearDownClass",
          "test_atomspace_service_health",
          "test_atomspace_crud_operations",
          "test_pln_service_inference",
          "test_pattern_service_operations",
          "setUp",
          "test_basic_ko6ml_to_atomspace",
          "test_atomspace_to_ko6ml",
          "test_round_trip_translation",
          "test_complex_pattern_translation",
          "test_scheme_generation",
          "setUp",
          "test_fragment_creation",
          "test_tensor_decomposition",
          "test_fragment_composition",
          "test_fragment_contraction",
          "test_parallel_fragment_operations",
          "test_fragment_synchronization",
          "test_hierarchical_decomposition",
          "test_scheme_fragment_generation",
          "setUp",
          "test_end_to_end_cognitive_scenario",
          "test_distributed_cognitive_operations"
        ],
        "dependencies": [
          "tensor_kernel",
          "microservices.ko6ml_translator",
          "tensor_fragments",
          "unittest",
          "typing",
          "os",
          "time",
          "json",
          "sys",
          "numpy",
          "cognitive_grammar",
          "microservices",
          "threading",
          "requests"
        ],
        "docstring": "Phase 1 Verification Tests\n\nComprehensive test suite for Phase 1: Cognitive Primitives & Foundational Hypergraph Encoding.\nTests microservices architecture, tensor fragment operations, and ko6ml translations.",
        "complexity_score": 40.0,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.481121"
      },
      "phase5_demo": {
        "name": "phase5_demo",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/phase5_demo.py",
        "classes": [
          "MockCognitiveLayer",
          "Phase5Demo"
        ],
        "functions": [
          "main",
          "__init__",
          "get_operation_stats",
          "get_knowledge_stats",
          "get_economic_stats",
          "simulate_operation",
          "__init__",
          "initialize_cognitive_system",
          "demonstrate_evolutionary_optimization",
          "_create_demonstration_genomes",
          "demonstrate_recursive_metacognition",
          "demonstrate_feedback_driven_adaptation",
          "_simulate_cognitive_workload",
          "demonstrate_integration_with_existing_phases",
          "run_comprehensive_demo",
          "generate_demonstration_report"
        ],
        "dependencies": [
          "neural_symbolic_kernels",
          "tensor_kernel",
          "evolutionary_optimizer",
          "typing",
          "attention_allocation",
          "time",
          "json",
          "numpy",
          "logging",
          "feedback_self_analysis",
          "cognitive_grammar",
          "threading",
          "meta_cognitive"
        ],
        "docstring": "Phase 5 Demonstration: Recursive Meta-Cognition & Evolutionary Optimization\n\nInteractive demonstration showing feedback-driven self-analysis modules and\nevolutionary optimization of cognitive kernels using real data.",
        "complexity_score": 26.5,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.483121"
      },
      "phase4_tests": {
        "name": "phase4_tests",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/phase4_tests.py",
        "classes": [
          "Phase4TestBase",
          "TestRestAPIEndpoints",
          "TestWebSocketCommunication",
          "TestUnity3DIntegration",
          "TestROSIntegration",
          "TestWebAgentIntegration",
          "TestIntegrationScenarios",
          "TestRealDataValidation"
        ],
        "functions": [
          "run_phase4_tests",
          "setUpClass",
          "_find_free_port",
          "tearDownClass",
          "_start_test_servers",
          "_stop_test_servers",
          "wait_for_server",
          "setUp",
          "test_health_check_endpoint",
          "test_cognitive_synthesis_endpoint",
          "test_task_creation_and_retrieval",
          "test_embodiment_binding",
          "test_cognitive_state_retrieval",
          "test_mesh_state_propagation",
          "setUp",
          "test_websocket_connection",
          "test_real_time_synthesis",
          "setUp",
          "test_unity3d_adapter_status",
          "test_unity3d_protocol_communication",
          "test_unity3d_action_execution",
          "setUp",
          "test_ros_adapter_status",
          "test_ros_protocol_communication",
          "test_ros_topic_publishing",
          "setUp",
          "test_web_dashboard_access",
          "test_web_api_endpoints",
          "test_javascript_sdk_serving",
          "test_web_task_creation",
          "test_multi_adapter_coordination",
          "test_cross_adapter_task_flow",
          "test_real_time_state_synchronization",
          "test_neural_symbolic_synthesis_real_computation",
          "test_distributed_mesh_real_performance",
          "test_memory_usage_real_tracking",
          "connect",
          "synthesis_result"
        ],
        "dependencies": [
          "web_agent_adapter",
          "unittest",
          "socket",
          "typing",
          "ros_adapter",
          "phase4_api_server",
          "unity3d_adapter",
          "socketio",
          "time",
          "json",
          "numpy",
          "logging",
          "threading",
          "concurrent.futures",
          "websocket",
          "requests"
        ],
        "docstring": "Phase 4 Comprehensive Tests\n\nTests for the Distributed Cognitive Mesh API & Embodiment Layer.\nValidates all acceptance criteria with real data (no mocks or simulations).\n\nTest Coverage:\n- REST API endpoints functionality\n- WebSocket real-time communication\n- Unity3D integration adapter\n- ROS integration adapter\n- Web agent integration\n- Distributed state propagation\n- Task orchestration\n- Real data validation\n- Integration tests",
        "complexity_score": 62.0,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.483121"
      },
      "ros_adapter": {
        "name": "ros_adapter",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/ros_adapter.py",
        "classes": [
          "ROSMessage",
          "ROSService",
          "ROSAction",
          "ROSCognitiveAgent",
          "ROSMessageTypes",
          "ROSProtocol",
          "ROSIntegrationAdapter"
        ],
        "functions": [
          "main",
          "__post_init__",
          "__post_init__",
          "__post_init__",
          "pack_message",
          "unpack_message",
          "__init__",
          "start_server",
          "stop_server",
          "_accept_connections",
          "_handle_ros_client",
          "_process_ros_message",
          "_handle_topic_publish",
          "_handle_topic_subscribe",
          "_handle_service_call",
          "_handle_action_goal",
          "_handle_agent_state_update",
          "_handle_ros_heartbeat",
          "_process_service_request",
          "_execute_ros_action",
          "_forward_message_to_connection",
          "_cleanup_ros_connection",
          "_monitor_ros_system",
          "_process_messages",
          "_send_message_to_ros",
          "publish_topic",
          "call_service",
          "send_cognitive_update",
          "get_agent_state",
          "list_agents",
          "get_system_state",
          "get_status",
          "connection_callback"
        ],
        "dependencies": [
          "struct",
          "typing",
          "socket",
          "argparse",
          "json",
          "time",
          "numpy",
          "logging",
          "dataclasses",
          "threading",
          "concurrent.futures"
        ],
        "docstring": "ROS (Robot Operating System) Integration Adapter\n\nProvides ROS-specific integration for the distributed cognitive mesh.\nHandles bidirectional communication with ROS nodes for robotic embodied cognition.\n\nKey Features:\n- ROS message publishing and subscription\n- Service client/server communication\n- Action server integration\n- Real-time sensor data streaming\n- Motor control and actuation\n- Transformation and navigation support",
        "complexity_score": 52.5,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.485121"
      },
      "unity3d_adapter": {
        "name": "unity3d_adapter",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/unity3d_adapter.py",
        "classes": [
          "Unity3DTransform",
          "Unity3DCognitiveAgent",
          "Unity3DAction",
          "Unity3DProtocol",
          "Unity3DIntegrationAdapter"
        ],
        "functions": [
          "main",
          "__post_init__",
          "__post_init__",
          "pack_message",
          "unpack_message",
          "__init__",
          "start_server",
          "stop_server",
          "_accept_connections",
          "_handle_client",
          "_process_unity_message",
          "_handle_agent_update",
          "_handle_action_response",
          "_handle_sensor_data",
          "_handle_heartbeat",
          "_cleanup_connection",
          "_process_messages",
          "_send_message_to_unity",
          "send_cognitive_state_update",
          "execute_action",
          "get_agent_state",
          "list_agents",
          "get_environment_state",
          "update_agent_transform",
          "get_status"
        ],
        "dependencies": [
          "struct",
          "typing",
          "socket",
          "argparse",
          "json",
          "time",
          "numpy",
          "logging",
          "dataclasses",
          "threading",
          "concurrent.futures"
        ],
        "docstring": "Unity3D Embodiment Integration Adapter\n\nProvides Unity3D-specific integration for the distributed cognitive mesh.\nHandles bidirectional communication with Unity3D engines for embodied cognition.\n\nKey Features:\n- Unity3D-compatible data serialization\n- Real-time position and orientation updates\n- Cognitive state mapping to Unity GameObject properties\n- Action execution in Unity environments\n- Sensor data ingestion from Unity scenes",
        "complexity_score": 40.5,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.486121"
      },
      "phase4_api_server": {
        "name": "phase4_api_server",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/phase4_api_server.py",
        "classes": [
          "CognitiveTask",
          "EmbodimentBinding",
          "CognitiveAPIServer"
        ],
        "functions": [
          "main",
          "__post_init__",
          "__post_init__",
          "__init__",
          "_create_default_mesh_agents",
          "_setup_routes",
          "_setup_websocket_handlers",
          "_assign_task_to_agents",
          "_execute_task",
          "_execute_synthesis_task",
          "_execute_attention_task",
          "_execute_inference_task",
          "_execute_generic_task",
          "_initialize_embodiment_binding",
          "_setup_unity3d_binding",
          "_setup_ros_binding",
          "_setup_web_binding",
          "_propagate_cognitive_state",
          "_update_operations_per_second",
          "_start_background_services",
          "run",
          "health_check",
          "synthesize",
          "create_task",
          "get_task",
          "get_cognitive_state",
          "bind_embodiment",
          "list_bindings",
          "list_mesh_nodes",
          "propagate_state",
          "handle_connect",
          "handle_disconnect",
          "handle_join_room",
          "handle_real_time_synthesis",
          "handle_state_subscription",
          "metrics_updater",
          "heartbeat_monitor"
        ],
        "dependencies": [
          "neural_symbolic_kernels",
          "psutil",
          "concurrent.futures",
          "flask_socketio",
          "dataclasses",
          "typing",
          "argparse",
          "os",
          "json",
          "time",
          "sys",
          "numpy",
          "logging",
          "mesh_topology",
          "cognitive_grammar",
          "uuid",
          "threading",
          "flask"
        ],
        "docstring": "Phase 4: Distributed Cognitive Mesh API & Embodiment Layer\n\nREST/WebSocket API server that exposes the cognitive network functionality\nfor Unity3D, ROS, and web agents. Implements distributed state propagation\nand task orchestration with real data.\n\nKey Components:\n- REST API endpoints for cognitive operations\n- WebSocket server for real-time communication\n- Unity3D integration adapter\n- ROS integration adapter  \n- Web agent integration\n- Distributed state propagation\n- Task orchestration APIs",
        "complexity_score": 52.0,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.482121"
      },
      "phase4_demo": {
        "name": "phase4_demo",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/phase4_demo.py",
        "classes": [
          "Phase4Demo"
        ],
        "functions": [
          "main",
          "__init__",
          "initialize_components",
          "demonstrate_neural_symbolic_synthesis",
          "demonstrate_embodiment_integration",
          "demonstrate_distributed_orchestration",
          "_execute_perception_task",
          "_execute_spatial_task",
          "_execute_language_task",
          "demonstrate_real_time_state_propagation",
          "run_comprehensive_demo",
          "run_interactive_demo"
        ],
        "dependencies": [
          "neural_symbolic_kernels",
          "web_agent_adapter",
          "typing",
          "ros_adapter",
          "argparse",
          "phase4_api_server",
          "unity3d_adapter",
          "time",
          "json",
          "numpy",
          "logging",
          "threading"
        ],
        "docstring": "Phase 4 Demonstration\n\nInteractive demonstration of the Distributed Cognitive Mesh API & Embodiment Layer.\nShows real-time operation with Unity3D, ROS, and web agent integration.",
        "complexity_score": 20.0,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.482121"
      },
      "benchmarking": {
        "name": "benchmarking",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/benchmarking.py",
        "classes": [
          "BenchmarkType",
          "MetricType",
          "BenchmarkResult",
          "BenchmarkConfig",
          "DistributedCognitiveBenchmark"
        ],
        "functions": [
          "__post_init__",
          "success_rate",
          "__post_init__",
          "__init__",
          "setup_test_environment",
          "teardown_test_environment",
          "benchmark_attention_allocation",
          "_attention_allocation_task",
          "benchmark_resource_allocation",
          "_resource_allocation_task",
          "benchmark_mesh_communication",
          "_mesh_communication_task",
          "run_comprehensive_benchmark",
          "_analyze_scalability",
          "_calculate_mesh_efficiency",
          "_calculate_average_utilization",
          "generate_benchmark_report",
          "scheme_benchmark_spec"
        ],
        "dependencies": [
          "resource_kernel",
          "enum",
          "base64",
          "typing",
          "statistics",
          "matplotlib.pyplot",
          "time",
          "json",
          "mesh_topology",
          "numpy",
          "attention_allocation",
          "collections",
          "dataclasses",
          "threading",
          "concurrent.futures",
          "io"
        ],
        "docstring": "Benchmarking Suite for Distributed Cognitive Agents\n\nProvides comprehensive benchmarking capabilities for attention allocation,\nresource management, and mesh topology performance across distributed agents.",
        "complexity_score": 36.0,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.479121"
      },
      "standalone_phase3_test": {
        "name": "standalone_phase3_test",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/standalone_phase3_test.py",
        "classes": [],
        "functions": [
          "test_neural_symbolic_kernels",
          "test_neural_symbolic_synthesizer",
          "test_benchmarking_system",
          "test_performance_characteristics",
          "run_comprehensive_test",
          "count_tests",
          "test_operation"
        ],
        "dependencies": [
          "neural_symbolic_kernels",
          "os",
          "time",
          "sys",
          "json",
          "numpy",
          "pathlib",
          "tensor_benchmarking"
        ],
        "docstring": "Standalone Phase 3 Neural-Symbolic Kernel Test\n\nTests the neural-symbolic synthesis implementation without frappe dependencies.",
        "complexity_score": 11.0,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.485121"
      },
      "phase2_acceptance_test": {
        "name": "phase2_acceptance_test",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/phase2_acceptance_test.py",
        "classes": [
          "Phase2TestSuite"
        ],
        "functions": [
          "main",
          "__init__",
          "log_test",
          "test_resource_kernel_basic_functionality",
          "test_resource_kernel_mesh_integration",
          "test_attention_scheduler_functionality",
          "test_enhanced_ecan_attention",
          "test_integrated_cognitive_scenario",
          "test_performance_benchmarks",
          "test_scheme_specifications",
          "run_all_tests"
        ],
        "dependencies": [
          "resource_kernel",
          "typing",
          "attention_allocation",
          "time",
          "sys",
          "numpy",
          "cognitive_grammar",
          "dataclasses"
        ],
        "docstring": "Phase 2 Acceptance Tests: ECAN Attention Allocation & Resource Kernel Construction\n\nComprehensive testing suite for Phase 2 implementation including:\n- Resource kernel functionality\n- Attention scheduler operations  \n- Dynamic mesh integration\n- Enhanced ECAN attention allocation\n- Real-world scenario validation",
        "complexity_score": 17.0,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.481121"
      },
      "resource_kernel": {
        "name": "resource_kernel",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/resource_kernel.py",
        "classes": [
          "ResourceType",
          "ResourcePriority",
          "AllocationStrategy",
          "ResourceQuota",
          "ResourceRequest",
          "ResourceAllocation",
          "ResourcePool",
          "ResourceKernel",
          "AttentionScheduler",
          "DistributedResourceManager"
        ],
        "functions": [
          "available",
          "__post_init__",
          "is_expired",
          "is_expired",
          "__post_init__",
          "__init__",
          "_initialize_resource_pools",
          "_initialize_quotas",
          "request_resource",
          "_try_allocate_request",
          "_calculate_resource_cost",
          "release_resource",
          "process_pending_requests",
          "cleanup_expired_allocations",
          "get_resource_utilization",
          "get_performance_metrics",
          "register_mesh_node",
          "get_mesh_status",
          "optimize_allocations",
          "scheme_resource_spec",
          "__init__",
          "schedule_attention",
          "schedule_attention_cycle",
          "process_attention_queue",
          "complete_attention_cycle",
          "get_scheduler_stats",
          "get_attention_status",
          "__init__",
          "register_resource_kernel",
          "unregister_resource_kernel",
          "_update_global_view",
          "find_best_provider",
          "distributed_resource_request",
          "rebalance_resources",
          "get_global_resource_stats",
          "benchmark_resource_allocation",
          "scheme_distributed_spec",
          "scheme_resource_spec"
        ],
        "dependencies": [
          "enum",
          "typing",
          "time",
          "json",
          "numpy",
          "collections",
          "dataclasses",
          "threading",
          "concurrent.futures"
        ],
        "docstring": "Resource Kernel for Dynamic ECAN Attention Allocation & Distributed Cognitive Mesh\n\nImplements resource management, allocation scheduling, and distributed\ncognitive mesh integration for Phase 2 of the cognitive architecture.\nThis includes both local resource kernels and distributed resource management.",
        "complexity_score": 62.5,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.484121"
      },
      "phase5_tests": {
        "name": "phase5_tests",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/phase5_tests.py",
        "classes": [
          "TestEvolutionaryOptimizer",
          "TestFeedbackDrivenSelfAnalysis",
          "TestIntegration",
          "TestRealDataValidation",
          "Phase5TestSuite"
        ],
        "functions": [
          "main",
          "setUp",
          "test_genome_creation_and_validation",
          "test_fitness_evaluator",
          "test_genetic_operators",
          "test_selection_strategies",
          "test_evolution_process",
          "setUp",
          "test_performance_analyzer",
          "test_pattern_recognizer",
          "test_recursive_self_analyzer",
          "test_feedback_signal_processing",
          "test_continuous_analysis",
          "test_evolutionary_optimization_trigger",
          "setUp",
          "test_meta_cognitive_integration",
          "test_feedback_meta_cognitive_integration",
          "test_evolutionary_meta_cognitive_integration",
          "test_end_to_end_workflow",
          "test_evolutionary_algorithms_are_real",
          "test_fitness_evaluation_is_real",
          "test_feedback_analysis_uses_real_data",
          "run_all_tests"
        ],
        "dependencies": [
          "unittest.mock",
          "unittest",
          "typing",
          "evolutionary_optimizer",
          "time",
          "json",
          "numpy",
          "feedback_self_analysis",
          "tempfile",
          "threading",
          "meta_cognitive"
        ],
        "docstring": "Phase 5 Comprehensive Test Suite\n\nComprehensive tests for Phase 5: Recursive Meta-Cognition & Evolutionary Optimization.\nTests all components with real data and validates integration.",
        "complexity_score": 38.5,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.483121"
      },
      "feedback_self_analysis": {
        "name": "feedback_self_analysis",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/feedback_self_analysis.py",
        "classes": [
          "FeedbackType",
          "AnalysisDepth",
          "FeedbackSignal",
          "AnalysisReport",
          "PerformanceAnalyzer",
          "PatternRecognizer",
          "RecursiveSelfAnalyzer",
          "FeedbackDrivenSelfAnalysis"
        ],
        "functions": [
          "__post_init__",
          "__post_init__",
          "__init__",
          "update_metrics",
          "analyze_performance_trends",
          "_detect_degradation",
          "_detect_inefficiency",
          "_detect_optimization_opportunity",
          "_infer_source_layer",
          "__init__",
          "analyze_correlation_patterns",
          "_group_signals_by_correlation",
          "_create_correlation_signal",
          "__init__",
          "perform_recursive_analysis",
          "_perform_analysis_at_depth",
          "_surface_analysis",
          "_intermediate_analysis",
          "_deep_analysis",
          "_analyze_analysis_process",
          "_analyze_stability",
          "_create_shallow_report",
          "_calculate_health_score",
          "_generate_recommendations",
          "_predict_outcomes",
          "_calculate_confidence",
          "__init__",
          "start_continuous_analysis",
          "stop_continuous_analysis",
          "_continuous_analysis_loop",
          "_process_feedback_signals",
          "_trigger_evolutionary_optimization",
          "_extract_current_configuration",
          "_config_to_genome",
          "_apply_genome_configuration",
          "perform_deep_analysis",
          "get_feedback_summary"
        ],
        "dependencies": [
          "enum",
          "evolutionary_optimizer",
          "typing",
          "queue",
          "time",
          "json",
          "numpy",
          "collections",
          "dataclasses",
          "threading",
          "meta_cognitive"
        ],
        "docstring": "Feedback-Driven Self-Analysis System\n\nBuilds on the existing meta-cognitive system to implement recursive feedback loops\nand self-analysis capabilities for Phase 5.",
        "complexity_score": 58.5,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.480121"
      },
      "pattern_service": {
        "name": "pattern_service",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/microservices/pattern_service.py",
        "classes": [
          "PatternHTTPHandler",
          "PatternService"
        ],
        "functions": [
          "main",
          "do_POST",
          "do_GET",
          "do_DELETE",
          "_handle_define_pattern",
          "_handle_match_pattern",
          "_handle_multi_pattern_match",
          "_handle_generate_scheme_pattern",
          "_handle_list_patterns",
          "_handle_get_pattern",
          "_handle_delete_pattern",
          "_handle_health_check",
          "_handle_get_stats",
          "_send_json_response",
          "_send_error",
          "__init__",
          "start",
          "stop",
          "get_pattern_matcher",
          "is_running"
        ],
        "dependencies": [
          "typing",
          "http.server",
          "urllib.parse",
          "json",
          "sys",
          "os",
          "cognitive_grammar",
          "threading"
        ],
        "docstring": "Pattern Matching Microservice\n\nProvides REST API endpoints for template-based pattern recognition.\nImplements modular pattern matching for cognitive grammar operations.",
        "complexity_score": 28.0,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.480121"
      },
      "pln_service": {
        "name": "pln_service",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/microservices/pln_service.py",
        "classes": [
          "PLNHTTPHandler",
          "PLNService"
        ],
        "functions": [
          "main",
          "do_POST",
          "do_GET",
          "_handle_deduction",
          "_handle_induction",
          "_handle_abduction",
          "_handle_inference_chain",
          "_handle_health_check",
          "_handle_get_stats",
          "_send_json_response",
          "_send_error",
          "__init__",
          "start",
          "stop",
          "get_pln",
          "is_running"
        ],
        "dependencies": [
          "typing",
          "http.server",
          "urllib.parse",
          "json",
          "sys",
          "os",
          "cognitive_grammar",
          "threading"
        ],
        "docstring": "PLN (Probabilistic Logic Networks) Inference Microservice\n\nProvides REST API endpoints for probabilistic logic inference operations.\nImplements modular PLN inference for deduction, induction, and abduction.",
        "complexity_score": 24.0,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.480121"
      },
      "ko6ml_translator": {
        "name": "ko6ml_translator",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/microservices/ko6ml_translator.py",
        "classes": [
          "Ko6mlPrimitive",
          "Ko6mlExpression",
          "AtomSpacePattern",
          "Ko6mlTranslator"
        ],
        "functions": [
          "__init__",
          "_initialize_translation_rules",
          "ko6ml_to_atomspace",
          "atomspace_to_ko6ml",
          "translate_pattern",
          "atomspace_pattern_to_ko6ml",
          "verify_round_trip",
          "_extract_truth_value",
          "_atom_type_to_ko6ml",
          "_link_type_to_relation",
          "_process_parameters",
          "_extract_parameters",
          "get_translation_stats",
          "generate_scheme_translation"
        ],
        "dependencies": [
          "enum",
          "typing",
          "os",
          "json",
          "sys",
          "cognitive_grammar",
          "dataclasses"
        ],
        "docstring": "ko6ml \u2194 AtomSpace Bidirectional Translator\n\nImplements bidirectional translation mechanisms between ko6ml primitives \nand AtomSpace hypergraph patterns for Phase 1 cognitive integration.",
        "complexity_score": 25.5,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.480121"
      },
      "atomspace_service": {
        "name": "atomspace_service",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/microservices/atomspace_service.py",
        "classes": [
          "AtomSpaceHTTPHandler",
          "AtomSpaceService"
        ],
        "functions": [
          "main",
          "do_GET",
          "do_POST",
          "_handle_list_atoms",
          "_handle_create_atom",
          "_handle_get_atom",
          "_handle_list_links",
          "_handle_create_link",
          "_handle_get_link",
          "_handle_query_atoms",
          "_handle_get_stats",
          "_handle_health_check",
          "_atom_to_dict",
          "_link_to_dict",
          "_send_json_response",
          "_send_error",
          "__init__",
          "start",
          "stop",
          "get_atomspace",
          "is_running"
        ],
        "dependencies": [
          "dataclasses",
          "typing",
          "http.server",
          "urllib.parse",
          "json",
          "sys",
          "os",
          "cognitive_grammar",
          "uuid",
          "threading"
        ],
        "docstring": "AtomSpace Microservice\n\nProvides REST API endpoints for hypergraph AtomSpace operations.\nImplements modular architecture for cognitive primitive operations.",
        "complexity_score": 30.0,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.480121"
      },
      "cognitive_ros_client": {
        "name": "cognitive_ros_client",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/ros_client/cognitive_ros_client.py",
        "classes": [
          "CognitiveRosMessage",
          "CognitiveRosClient"
        ],
        "functions": [
          "main",
          "__post_init__",
          "__init__",
          "setup_ros_publishers_and_subscribers",
          "connect_to_cognitive_mesh",
          "disconnect",
          "_pack_message",
          "_unpack_message",
          "_receive_messages",
          "_send_messages",
          "_heartbeat_loop",
          "_process_cognitive_message",
          "_handle_cognitive_update",
          "_handle_action_goal",
          "_handle_service_call",
          "_handle_heartbeat",
          "_execute_action",
          "_execute_navigation",
          "_execute_manipulation",
          "_execute_observation",
          "_process_service_request",
          "odometry_callback",
          "laser_callback",
          "joint_states_callback",
          "cmd_vel_callback",
          "send_agent_state_update",
          "send_sensor_data",
          "send_action_result",
          "send_service_response",
          "send_heartbeat",
          "update_cognitive_state",
          "run"
        ],
        "dependencies": [
          "struct",
          "sensor_msgs.msg",
          "nav_msgs.msg",
          "socket",
          "typing",
          "queue",
          "argparse",
          "json",
          "time",
          "numpy",
          "std_msgs.msg",
          "geometry_msgs.msg",
          "dataclasses",
          "threading",
          "rospy"
        ],
        "docstring": "Cognitive ROS Client Package\n\nProvides ROS integration for the distributed cognitive mesh.\nThis package allows ROS nodes to connect to and interact with\nthe cognitive API server for embodied cognition.",
        "complexity_score": 43.5,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.485121"
      },
      "test_cognitive_architecture": {
        "name": "test_cognitive_architecture",
        "path": "/home/runner/work/mlpn/mlpn/erpnext/cognitive/tests/test_cognitive_architecture.py",
        "classes": [
          "TestTensorKernel",
          "TestCognitiveGrammar",
          "TestAttentionAllocation",
          "TestMetaCognitive",
          "TestIntegration"
        ],
        "functions": [
          "setUp",
          "test_tensor_creation",
          "test_canonical_shapes",
          "test_tensor_contraction",
          "test_parallel_operations",
          "test_meta_learning_update",
          "test_operation_stats",
          "test_scheme_tensor_shape",
          "setUp",
          "test_entity_creation",
          "test_relationship_creation",
          "test_atom_space_operations",
          "test_pln_inference",
          "test_pattern_matching",
          "test_knowledge_stats",
          "setUp",
          "test_attention_focus",
          "test_attention_spreading",
          "test_economic_allocation",
          "test_attention_visualization",
          "test_attention_cycle",
          "test_activation_spreading",
          "test_scheme_attention_spec",
          "setUp",
          "test_layer_registration",
          "test_meta_state_update",
          "test_introspection",
          "test_system_health_diagnosis",
          "test_meta_tensor_dynamics",
          "test_system_stats",
          "test_full_integration",
          "test_scheme_integration"
        ],
        "dependencies": [
          "unittest.mock",
          "tensor_kernel",
          "unittest",
          "os",
          "attention_allocation",
          "sys",
          "numpy",
          "cognitive_grammar",
          "meta_cognitive"
        ],
        "docstring": "Comprehensive tests for the cognitive architecture system",
        "complexity_score": 46.5,
        "test_coverage": 0.0,
        "last_modified": "2025-07-14T04:06:57.486121"
      }
    },
    "architectural_diagrams": {
      "cognitive_grammar": {
        "module_name": "cognitive_grammar",
        "diagram_type": "flowchart",
        "mermaid_content": "# cognitive_grammar - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[cognitive_grammar]\n\n    subgraph \"Classes\"\n        C0[AtomType]\n        C1[LinkType]\n        C2[TruthValue]\n        C3[Atom]\n        C4[Link]\n        C5[AtomSpace]\n        C6[PLN]\n        C7[PatternMatcher]\n        C8[CognitiveGrammar]\n    end\n\n    M --> C0\n    M --> C1\n    M --> C2\n    M --> C3\n    M --> C4\n    M --> C5\n    M --> C6\n    M --> C7\n    M --> C8\n    subgraph \"Functions\"\n        F4[add_atom]\n        F5[add_link]\n        F6[get_atom]\n        F7[get_link]\n        F8[find_atoms_by_type]\n        F9[find_links_by_type]\n        F10[get_connected_atoms]\n        F12[get_hypergraph_density]\n        F14[deduction]\n        F15[induction]\n        F16[abduction]\n        F18[define_pattern]\n        F19[match_pattern]\n        F21[scheme_pattern_match]\n        F24[create_entity]\n        F25[create_relationship]\n        F26[infer_knowledge]\n        F27[get_knowledge_stats]\n        F28[is_prime]\n    end\n\n    M --> F4\n    M --> F5\n    M --> F6\n    M --> F7\n    M --> F8\n    M --> F9\n    M --> F10\n    M --> F12\n    M --> F14\n    M --> F15\n    M --> F16\n    M --> F18\n    M --> F19\n    M --> F21\n    M --> F24\n    M --> F25\n    M --> F26\n    M --> F27\n    M --> F28\n    subgraph \"Dependencies\"\n        D0[uuid]\n        D1[enum]\n        D2[typing]\n        D3[json]\n        D4[numpy]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "uuid",
          "enum",
          "typing",
          "json",
          "numpy",
          "collections",
          "dataclasses"
        ],
        "components": [
          "AtomType",
          "LinkType",
          "TruthValue",
          "Atom",
          "Link",
          "AtomSpace",
          "PLN",
          "PatternMatcher",
          "CognitiveGrammar",
          "__post_init__",
          "__post_init__",
          "__post_init__",
          "__init__",
          "add_atom",
          "add_link",
          "get_atom",
          "get_link",
          "find_atoms_by_type",
          "find_links_by_type",
          "get_connected_atoms",
          "_get_next_prime",
          "get_hypergraph_density",
          "__init__",
          "deduction",
          "induction",
          "abduction",
          "__init__",
          "define_pattern",
          "match_pattern",
          "_matches_template",
          "scheme_pattern_match",
          "__init__",
          "_initialize_default_patterns",
          "create_entity",
          "create_relationship",
          "infer_knowledge",
          "get_knowledge_stats",
          "is_prime"
        ],
        "timestamp": "2025-07-14T04:11:57.807923"
      },
      "cognitive_grammar_classes": {
        "module_name": "cognitive_grammar",
        "diagram_type": "class_diagram",
        "mermaid_content": "# cognitive_grammar - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class AtomType {\n        +methods()\n        +attributes\n    }\n\n    class LinkType {\n        +methods()\n        +attributes\n    }\n\n    class TruthValue {\n        +methods()\n        +attributes\n    }\n\n    class Atom {\n        +methods()\n        +attributes\n    }\n\n    class Link {\n        +methods()\n        +attributes\n    }\n\n    class AtomSpace {\n        +methods()\n        +attributes\n    }\n\n    class PLN {\n        +methods()\n        +attributes\n    }\n\n    class PatternMatcher {\n        +methods()\n        +attributes\n    }\n\n    class CognitiveGrammar {\n        +methods()\n        +attributes\n    }\n\n    AtomType <|-- LinkType\n    AtomType <|-- TruthValue\n    AtomType <|-- Atom\n    AtomType <|-- Link\n    AtomType <|-- AtomSpace\n    AtomType <|-- PLN\n    AtomType <|-- PatternMatcher\n    AtomType <|-- CognitiveGrammar\n```\n",
        "dependencies": [
          "uuid",
          "enum",
          "typing",
          "json",
          "numpy",
          "collections",
          "dataclasses"
        ],
        "components": [
          "AtomType",
          "LinkType",
          "TruthValue",
          "Atom",
          "Link",
          "AtomSpace",
          "PLN",
          "PatternMatcher",
          "CognitiveGrammar"
        ],
        "timestamp": "2025-07-14T04:11:57.807979"
      },
      "phase3_verification": {
        "module_name": "phase3_verification",
        "diagram_type": "flowchart",
        "mermaid_content": "# phase3_verification - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[phase3_verification]\n\n    subgraph \"Classes\"\n        C0[Phase3VerificationSuite]\n    end\n\n    M --> C0\n    subgraph \"Functions\"\n        F0[run_phase3_verification]\n        F2[run_all_tests]\n        F3[test_kernel_customization]\n        F4[test_tensor_signature_benchmarking]\n        F5[test_neural_symbolic_synthesis]\n        F6[test_integration_verification]\n        F7[test_performance_validation]\n        F8[test_real_implementation_verification]\n        F9[test_distributed_mesh_integration]\n        F11[save_verification_report]\n        F12[count_tests]\n        F13[test_operation]\n        F14[memory_intensive_operation]\n    end\n\n    M --> F0\n    M --> F2\n    M --> F3\n    M --> F4\n    M --> F5\n    M --> F6\n    M --> F7\n    M --> F8\n    M --> F9\n    M --> F11\n    M --> F12\n    M --> F13\n    M --> F14\n    subgraph \"Dependencies\"\n        D0[neural_symbolic_kernels]\n        D1[tensor_kernel]\n        D2[typing]\n        D3[os]\n        D4[time]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "neural_symbolic_kernels",
          "tensor_kernel",
          "typing",
          "os",
          "time",
          "pathlib",
          "json",
          "numpy",
          "tensor_benchmarking",
          "sys"
        ],
        "components": [
          "Phase3VerificationSuite",
          "run_phase3_verification",
          "__init__",
          "run_all_tests",
          "test_kernel_customization",
          "test_tensor_signature_benchmarking",
          "test_neural_symbolic_synthesis",
          "test_integration_verification",
          "test_performance_validation",
          "test_real_implementation_verification",
          "test_distributed_mesh_integration",
          "_generate_test_summary",
          "save_verification_report",
          "count_tests",
          "test_operation",
          "memory_intensive_operation"
        ],
        "timestamp": "2025-07-14T04:11:57.808045"
      },
      "phase3_verification_classes": {
        "module_name": "phase3_verification",
        "diagram_type": "class_diagram",
        "mermaid_content": "# phase3_verification - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class Phase3VerificationSuite {\n        +methods()\n        +attributes\n    }\n\n```\n",
        "dependencies": [
          "neural_symbolic_kernels",
          "tensor_kernel",
          "typing",
          "os",
          "time",
          "pathlib",
          "json",
          "numpy",
          "tensor_benchmarking",
          "sys"
        ],
        "components": [
          "Phase3VerificationSuite"
        ],
        "timestamp": "2025-07-14T04:11:57.808088"
      },
      "phase1_acceptance_test": {
        "module_name": "phase1_acceptance_test",
        "diagram_type": "flowchart",
        "mermaid_content": "# phase1_acceptance_test - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[phase1_acceptance_test]\n\n    subgraph \"Functions\"\n        F0[test_hypergraph_visualization]\n        F1[validate_all_acceptance_criteria]\n        F2[test_real_implementation]\n        F3[test_comprehensive_tests]\n        F4[test_documentation]\n        F5[test_recursive_modularity]\n        F6[test_integration_tests]\n        F7[main]\n    end\n\n    M --> F0\n    M --> F1\n    M --> F2\n    M --> F3\n    M --> F4\n    M --> F5\n    M --> F6\n    M --> F7\n    subgraph \"Dependencies\"\n        D0[tensor_kernel]\n        D1[hypergraph_visualizer]\n        D2[os]\n        D3[attention_allocation]\n        D4[sys]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "tensor_kernel",
          "hypergraph_visualizer",
          "os",
          "attention_allocation",
          "sys",
          "numpy",
          "cognitive_grammar",
          "tensor_fragments",
          "subprocess",
          "meta_cognitive"
        ],
        "components": [
          "test_hypergraph_visualization",
          "validate_all_acceptance_criteria",
          "test_real_implementation",
          "test_comprehensive_tests",
          "test_documentation",
          "test_recursive_modularity",
          "test_integration_tests",
          "main"
        ],
        "timestamp": "2025-07-14T04:11:57.808148"
      },
      "phase6_demo": {
        "module_name": "phase6_demo",
        "diagram_type": "flowchart",
        "mermaid_content": "# phase6_demo - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[phase6_demo]\n\n    subgraph \"Classes\"\n        C0[Phase6Demo]\n    end\n\n    M --> C0\n    subgraph \"Functions\"\n        F0[main]\n        F2[setup_cognitive_architecture]\n        F3[demonstrate_cognitive_unification_validation]\n        F4[demonstrate_real_data_validation]\n        F5[demonstrate_boundary_testing]\n        F6[demonstrate_integration_testing]\n        F7[demonstrate_end_to_end_workflow]\n        F8[demonstrate_acceptance_criteria_validation]\n        F9[generate_demo_summary]\n        F10[run_complete_demonstration]\n    end\n\n    M --> F0\n    M --> F2\n    M --> F3\n    M --> F4\n    M --> F5\n    M --> F6\n    M --> F7\n    M --> F8\n    M --> F9\n    M --> F10\n    subgraph \"Dependencies\"\n        D0[tensor_kernel]\n        D1[evolutionary_optimizer]\n        D2[datetime]\n        D3[phase6_acceptance_test]\n        D4[phase6_integration_test]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "tensor_kernel",
          "evolutionary_optimizer",
          "datetime",
          "phase6_acceptance_test",
          "phase6_integration_test",
          "os",
          "time",
          "sys",
          "json",
          "phase6_comprehensive_test",
          "logging",
          "phase6_deep_testing_protocols",
          "cognitive_grammar",
          "attention_allocation",
          "feedback_self_analysis",
          "numpy",
          "meta_cognitive",
          "traceback"
        ],
        "components": [
          "Phase6Demo",
          "main",
          "__init__",
          "setup_cognitive_architecture",
          "demonstrate_cognitive_unification_validation",
          "demonstrate_real_data_validation",
          "demonstrate_boundary_testing",
          "demonstrate_integration_testing",
          "demonstrate_end_to_end_workflow",
          "demonstrate_acceptance_criteria_validation",
          "generate_demo_summary",
          "run_complete_demonstration"
        ],
        "timestamp": "2025-07-14T04:11:57.808204"
      },
      "phase6_demo_classes": {
        "module_name": "phase6_demo",
        "diagram_type": "class_diagram",
        "mermaid_content": "# phase6_demo - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class Phase6Demo {\n        +methods()\n        +attributes\n    }\n\n```\n",
        "dependencies": [
          "tensor_kernel",
          "evolutionary_optimizer",
          "datetime",
          "phase6_acceptance_test",
          "phase6_integration_test",
          "os",
          "time",
          "sys",
          "json",
          "phase6_comprehensive_test",
          "logging",
          "phase6_deep_testing_protocols",
          "cognitive_grammar",
          "attention_allocation",
          "feedback_self_analysis",
          "numpy",
          "meta_cognitive",
          "traceback"
        ],
        "components": [
          "Phase6Demo"
        ],
        "timestamp": "2025-07-14T04:11:57.808247"
      },
      "phase6_acceptance_test": {
        "module_name": "phase6_acceptance_test",
        "diagram_type": "flowchart",
        "mermaid_content": "# phase6_acceptance_test - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[phase6_acceptance_test]\n\n    subgraph \"Classes\"\n        C0[AcceptanceCriteriaResult]\n        C1[Phase6AcceptanceCriteriaValidator]\n        C2[Phase6AcceptanceTestSuite]\n    end\n\n    M --> C0\n    M --> C1\n    M --> C2\n    subgraph \"Functions\"\n        F2[validate_all_acceptance_criteria]\n        F10[setUpClass]\n        F11[test_phase6_acceptance_criteria]\n        F12[tearDownClass]\n    end\n\n    M --> F2\n    M --> F10\n    M --> F11\n    M --> F12\n    subgraph \"Dependencies\"\n        D0[unittest]\n        D1[typing]\n        D2[evolutionary_optimizer]\n        D3[os]\n        D4[attention_allocation]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "unittest",
          "typing",
          "evolutionary_optimizer",
          "os",
          "attention_allocation",
          "sys",
          "phase6_comprehensive_test",
          "cognitive_grammar",
          "feedback_self_analysis",
          "meta_cognitive",
          "logging",
          "time",
          "phase6_deep_testing_protocols",
          "dataclasses",
          "tensor_kernel",
          "datetime",
          "phase6_integration_test",
          "json",
          "numpy"
        ],
        "components": [
          "AcceptanceCriteriaResult",
          "Phase6AcceptanceCriteriaValidator",
          "Phase6AcceptanceTestSuite",
          "__init__",
          "_setup_cognitive_architecture",
          "validate_all_acceptance_criteria",
          "_validate_real_data_implementation",
          "_validate_comprehensive_testing",
          "_validate_documentation_and_diagrams",
          "_validate_recursive_modularity",
          "_validate_integration_testing",
          "_calculate_overall_acceptance_score",
          "_generate_acceptance_report",
          "setUpClass",
          "test_phase6_acceptance_criteria",
          "tearDownClass"
        ],
        "timestamp": "2025-07-14T04:11:57.808307"
      },
      "phase6_acceptance_test_classes": {
        "module_name": "phase6_acceptance_test",
        "diagram_type": "class_diagram",
        "mermaid_content": "# phase6_acceptance_test - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class AcceptanceCriteriaResult {\n        +methods()\n        +attributes\n    }\n\n    class Phase6AcceptanceCriteriaValidator {\n        +methods()\n        +attributes\n    }\n\n    class Phase6AcceptanceTestSuite {\n        +methods()\n        +attributes\n    }\n\n    AcceptanceCriteriaResult <|-- Phase6AcceptanceCriteriaValidator\n    AcceptanceCriteriaResult <|-- Phase6AcceptanceTestSuite\n```\n",
        "dependencies": [
          "unittest",
          "typing",
          "evolutionary_optimizer",
          "os",
          "attention_allocation",
          "sys",
          "phase6_comprehensive_test",
          "cognitive_grammar",
          "feedback_self_analysis",
          "meta_cognitive",
          "logging",
          "time",
          "phase6_deep_testing_protocols",
          "dataclasses",
          "tensor_kernel",
          "datetime",
          "phase6_integration_test",
          "json",
          "numpy"
        ],
        "components": [
          "AcceptanceCriteriaResult",
          "Phase6AcceptanceCriteriaValidator",
          "Phase6AcceptanceTestSuite"
        ],
        "timestamp": "2025-07-14T04:11:57.808348"
      },
      "web_agent_adapter": {
        "module_name": "web_agent_adapter",
        "diagram_type": "flowchart",
        "mermaid_content": "# web_agent_adapter - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[web_agent_adapter]\n\n    subgraph \"Classes\"\n        C0[WebAgent]\n        C1[WebTask]\n        C2[WebVisualization]\n        C3[WebAgentIntegrationAdapter]\n    end\n\n    M --> C0\n    M --> C1\n    M --> C2\n    M --> C3\n    subgraph \"Functions\"\n        F0[main]\n        F12[start_server]\n        F13[stop_server]\n        F16[get_status]\n        F17[dashboard]\n        F18[list_web_agents]\n        F19[get_web_agent]\n        F20[create_web_task]\n        F21[get_web_task]\n        F22[web_cognitive_synthesize]\n        F23[list_visualizations]\n        F24[create_visualization]\n        F25[get_mesh_state]\n        F26[cognitive_agent_sdk]\n        F27[handle_connect]\n        F28[handle_disconnect]\n        F29[handle_register_agent]\n        F30[handle_cognitive_state_update]\n        F31[handle_task_result]\n        F32[handle_agent_event]\n        F33[handle_dashboard_subscribe]\n    end\n\n    M --> F0\n    M --> F12\n    M --> F13\n    M --> F16\n    M --> F17\n    M --> F18\n    M --> F19\n    M --> F20\n    M --> F21\n    M --> F22\n    M --> F23\n    M --> F24\n    M --> F25\n    M --> F26\n    M --> F27\n    M --> F28\n    M --> F29\n    M --> F30\n    M --> F31\n    M --> F32\n    M --> F33\n    subgraph \"Dependencies\"\n        D0[flask_socketio]\n        D1[uuid]\n        D2[typing]\n        D3[argparse]\n        D4[flask]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "flask_socketio",
          "uuid",
          "typing",
          "argparse",
          "flask",
          "json",
          "time",
          "numpy",
          "logging",
          "dataclasses",
          "threading",
          "concurrent.futures"
        ],
        "components": [
          "WebAgent",
          "WebTask",
          "WebVisualization",
          "WebAgentIntegrationAdapter",
          "main",
          "__post_init__",
          "__post_init__",
          "__post_init__",
          "__init__",
          "_setup_routes",
          "_setup_websocket_handlers",
          "_assign_web_task",
          "_handle_attention_focus",
          "_handle_cognitive_synthesis_request",
          "_handle_visualization_request",
          "_generate_visualization_data",
          "start_server",
          "stop_server",
          "_monitor_agents",
          "_update_dashboard",
          "get_status",
          "dashboard",
          "list_web_agents",
          "get_web_agent",
          "create_web_task",
          "get_web_task",
          "web_cognitive_synthesize",
          "list_visualizations",
          "create_visualization",
          "get_mesh_state",
          "cognitive_agent_sdk",
          "handle_connect",
          "handle_disconnect",
          "handle_register_agent",
          "handle_cognitive_state_update",
          "handle_task_result",
          "handle_agent_event",
          "handle_dashboard_subscribe"
        ],
        "timestamp": "2025-07-14T04:11:57.808421"
      },
      "web_agent_adapter_classes": {
        "module_name": "web_agent_adapter",
        "diagram_type": "class_diagram",
        "mermaid_content": "# web_agent_adapter - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class WebAgent {\n        +methods()\n        +attributes\n    }\n\n    class WebTask {\n        +methods()\n        +attributes\n    }\n\n    class WebVisualization {\n        +methods()\n        +attributes\n    }\n\n    class WebAgentIntegrationAdapter {\n        +methods()\n        +attributes\n    }\n\n    WebAgent <|-- WebTask\n    WebAgent <|-- WebVisualization\n    WebAgent <|-- WebAgentIntegrationAdapter\n```\n",
        "dependencies": [
          "flask_socketio",
          "uuid",
          "typing",
          "argparse",
          "flask",
          "json",
          "time",
          "numpy",
          "logging",
          "dataclasses",
          "threading",
          "concurrent.futures"
        ],
        "components": [
          "WebAgent",
          "WebTask",
          "WebVisualization",
          "WebAgentIntegrationAdapter"
        ],
        "timestamp": "2025-07-14T04:11:57.808464"
      },
      "attention_allocation": {
        "module_name": "attention_allocation",
        "diagram_type": "flowchart",
        "mermaid_content": "# attention_allocation - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[attention_allocation]\n\n    subgraph \"Classes\"\n        C0[AttentionType]\n        C1[AttentionValue]\n        C2[EconomicParams]\n        C3[AttentionBank]\n        C4[ActivationSpreading]\n        C5[AttentionVisualizer]\n        C6[ECANAttention]\n        C7[ResourceType]\n        C8[ResourcePriority]\n    end\n\n    M --> C0\n    M --> C1\n    M --> C2\n    M --> C3\n    M --> C4\n    M --> C5\n    M --> C6\n    M --> C7\n    M --> C8\n    subgraph \"Functions\"\n        F0[total_attention]\n        F2[allocate_attention]\n        F3[calculate_utility]\n        F4[calculate_novelty]\n        F5[allocate_wages]\n        F6[allocate_rents]\n        F7[get_attention_tensor]\n        F8[decay_attention]\n        F10[initialize_activation]\n        F11[spread_activation]\n        F12[get_top_activated]\n        F14[record_attention_state]\n        F15[get_attention_dynamics]\n        F16[generate_attention_summary]\n        F18[focus_attention]\n        F19[update_attention_economy]\n        F20[get_attention_focus]\n        F21[visualize_attention_tensor]\n        F22[get_economic_stats]\n        F23[run_attention_cycle]\n        F24[scheme_attention_spec]\n        F25[register_mesh_node]\n        F27[sync_mesh_attention]\n        F28[get_mesh_statistics]\n        F29[run_enhanced_attention_cycle]\n    end\n\n    M --> F0\n    M --> F2\n    M --> F3\n    M --> F4\n    M --> F5\n    M --> F6\n    M --> F7\n    M --> F8\n    M --> F10\n    M --> F11\n    M --> F12\n    M --> F14\n    M --> F15\n    M --> F16\n    M --> F18\n    M --> F19\n    M --> F20\n    M --> F21\n    M --> F22\n    M --> F23\n    M --> F24\n    M --> F25\n    M --> F27\n    M --> F28\n    M --> F29\n    subgraph \"Dependencies\"\n        D0[resource_kernel]\n        D1[enum]\n        D2[typing]\n        D3[time]\n        D4[json]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "resource_kernel",
          "enum",
          "typing",
          "time",
          "json",
          "numpy",
          "collections",
          "dataclasses"
        ],
        "components": [
          "AttentionType",
          "AttentionValue",
          "EconomicParams",
          "AttentionBank",
          "ActivationSpreading",
          "AttentionVisualizer",
          "ECANAttention",
          "ResourceType",
          "ResourcePriority",
          "total_attention",
          "__init__",
          "allocate_attention",
          "calculate_utility",
          "calculate_novelty",
          "allocate_wages",
          "allocate_rents",
          "get_attention_tensor",
          "decay_attention",
          "__init__",
          "initialize_activation",
          "spread_activation",
          "get_top_activated",
          "__init__",
          "record_attention_state",
          "get_attention_dynamics",
          "generate_attention_summary",
          "__init__",
          "focus_attention",
          "update_attention_economy",
          "get_attention_focus",
          "visualize_attention_tensor",
          "get_economic_stats",
          "run_attention_cycle",
          "scheme_attention_spec",
          "register_mesh_node",
          "_spread_attention_to_mesh",
          "sync_mesh_attention",
          "get_mesh_statistics",
          "run_enhanced_attention_cycle"
        ],
        "timestamp": "2025-07-14T04:11:57.808546"
      },
      "attention_allocation_classes": {
        "module_name": "attention_allocation",
        "diagram_type": "class_diagram",
        "mermaid_content": "# attention_allocation - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class AttentionType {\n        +methods()\n        +attributes\n    }\n\n    class AttentionValue {\n        +methods()\n        +attributes\n    }\n\n    class EconomicParams {\n        +methods()\n        +attributes\n    }\n\n    class AttentionBank {\n        +methods()\n        +attributes\n    }\n\n    class ActivationSpreading {\n        +methods()\n        +attributes\n    }\n\n    class AttentionVisualizer {\n        +methods()\n        +attributes\n    }\n\n    class ECANAttention {\n        +methods()\n        +attributes\n    }\n\n    class ResourceType {\n        +methods()\n        +attributes\n    }\n\n    class ResourcePriority {\n        +methods()\n        +attributes\n    }\n\n    AttentionType <|-- AttentionValue\n    AttentionType <|-- EconomicParams\n    AttentionType <|-- AttentionBank\n    AttentionType <|-- ActivationSpreading\n    AttentionType <|-- AttentionVisualizer\n    AttentionType <|-- ECANAttention\n    AttentionType <|-- ResourceType\n    AttentionType <|-- ResourcePriority\n```\n",
        "dependencies": [
          "resource_kernel",
          "enum",
          "typing",
          "time",
          "json",
          "numpy",
          "collections",
          "dataclasses"
        ],
        "components": [
          "AttentionType",
          "AttentionValue",
          "EconomicParams",
          "AttentionBank",
          "ActivationSpreading",
          "AttentionVisualizer",
          "ECANAttention",
          "ResourceType",
          "ResourcePriority"
        ],
        "timestamp": "2025-07-14T04:11:57.808594"
      },
      "phase4_simplified_integration_test": {
        "module_name": "phase4_simplified_integration_test",
        "diagram_type": "flowchart",
        "mermaid_content": "# phase4_simplified_integration_test - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[phase4_simplified_integration_test]\n\n    subgraph \"Classes\"\n        C0[Phase4SimplifiedIntegrationTest]\n    end\n\n    M --> C0\n    subgraph \"Functions\"\n        F0[run_phase4_simplified_integration_test]\n        F1[setUpClass]\n        F2[test_embodiment_recursion_level_1]\n        F3[test_embodiment_recursion_level_2]\n        F4[test_embodiment_recursion_level_3]\n        F5[test_distributed_task_orchestration]\n        F6[test_real_time_state_propagation]\n        F7[test_end_to_end_embodiment_scenario]\n    end\n\n    M --> F0\n    M --> F1\n    M --> F2\n    M --> F3\n    M --> F4\n    M --> F5\n    M --> F6\n    M --> F7\n    subgraph \"Dependencies\"\n        D0[web_agent_adapter]\n        D1[unittest]\n        D2[typing]\n        D3[ros_adapter]\n        D4[phase4_api_server]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "web_agent_adapter",
          "unittest",
          "typing",
          "ros_adapter",
          "phase4_api_server",
          "unity3d_adapter",
          "time",
          "json",
          "numpy",
          "logging"
        ],
        "components": [
          "Phase4SimplifiedIntegrationTest",
          "run_phase4_simplified_integration_test",
          "setUpClass",
          "test_embodiment_recursion_level_1",
          "test_embodiment_recursion_level_2",
          "test_embodiment_recursion_level_3",
          "test_distributed_task_orchestration",
          "test_real_time_state_propagation",
          "test_end_to_end_embodiment_scenario"
        ],
        "timestamp": "2025-07-14T04:11:57.808673"
      },
      "phase4_simplified_integration_test_classes": {
        "module_name": "phase4_simplified_integration_test",
        "diagram_type": "class_diagram",
        "mermaid_content": "# phase4_simplified_integration_test - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class Phase4SimplifiedIntegrationTest {\n        +methods()\n        +attributes\n    }\n\n```\n",
        "dependencies": [
          "web_agent_adapter",
          "unittest",
          "typing",
          "ros_adapter",
          "phase4_api_server",
          "unity3d_adapter",
          "time",
          "json",
          "numpy",
          "logging"
        ],
        "components": [
          "Phase4SimplifiedIntegrationTest"
        ],
        "timestamp": "2025-07-14T04:11:57.808715"
      },
      "neural_symbolic_kernels": {
        "module_name": "neural_symbolic_kernels",
        "diagram_type": "flowchart",
        "mermaid_content": "# neural_symbolic_kernels - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[neural_symbolic_kernels]\n\n    subgraph \"Classes\"\n        C0[SymbolicPrimitive]\n        C1[TensorSignature]\n        C2[NeuralSymbolicKernel]\n        C3[GGMLConceptualEmbeddingKernel]\n        C4[GGMLLogicalInferenceKernel]\n        C5[GGMLAttentionAllocationKernel]\n        C6[GGMLHypergraphConvolutionKernel]\n        C7[CustomGGMLKernelRegistry]\n        C8[NeuralSymbolicSynthesizer]\n    end\n\n    M --> C0\n    M --> C1\n    M --> C2\n    M --> C3\n    M --> C4\n    M --> C5\n    M --> C6\n    M --> C7\n    M --> C8\n    subgraph \"Functions\"\n        F0[create_default_kernel_registry]\n        F1[forward]\n        F2[backward]\n        F3[get_signature]\n        F6[register_atomspace_node]\n        F7[add_neural_inference_hook]\n        F8[forward]\n        F11[backward]\n        F13[get_signature]\n        F15[forward]\n        F20[backward]\n        F21[get_signature]\n        F23[forward]\n        F25[backward]\n        F26[get_signature]\n        F28[forward]\n        F30[backward]\n        F31[get_signature]\n        F33[register_kernel]\n        F34[execute_kernel]\n        F35[get_kernel_signature]\n        F36[list_kernels]\n        F37[get_registry_stats]\n        F39[synthesize]\n        F41[get_synthesis_stats]\n        F42[benchmark_kernels]\n    end\n\n    M --> F0\n    M --> F1\n    M --> F2\n    M --> F3\n    M --> F6\n    M --> F7\n    M --> F8\n    M --> F11\n    M --> F13\n    M --> F15\n    M --> F20\n    M --> F21\n    M --> F23\n    M --> F25\n    M --> F26\n    M --> F28\n    M --> F30\n    M --> F31\n    M --> F33\n    M --> F34\n    M --> F35\n    M --> F36\n    M --> F37\n    M --> F39\n    M --> F41\n    M --> F42\n    subgraph \"Dependencies\"\n        D0[enum]\n        D1[typing]\n        D2[abc]\n        D3[json]\n        D4[time]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "enum",
          "typing",
          "abc",
          "json",
          "time",
          "numpy",
          "dataclasses"
        ],
        "components": [
          "SymbolicPrimitive",
          "TensorSignature",
          "NeuralSymbolicKernel",
          "GGMLConceptualEmbeddingKernel",
          "GGMLLogicalInferenceKernel",
          "GGMLAttentionAllocationKernel",
          "GGMLHypergraphConvolutionKernel",
          "CustomGGMLKernelRegistry",
          "NeuralSymbolicSynthesizer",
          "create_default_kernel_registry",
          "forward",
          "backward",
          "get_signature",
          "__init__",
          "_init_ggml_matrix",
          "register_atomspace_node",
          "add_neural_inference_hook",
          "forward",
          "_ggml_tensor_optimize",
          "_apply_atomspace_inference",
          "backward",
          "_compute_attention",
          "get_signature",
          "__init__",
          "forward",
          "_neural_and",
          "_neural_or",
          "_neural_not",
          "_neural_implication",
          "backward",
          "get_signature",
          "__init__",
          "forward",
          "_softmax",
          "backward",
          "get_signature",
          "__init__",
          "forward",
          "_compute_hypergraph_messages",
          "backward",
          "get_signature",
          "__init__",
          "register_kernel",
          "execute_kernel",
          "get_kernel_signature",
          "list_kernels",
          "get_registry_stats",
          "__init__",
          "synthesize",
          "_symbolize_to_tensor",
          "get_synthesis_stats",
          "benchmark_kernels"
        ],
        "timestamp": "2025-07-14T04:11:57.808790"
      },
      "neural_symbolic_kernels_classes": {
        "module_name": "neural_symbolic_kernels",
        "diagram_type": "class_diagram",
        "mermaid_content": "# neural_symbolic_kernels - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class SymbolicPrimitive {\n        +methods()\n        +attributes\n    }\n\n    class TensorSignature {\n        +methods()\n        +attributes\n    }\n\n    class NeuralSymbolicKernel {\n        +methods()\n        +attributes\n    }\n\n    class GGMLConceptualEmbeddingKernel {\n        +methods()\n        +attributes\n    }\n\n    class GGMLLogicalInferenceKernel {\n        +methods()\n        +attributes\n    }\n\n    class GGMLAttentionAllocationKernel {\n        +methods()\n        +attributes\n    }\n\n    class GGMLHypergraphConvolutionKernel {\n        +methods()\n        +attributes\n    }\n\n    class CustomGGMLKernelRegistry {\n        +methods()\n        +attributes\n    }\n\n    class NeuralSymbolicSynthesizer {\n        +methods()\n        +attributes\n    }\n\n    SymbolicPrimitive <|-- TensorSignature\n    SymbolicPrimitive <|-- NeuralSymbolicKernel\n    SymbolicPrimitive <|-- GGMLConceptualEmbeddingKernel\n    SymbolicPrimitive <|-- GGMLLogicalInferenceKernel\n    SymbolicPrimitive <|-- GGMLAttentionAllocationKernel\n    SymbolicPrimitive <|-- GGMLHypergraphConvolutionKernel\n    SymbolicPrimitive <|-- CustomGGMLKernelRegistry\n    SymbolicPrimitive <|-- NeuralSymbolicSynthesizer\n```\n",
        "dependencies": [
          "enum",
          "typing",
          "abc",
          "json",
          "time",
          "numpy",
          "dataclasses"
        ],
        "components": [
          "SymbolicPrimitive",
          "TensorSignature",
          "NeuralSymbolicKernel",
          "GGMLConceptualEmbeddingKernel",
          "GGMLLogicalInferenceKernel",
          "GGMLAttentionAllocationKernel",
          "GGMLHypergraphConvolutionKernel",
          "CustomGGMLKernelRegistry",
          "NeuralSymbolicSynthesizer"
        ],
        "timestamp": "2025-07-14T04:11:57.808834"
      },
      "phase6_comprehensive_test": {
        "module_name": "phase6_comprehensive_test",
        "diagram_type": "flowchart",
        "mermaid_content": "# phase6_comprehensive_test - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[phase6_comprehensive_test]\n\n    subgraph \"Classes\"\n        C0[Phase6TestResult]\n        C1[CognitiveUnificationValidator]\n        C2[RealDataValidator]\n        C3[Phase6ComprehensiveTestSuite]\n    end\n\n    M --> C0\n    M --> C1\n    M --> C2\n    M --> C3\n    subgraph \"Functions\"\n        F1[validate_cognitive_unity]\n        F12[validate_no_mocks]\n        F14[setUpClass]\n        F15[setUp]\n        F16[tearDown]\n        F17[test_complete_cognitive_architecture_integration]\n        F20[test_recursive_modularity_validation]\n        F24[test_edge_case_resilience]\n        F29[test_performance_benchmarks]\n        F30[tearDownClass]\n    end\n\n    M --> F1\n    M --> F12\n    M --> F14\n    M --> F15\n    M --> F16\n    M --> F17\n    M --> F20\n    M --> F24\n    M --> F29\n    M --> F30\n    subgraph \"Dependencies\"\n        D0[tensor_kernel]\n        D1[unittest]\n        D2[typing]\n        D3[evolutionary_optimizer]\n        D4[datetime]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "tensor_kernel",
          "unittest",
          "typing",
          "evolutionary_optimizer",
          "datetime",
          "os",
          "time",
          "json",
          "sys",
          "numpy",
          "logging",
          "cognitive_grammar",
          "attention_allocation",
          "feedback_self_analysis",
          "dataclasses",
          "meta_cognitive"
        ],
        "components": [
          "Phase6TestResult",
          "CognitiveUnificationValidator",
          "RealDataValidator",
          "Phase6ComprehensiveTestSuite",
          "__init__",
          "validate_cognitive_unity",
          "_validate_phase_coherence",
          "_validate_data_flow",
          "_validate_recursive_modularity",
          "_validate_cross_phase_integration",
          "_test_component_integration",
          "_test_tensor_grammar_integration",
          "_test_grammar_attention_integration",
          "_test_attention_meta_integration",
          "_validate_emergent_synthesis",
          "__init__",
          "validate_no_mocks",
          "_validate_component_real_data",
          "setUpClass",
          "setUp",
          "tearDown",
          "test_complete_cognitive_architecture_integration",
          "_test_cross_phase_data_flow",
          "_test_emergent_behavior",
          "test_recursive_modularity_validation",
          "_test_self_similarity",
          "_test_recursive_introspection",
          "_test_modular_composition",
          "test_edge_case_resilience",
          "_test_empty_inputs",
          "_test_extreme_values",
          "_test_resource_limits",
          "_test_rapid_state_changes",
          "test_performance_benchmarks",
          "tearDownClass"
        ],
        "timestamp": "2025-07-14T04:11:57.808898"
      },
      "phase6_comprehensive_test_classes": {
        "module_name": "phase6_comprehensive_test",
        "diagram_type": "class_diagram",
        "mermaid_content": "# phase6_comprehensive_test - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class Phase6TestResult {\n        +methods()\n        +attributes\n    }\n\n    class CognitiveUnificationValidator {\n        +methods()\n        +attributes\n    }\n\n    class RealDataValidator {\n        +methods()\n        +attributes\n    }\n\n    class Phase6ComprehensiveTestSuite {\n        +methods()\n        +attributes\n    }\n\n    Phase6TestResult <|-- CognitiveUnificationValidator\n    Phase6TestResult <|-- RealDataValidator\n    Phase6TestResult <|-- Phase6ComprehensiveTestSuite\n```\n",
        "dependencies": [
          "tensor_kernel",
          "unittest",
          "typing",
          "evolutionary_optimizer",
          "datetime",
          "os",
          "time",
          "json",
          "sys",
          "numpy",
          "logging",
          "cognitive_grammar",
          "attention_allocation",
          "feedback_self_analysis",
          "dataclasses",
          "meta_cognitive"
        ],
        "components": [
          "Phase6TestResult",
          "CognitiveUnificationValidator",
          "RealDataValidator",
          "Phase6ComprehensiveTestSuite"
        ],
        "timestamp": "2025-07-14T04:11:57.808939"
      },
      "documentation_generator": {
        "module_name": "documentation_generator",
        "diagram_type": "flowchart",
        "mermaid_content": "# documentation_generator - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[documentation_generator]\n\n    subgraph \"Classes\"\n        C0[ModuleInfo]\n        C1[ArchitecturalDiagram]\n        C2[DocumentationGenerator]\n    end\n\n    M --> C0\n    M --> C1\n    M --> C2\n    subgraph \"Functions\"\n        F0[main]\n        F2[scan_cognitive_modules]\n        F5[generate_flowchart_for_module]\n        F7[generate_dependency_graph]\n        F9[generate_class_diagram_for_module]\n        F11[update_living_documentation]\n        F15[generate_all_documentation]\n        F18[save_documentation_to_files]\n        F19[datetime_converter]\n    end\n\n    M --> F0\n    M --> F2\n    M --> F5\n    M --> F7\n    M --> F9\n    M --> F11\n    M --> F15\n    M --> F18\n    M --> F19\n    subgraph \"Dependencies\"\n        D0[ast]\n        D1[typing]\n        D2[datetime]\n        D3[os]\n        D4[json]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "ast",
          "typing",
          "datetime",
          "os",
          "json",
          "sys",
          "pathlib",
          "importlib",
          "logging",
          "inspect",
          "dataclasses"
        ],
        "components": [
          "ModuleInfo",
          "ArchitecturalDiagram",
          "DocumentationGenerator",
          "main",
          "__init__",
          "scan_cognitive_modules",
          "_analyze_module",
          "_calculate_test_coverage",
          "generate_flowchart_for_module",
          "_create_module_flowchart",
          "generate_dependency_graph",
          "_create_dependency_graph",
          "generate_class_diagram_for_module",
          "_create_class_diagram",
          "update_living_documentation",
          "_update_tensor_signatures",
          "_update_test_coverage",
          "_track_architecture_changes",
          "generate_all_documentation",
          "_create_documentation_report",
          "_calculate_documentation_completeness",
          "save_documentation_to_files",
          "datetime_converter"
        ],
        "timestamp": "2025-07-14T04:11:57.809000"
      },
      "documentation_generator_classes": {
        "module_name": "documentation_generator",
        "diagram_type": "class_diagram",
        "mermaid_content": "# documentation_generator - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class ModuleInfo {\n        +methods()\n        +attributes\n    }\n\n    class ArchitecturalDiagram {\n        +methods()\n        +attributes\n    }\n\n    class DocumentationGenerator {\n        +methods()\n        +attributes\n    }\n\n    ModuleInfo <|-- ArchitecturalDiagram\n    ModuleInfo <|-- DocumentationGenerator\n```\n",
        "dependencies": [
          "ast",
          "typing",
          "datetime",
          "os",
          "json",
          "sys",
          "pathlib",
          "importlib",
          "logging",
          "inspect",
          "dataclasses"
        ],
        "components": [
          "ModuleInfo",
          "ArchitecturalDiagram",
          "DocumentationGenerator"
        ],
        "timestamp": "2025-07-14T04:11:57.809039"
      },
      "phase6_deep_testing_protocols": {
        "module_name": "phase6_deep_testing_protocols",
        "diagram_type": "flowchart",
        "mermaid_content": "# phase6_deep_testing_protocols - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[phase6_deep_testing_protocols]\n\n    subgraph \"Classes\"\n        C0[StressTestResult]\n        C1[EdgeCaseResult]\n        C2[CognitiveBoundaryTester]\n        C3[StressTester]\n        C4[EdgeCaseTester]\n        C5[SystemMonitor]\n        C6[Phase6DeepTestingProtocols]\n    end\n\n    M --> C0\n    M --> C1\n    M --> C2\n    M --> C3\n    M --> C4\n    M --> C5\n    M --> C6\n    subgraph \"Functions\"\n        F1[test_knowledge_scale_boundaries]\n        F2[test_attention_saturation_boundaries]\n        F3[test_tensor_computation_boundaries]\n        F4[test_meta_cognitive_recursion_boundaries]\n        F6[concurrent_operations_stress_test]\n        F7[memory_pressure_stress_test]\n        F9[test_malformed_inputs]\n        F10[test_extreme_values]\n        F11[test_race_conditions]\n        F13[start_monitoring]\n        F14[stop_monitoring]\n        F15[setUpClass]\n        F16[test_cognitive_boundary_validation]\n        F17[test_stress_testing_protocols]\n        F18[test_edge_case_protocols]\n        F19[tearDownClass]\n        F20[tensor_operations]\n        F21[knowledge_operations]\n        F22[attention_operations]\n        F23[meta_operations]\n        F24[create_entities_concurrently]\n        F25[allocate_attention_concurrently]\n        F26[monitor]\n    end\n\n    M --> F1\n    M --> F2\n    M --> F3\n    M --> F4\n    M --> F6\n    M --> F7\n    M --> F9\n    M --> F10\n    M --> F11\n    M --> F13\n    M --> F14\n    M --> F15\n    M --> F16\n    M --> F17\n    M --> F18\n    M --> F19\n    M --> F20\n    M --> F21\n    M --> F22\n    M --> F23\n    M --> F24\n    M --> F25\n    M --> F26\n    subgraph \"Dependencies\"\n        D0[unittest]\n        D1[typing]\n        D2[evolutionary_optimizer]\n        D3[os]\n        D4[attention_allocation]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "unittest",
          "typing",
          "evolutionary_optimizer",
          "os",
          "attention_allocation",
          "sys",
          "cognitive_grammar",
          "feedback_self_analysis",
          "meta_cognitive",
          "logging",
          "psutil",
          "random",
          "time",
          "dataclasses",
          "tensor_kernel",
          "gc",
          "datetime",
          "math",
          "json",
          "numpy",
          "threading",
          "concurrent.futures"
        ],
        "components": [
          "StressTestResult",
          "EdgeCaseResult",
          "CognitiveBoundaryTester",
          "StressTester",
          "EdgeCaseTester",
          "SystemMonitor",
          "Phase6DeepTestingProtocols",
          "__init__",
          "test_knowledge_scale_boundaries",
          "test_attention_saturation_boundaries",
          "test_tensor_computation_boundaries",
          "test_meta_cognitive_recursion_boundaries",
          "__init__",
          "concurrent_operations_stress_test",
          "memory_pressure_stress_test",
          "__init__",
          "test_malformed_inputs",
          "test_extreme_values",
          "test_race_conditions",
          "__init__",
          "start_monitoring",
          "stop_monitoring",
          "setUpClass",
          "test_cognitive_boundary_validation",
          "test_stress_testing_protocols",
          "test_edge_case_protocols",
          "tearDownClass",
          "tensor_operations",
          "knowledge_operations",
          "attention_operations",
          "meta_operations",
          "create_entities_concurrently",
          "allocate_attention_concurrently",
          "monitor"
        ],
        "timestamp": "2025-07-14T04:11:57.809108"
      },
      "phase6_deep_testing_protocols_classes": {
        "module_name": "phase6_deep_testing_protocols",
        "diagram_type": "class_diagram",
        "mermaid_content": "# phase6_deep_testing_protocols - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class StressTestResult {\n        +methods()\n        +attributes\n    }\n\n    class EdgeCaseResult {\n        +methods()\n        +attributes\n    }\n\n    class CognitiveBoundaryTester {\n        +methods()\n        +attributes\n    }\n\n    class StressTester {\n        +methods()\n        +attributes\n    }\n\n    class EdgeCaseTester {\n        +methods()\n        +attributes\n    }\n\n    class SystemMonitor {\n        +methods()\n        +attributes\n    }\n\n    class Phase6DeepTestingProtocols {\n        +methods()\n        +attributes\n    }\n\n    StressTestResult <|-- EdgeCaseResult\n    StressTestResult <|-- CognitiveBoundaryTester\n    StressTestResult <|-- StressTester\n    StressTestResult <|-- EdgeCaseTester\n    StressTestResult <|-- SystemMonitor\n    StressTestResult <|-- Phase6DeepTestingProtocols\n```\n",
        "dependencies": [
          "unittest",
          "typing",
          "evolutionary_optimizer",
          "os",
          "attention_allocation",
          "sys",
          "cognitive_grammar",
          "feedback_self_analysis",
          "meta_cognitive",
          "logging",
          "psutil",
          "random",
          "time",
          "dataclasses",
          "tensor_kernel",
          "gc",
          "datetime",
          "math",
          "json",
          "numpy",
          "threading",
          "concurrent.futures"
        ],
        "components": [
          "StressTestResult",
          "EdgeCaseResult",
          "CognitiveBoundaryTester",
          "StressTester",
          "EdgeCaseTester",
          "SystemMonitor",
          "Phase6DeepTestingProtocols"
        ],
        "timestamp": "2025-07-14T04:11:57.809150"
      },
      "evolutionary_optimizer": {
        "module_name": "evolutionary_optimizer",
        "diagram_type": "flowchart",
        "mermaid_content": "# evolutionary_optimizer - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[evolutionary_optimizer]\n\n    subgraph \"Classes\"\n        C0[OptimizationTarget]\n        C1[MutationType]\n        C2[Genome]\n        C3[EvolutionMetrics]\n        C4[FitnessEvaluator]\n        C5[GeneticOperators]\n        C6[SelectionStrategy]\n        C7[EvolutionaryOptimizer]\n    end\n\n    M --> C0\n    M --> C1\n    M --> C2\n    M --> C3\n    M --> C4\n    M --> C5\n    M --> C6\n    M --> C7\n    subgraph \"Functions\"\n        F2[evaluate_genome]\n        F15[mutate]\n        F20[crossover]\n        F21[tournament_selection]\n        F22[roulette_wheel_selection]\n        F23[elitist_selection]\n        F25[initialize_population]\n        F27[evolve]\n        F31[get_optimization_summary]\n        F32[export_best_configuration]\n    end\n\n    M --> F2\n    M --> F15\n    M --> F20\n    M --> F21\n    M --> F22\n    M --> F23\n    M --> F25\n    M --> F27\n    M --> F31\n    M --> F32\n    subgraph \"Dependencies\"\n        D0[enum]\n        D1[copy]\n        D2[typing]\n        D3[random]\n        D4[time]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "enum",
          "copy",
          "typing",
          "random",
          "time",
          "json",
          "numpy",
          "collections",
          "dataclasses"
        ],
        "components": [
          "OptimizationTarget",
          "MutationType",
          "Genome",
          "EvolutionMetrics",
          "FitnessEvaluator",
          "GeneticOperators",
          "SelectionStrategy",
          "EvolutionaryOptimizer",
          "__post_init__",
          "__init__",
          "evaluate_genome",
          "_genome_to_cache_key",
          "_evaluate_parameter_coherence",
          "_evaluate_structural_validity",
          "_validate_structure_content",
          "_predict_performance",
          "_test_real_performance",
          "_backup_system_config",
          "_apply_genome_to_system",
          "_restore_system_config",
          "_measure_system_performance",
          "_synthetic_performance",
          "__init__",
          "mutate",
          "_mutate_parameters",
          "_mutate_structure",
          "_mutate_thresholds",
          "_mutate_weights",
          "crossover",
          "tournament_selection",
          "roulette_wheel_selection",
          "elitist_selection",
          "__init__",
          "initialize_population",
          "_create_random_genome",
          "evolve",
          "_update_best_genome",
          "_calculate_evolution_metrics",
          "_create_next_generation",
          "get_optimization_summary",
          "export_best_configuration"
        ],
        "timestamp": "2025-07-14T04:11:57.809216"
      },
      "evolutionary_optimizer_classes": {
        "module_name": "evolutionary_optimizer",
        "diagram_type": "class_diagram",
        "mermaid_content": "# evolutionary_optimizer - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class OptimizationTarget {\n        +methods()\n        +attributes\n    }\n\n    class MutationType {\n        +methods()\n        +attributes\n    }\n\n    class Genome {\n        +methods()\n        +attributes\n    }\n\n    class EvolutionMetrics {\n        +methods()\n        +attributes\n    }\n\n    class FitnessEvaluator {\n        +methods()\n        +attributes\n    }\n\n    class GeneticOperators {\n        +methods()\n        +attributes\n    }\n\n    class SelectionStrategy {\n        +methods()\n        +attributes\n    }\n\n    class EvolutionaryOptimizer {\n        +methods()\n        +attributes\n    }\n\n    OptimizationTarget <|-- MutationType\n    OptimizationTarget <|-- Genome\n    OptimizationTarget <|-- EvolutionMetrics\n    OptimizationTarget <|-- FitnessEvaluator\n    OptimizationTarget <|-- GeneticOperators\n    OptimizationTarget <|-- SelectionStrategy\n    OptimizationTarget <|-- EvolutionaryOptimizer\n```\n",
        "dependencies": [
          "enum",
          "copy",
          "typing",
          "random",
          "time",
          "json",
          "numpy",
          "collections",
          "dataclasses"
        ],
        "components": [
          "OptimizationTarget",
          "MutationType",
          "Genome",
          "EvolutionMetrics",
          "FitnessEvaluator",
          "GeneticOperators",
          "SelectionStrategy",
          "EvolutionaryOptimizer"
        ],
        "timestamp": "2025-07-14T04:11:57.809258"
      },
      "tensor_fragments": {
        "module_name": "tensor_fragments",
        "diagram_type": "flowchart",
        "mermaid_content": "# tensor_fragments - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[tensor_fragments]\n\n    subgraph \"Classes\"\n        C0[FragmentType]\n        C1[SyncState]\n        C2[FragmentMetadata]\n        C3[TensorFragment]\n        C4[FragmentRegistry]\n        C5[TensorFragmentArchitecture]\n    end\n\n    M --> C0\n    M --> C1\n    M --> C2\n    M --> C3\n    M --> C4\n    M --> C5\n    subgraph \"Functions\"\n        F2[is_stale]\n        F3[update_data]\n        F5[register_fragment]\n        F6[get_fragment]\n        F7[get_fragments_by_type]\n        F8[get_dependent_fragments]\n        F9[mark_dirty_cascade]\n        F11[create_fragment]\n        F12[decompose_tensor]\n        F13[compose_fragments]\n        F14[fragment_contraction]\n        F15[parallel_fragment_operation]\n        F16[synchronize_fragments]\n        F21[get_fragment_stats]\n        F23[generate_scheme_fragment_spec]\n    end\n\n    M --> F2\n    M --> F3\n    M --> F5\n    M --> F6\n    M --> F7\n    M --> F8\n    M --> F9\n    M --> F11\n    M --> F12\n    M --> F13\n    M --> F14\n    M --> F15\n    M --> F16\n    M --> F21\n    M --> F23\n    subgraph \"Dependencies\"\n        D0[tensor_kernel]\n        D1[uuid]\n        D2[enum]\n        D3[typing]\n        D4[os]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "tensor_kernel",
          "uuid",
          "enum",
          "typing",
          "os",
          "time",
          "sys",
          "numpy",
          "dataclasses",
          "threading"
        ],
        "components": [
          "FragmentType",
          "SyncState",
          "FragmentMetadata",
          "TensorFragment",
          "FragmentRegistry",
          "TensorFragmentArchitecture",
          "__post_init__",
          "_compute_checksum",
          "is_stale",
          "update_data",
          "__init__",
          "register_fragment",
          "get_fragment",
          "get_fragments_by_type",
          "get_dependent_fragments",
          "mark_dirty_cascade",
          "__init__",
          "create_fragment",
          "decompose_tensor",
          "compose_fragments",
          "fragment_contraction",
          "parallel_fragment_operation",
          "synchronize_fragments",
          "_synchronize_single_fragment",
          "_grid_decompose",
          "_hierarchical_decompose",
          "_compose_by_shape_compatibility",
          "get_fragment_stats",
          "_get_sync_state_counts",
          "generate_scheme_fragment_spec"
        ],
        "timestamp": "2025-07-14T04:11:57.809324"
      },
      "tensor_fragments_classes": {
        "module_name": "tensor_fragments",
        "diagram_type": "class_diagram",
        "mermaid_content": "# tensor_fragments - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class FragmentType {\n        +methods()\n        +attributes\n    }\n\n    class SyncState {\n        +methods()\n        +attributes\n    }\n\n    class FragmentMetadata {\n        +methods()\n        +attributes\n    }\n\n    class TensorFragment {\n        +methods()\n        +attributes\n    }\n\n    class FragmentRegistry {\n        +methods()\n        +attributes\n    }\n\n    class TensorFragmentArchitecture {\n        +methods()\n        +attributes\n    }\n\n    FragmentType <|-- SyncState\n    FragmentType <|-- FragmentMetadata\n    FragmentType <|-- TensorFragment\n    FragmentType <|-- FragmentRegistry\n    FragmentType <|-- TensorFragmentArchitecture\n```\n",
        "dependencies": [
          "tensor_kernel",
          "uuid",
          "enum",
          "typing",
          "os",
          "time",
          "sys",
          "numpy",
          "dataclasses",
          "threading"
        ],
        "components": [
          "FragmentType",
          "SyncState",
          "FragmentMetadata",
          "TensorFragment",
          "FragmentRegistry",
          "TensorFragmentArchitecture"
        ],
        "timestamp": "2025-07-14T04:11:57.809365"
      },
      "living_documentation": {
        "module_name": "living_documentation",
        "diagram_type": "flowchart",
        "mermaid_content": "# living_documentation - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[living_documentation]\n\n    subgraph \"Classes\"\n        C0[CodeChangeEvent]\n        C1[TensorSignatureChange]\n        C2[TestCoverageEvent]\n        C3[EvolutionEvent]\n        C4[FileWatcher]\n        C5[LivingDocumentationSystem]\n    end\n\n    M --> C0\n    M --> C1\n    M --> C2\n    M --> C3\n    M --> C4\n    M --> C5\n    subgraph \"Functions\"\n        F0[main]\n        F2[on_modified]\n        F3[on_created]\n        F4[on_deleted]\n        F6[start_monitoring]\n        F7[stop_monitoring]\n        F11[handle_file_change]\n        F17[register_callback]\n        F19[get_living_documentation_report]\n        F20[save_living_documentation]\n        F21[generate_markdown_report]\n        F22[datetime_converter]\n    end\n\n    M --> F0\n    M --> F2\n    M --> F3\n    M --> F4\n    M --> F6\n    M --> F7\n    M --> F11\n    M --> F17\n    M --> F19\n    M --> F20\n    M --> F21\n    M --> F22\n    subgraph \"Dependencies\"\n        D0[observers]\n        D1[events]\n        D2[documentation_generator]\n        D3[typing]\n        D4[datetime]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "watchdog.observers",
          "watchdog.events",
          "documentation_generator",
          "typing",
          "datetime",
          "os",
          "json",
          "sys",
          "time",
          "pathlib",
          "logging",
          "dataclasses",
          "threading",
          "hashlib"
        ],
        "components": [
          "CodeChangeEvent",
          "TensorSignatureChange",
          "TestCoverageEvent",
          "EvolutionEvent",
          "FileWatcher",
          "LivingDocumentationSystem",
          "main",
          "__init__",
          "on_modified",
          "on_created",
          "on_deleted",
          "__init__",
          "start_monitoring",
          "stop_monitoring",
          "_initial_scan",
          "_monitoring_loop",
          "_periodic_update",
          "handle_file_change",
          "_update_file_hash",
          "_scan_tensor_signatures",
          "_scan_test_coverage",
          "_analyze_architectural_impact",
          "_generate_evolution_summary",
          "register_callback",
          "_trigger_callbacks",
          "get_living_documentation_report",
          "save_living_documentation",
          "generate_markdown_report",
          "datetime_converter"
        ],
        "timestamp": "2025-07-14T04:11:57.809459"
      },
      "living_documentation_classes": {
        "module_name": "living_documentation",
        "diagram_type": "class_diagram",
        "mermaid_content": "# living_documentation - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class CodeChangeEvent {\n        +methods()\n        +attributes\n    }\n\n    class TensorSignatureChange {\n        +methods()\n        +attributes\n    }\n\n    class TestCoverageEvent {\n        +methods()\n        +attributes\n    }\n\n    class EvolutionEvent {\n        +methods()\n        +attributes\n    }\n\n    class FileWatcher {\n        +methods()\n        +attributes\n    }\n\n    class LivingDocumentationSystem {\n        +methods()\n        +attributes\n    }\n\n    CodeChangeEvent <|-- TensorSignatureChange\n    CodeChangeEvent <|-- TestCoverageEvent\n    CodeChangeEvent <|-- EvolutionEvent\n    CodeChangeEvent <|-- FileWatcher\n    CodeChangeEvent <|-- LivingDocumentationSystem\n```\n",
        "dependencies": [
          "watchdog.observers",
          "watchdog.events",
          "documentation_generator",
          "typing",
          "datetime",
          "os",
          "json",
          "sys",
          "time",
          "pathlib",
          "logging",
          "dataclasses",
          "threading",
          "hashlib"
        ],
        "components": [
          "CodeChangeEvent",
          "TensorSignatureChange",
          "TestCoverageEvent",
          "EvolutionEvent",
          "FileWatcher",
          "LivingDocumentationSystem"
        ],
        "timestamp": "2025-07-14T04:11:57.809507"
      },
      "phase3_demo": {
        "module_name": "phase3_demo",
        "diagram_type": "flowchart",
        "mermaid_content": "# phase3_demo - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[phase3_demo]\n\n    subgraph \"Classes\"\n        C0[Phase3Demo]\n    end\n\n    M --> C0\n    subgraph \"Functions\"\n        F0[main]\n        F2[demo_custom_ggml_kernels]\n        F3[demo_neural_symbolic_synthesis]\n        F4[demo_tensor_signature_benchmarking]\n        F5[demo_distributed_mesh_integration]\n        F6[demo_phase_integration]\n        F7[generate_demo_summary]\n        F8[run_complete_demo]\n    end\n\n    M --> F0\n    M --> F2\n    M --> F3\n    M --> F4\n    M --> F5\n    M --> F6\n    M --> F7\n    M --> F8\n    subgraph \"Dependencies\"\n        D0[neural_symbolic_kernels]\n        D1[typing]\n        D2[os]\n        D3[time]\n        D4[sys]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "neural_symbolic_kernels",
          "typing",
          "os",
          "time",
          "sys",
          "json",
          "numpy",
          "tensor_benchmarking"
        ],
        "components": [
          "Phase3Demo",
          "main",
          "__init__",
          "demo_custom_ggml_kernels",
          "demo_neural_symbolic_synthesis",
          "demo_tensor_signature_benchmarking",
          "demo_distributed_mesh_integration",
          "demo_phase_integration",
          "generate_demo_summary",
          "run_complete_demo"
        ],
        "timestamp": "2025-07-14T04:11:57.809563"
      },
      "phase3_demo_classes": {
        "module_name": "phase3_demo",
        "diagram_type": "class_diagram",
        "mermaid_content": "# phase3_demo - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class Phase3Demo {\n        +methods()\n        +attributes\n    }\n\n```\n",
        "dependencies": [
          "neural_symbolic_kernels",
          "typing",
          "os",
          "time",
          "sys",
          "json",
          "numpy",
          "tensor_benchmarking"
        ],
        "components": [
          "Phase3Demo"
        ],
        "timestamp": "2025-07-14T04:11:57.809600"
      },
      "tensor_benchmarking": {
        "module_name": "tensor_benchmarking",
        "diagram_type": "flowchart",
        "mermaid_content": "# tensor_benchmarking - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[tensor_benchmarking]\n\n    subgraph \"Classes\"\n        C0[BenchmarkMetric]\n        C1[BenchmarkResult]\n        C2[BenchmarkSuite]\n        C3[TensorSignatureBenchmark]\n    end\n\n    M --> C0\n    M --> C1\n    M --> C2\n    M --> C3\n    subgraph \"Functions\"\n        F0[create_standard_benchmark_suite]\n        F1[to_dict]\n        F2[get_summary_stats]\n        F5[benchmark_operation]\n        F7[benchmark_kernel_registry]\n        F9[benchmark_distributed_mesh]\n        F10[profile_memory_usage]\n        F11[generate_performance_report]\n        F12[save_benchmark_data]\n        F13[compare_benchmarks]\n        F14[benchmark_func]\n    end\n\n    M --> F0\n    M --> F1\n    M --> F2\n    M --> F5\n    M --> F7\n    M --> F9\n    M --> F10\n    M --> F11\n    M --> F12\n    M --> F13\n    M --> F14\n    subgraph \"Dependencies\"\n        D0[psutil]\n        D1[enum]\n        D2[typing]\n        D3[os]\n        D4[time]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "psutil",
          "enum",
          "typing",
          "os",
          "time",
          "json",
          "pathlib",
          "numpy",
          "dataclasses",
          "statistics",
          "platform"
        ],
        "components": [
          "BenchmarkMetric",
          "BenchmarkResult",
          "BenchmarkSuite",
          "TensorSignatureBenchmark",
          "create_standard_benchmark_suite",
          "to_dict",
          "get_summary_stats",
          "__init__",
          "_collect_system_info",
          "benchmark_operation",
          "_calculate_accuracy",
          "benchmark_kernel_registry",
          "_generate_test_inputs",
          "benchmark_distributed_mesh",
          "profile_memory_usage",
          "generate_performance_report",
          "save_benchmark_data",
          "compare_benchmarks",
          "benchmark_func"
        ],
        "timestamp": "2025-07-14T04:11:57.809683"
      },
      "tensor_benchmarking_classes": {
        "module_name": "tensor_benchmarking",
        "diagram_type": "class_diagram",
        "mermaid_content": "# tensor_benchmarking - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class BenchmarkMetric {\n        +methods()\n        +attributes\n    }\n\n    class BenchmarkResult {\n        +methods()\n        +attributes\n    }\n\n    class BenchmarkSuite {\n        +methods()\n        +attributes\n    }\n\n    class TensorSignatureBenchmark {\n        +methods()\n        +attributes\n    }\n\n    BenchmarkMetric <|-- BenchmarkResult\n    BenchmarkMetric <|-- BenchmarkSuite\n    BenchmarkMetric <|-- TensorSignatureBenchmark\n```\n",
        "dependencies": [
          "psutil",
          "enum",
          "typing",
          "os",
          "time",
          "json",
          "pathlib",
          "numpy",
          "dataclasses",
          "statistics",
          "platform"
        ],
        "components": [
          "BenchmarkMetric",
          "BenchmarkResult",
          "BenchmarkSuite",
          "TensorSignatureBenchmark"
        ],
        "timestamp": "2025-07-14T04:11:57.809724"
      },
      "phase4_acceptance_test": {
        "module_name": "phase4_acceptance_test",
        "diagram_type": "flowchart",
        "mermaid_content": "# phase4_acceptance_test - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[phase4_acceptance_test]\n\n    subgraph \"Classes\"\n        C0[Phase4AcceptanceTest]\n    end\n\n    M --> C0\n    subgraph \"Functions\"\n        F0[run_phase4_acceptance_test]\n        F1[setUp]\n        F2[test_real_data_implementation]\n        F3[test_api_server_functionality]\n        F4[test_unity3d_integration]\n        F5[test_ros_integration]\n        F6[test_web_agent_integration]\n        F7[test_distributed_state_propagation]\n        F8[test_task_orchestration]\n        F9[test_comprehensive_integration]\n        F10[test_performance_validation]\n    end\n\n    M --> F0\n    M --> F1\n    M --> F2\n    M --> F3\n    M --> F4\n    M --> F5\n    M --> F6\n    M --> F7\n    M --> F8\n    M --> F9\n    M --> F10\n    subgraph \"Dependencies\"\n        D0[neural_symbolic_kernels]\n        D1[web_agent_adapter]\n        D2[unittest]\n        D3[typing]\n        D4[ros_adapter]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "neural_symbolic_kernels",
          "web_agent_adapter",
          "unittest",
          "typing",
          "ros_adapter",
          "phase4_api_server",
          "unity3d_adapter",
          "time",
          "json",
          "numpy",
          "logging",
          "threading"
        ],
        "components": [
          "Phase4AcceptanceTest",
          "run_phase4_acceptance_test",
          "setUp",
          "test_real_data_implementation",
          "test_api_server_functionality",
          "test_unity3d_integration",
          "test_ros_integration",
          "test_web_agent_integration",
          "test_distributed_state_propagation",
          "test_task_orchestration",
          "test_comprehensive_integration",
          "test_performance_validation"
        ],
        "timestamp": "2025-07-14T04:11:57.809784"
      },
      "phase4_acceptance_test_classes": {
        "module_name": "phase4_acceptance_test",
        "diagram_type": "class_diagram",
        "mermaid_content": "# phase4_acceptance_test - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class Phase4AcceptanceTest {\n        +methods()\n        +attributes\n    }\n\n```\n",
        "dependencies": [
          "neural_symbolic_kernels",
          "web_agent_adapter",
          "unittest",
          "typing",
          "ros_adapter",
          "phase4_api_server",
          "unity3d_adapter",
          "time",
          "json",
          "numpy",
          "logging",
          "threading"
        ],
        "components": [
          "Phase4AcceptanceTest"
        ],
        "timestamp": "2025-07-14T04:11:57.809821"
      },
      "tensor_signature_tests": {
        "module_name": "tensor_signature_tests",
        "diagram_type": "flowchart",
        "mermaid_content": "# tensor_signature_tests - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[tensor_signature_tests]\n\n    subgraph \"Classes\"\n        C0[TestTensorSignatures]\n        C1[TestPrimeFactorizationMapping]\n        C2[TestFragmentSignatureValidation]\n    end\n\n    M --> C0\n    M --> C1\n    M --> C2\n    subgraph \"Functions\"\n        F0[setUp]\n        F1[test_attention_tensor_signature]\n        F2[test_grammar_tensor_signature]\n        F3[test_meta_cognitive_tensor_signature]\n        F4[test_scheme_tensor_generation]\n        F5[setUp]\n        F6[test_prime_index_assignment]\n        F7[test_prime_sequence_generation]\n        F8[test_hypergraph_density_calculation]\n        F9[test_prime_index_collision_prevention]\n        F10[test_density_scaling_properties]\n        F11[setUp]\n        F12[test_fragment_metadata_signature]\n        F13[test_fragment_operation_signatures]\n        F14[test_decomposition_signature]\n        F15[test_scheme_fragment_specification]\n        F16[is_prime]\n    end\n\n    M --> F0\n    M --> F1\n    M --> F2\n    M --> F3\n    M --> F4\n    M --> F5\n    M --> F6\n    M --> F7\n    M --> F8\n    M --> F9\n    M --> F10\n    M --> F11\n    M --> F12\n    M --> F13\n    M --> F14\n    M --> F15\n    M --> F16\n    subgraph \"Dependencies\"\n        D0[tensor_kernel]\n        D1[unittest]\n        D2[typing]\n        D3[os]\n        D4[sys]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "tensor_kernel",
          "unittest",
          "typing",
          "os",
          "sys",
          "numpy",
          "cognitive_grammar",
          "tensor_fragments"
        ],
        "components": [
          "TestTensorSignatures",
          "TestPrimeFactorizationMapping",
          "TestFragmentSignatureValidation",
          "setUp",
          "test_attention_tensor_signature",
          "test_grammar_tensor_signature",
          "test_meta_cognitive_tensor_signature",
          "test_scheme_tensor_generation",
          "setUp",
          "test_prime_index_assignment",
          "test_prime_sequence_generation",
          "test_hypergraph_density_calculation",
          "test_prime_index_collision_prevention",
          "test_density_scaling_properties",
          "setUp",
          "test_fragment_metadata_signature",
          "test_fragment_operation_signatures",
          "test_decomposition_signature",
          "test_scheme_fragment_specification",
          "is_prime"
        ],
        "timestamp": "2025-07-14T04:11:57.809884"
      },
      "tensor_signature_tests_classes": {
        "module_name": "tensor_signature_tests",
        "diagram_type": "class_diagram",
        "mermaid_content": "# tensor_signature_tests - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class TestTensorSignatures {\n        +methods()\n        +attributes\n    }\n\n    class TestPrimeFactorizationMapping {\n        +methods()\n        +attributes\n    }\n\n    class TestFragmentSignatureValidation {\n        +methods()\n        +attributes\n    }\n\n    TestTensorSignatures <|-- TestPrimeFactorizationMapping\n    TestTensorSignatures <|-- TestFragmentSignatureValidation\n```\n",
        "dependencies": [
          "tensor_kernel",
          "unittest",
          "typing",
          "os",
          "sys",
          "numpy",
          "cognitive_grammar",
          "tensor_fragments"
        ],
        "components": [
          "TestTensorSignatures",
          "TestPrimeFactorizationMapping",
          "TestFragmentSignatureValidation"
        ],
        "timestamp": "2025-07-14T04:11:57.809923"
      },
      "tensor_kernel": {
        "module_name": "tensor_kernel",
        "diagram_type": "flowchart",
        "mermaid_content": "# tensor_kernel - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[tensor_kernel]\n\n    subgraph \"Classes\"\n        C0[TensorFormat]\n        C1[TensorKernel]\n    end\n\n    M --> C0\n    M --> C1\n    subgraph \"Functions\"\n        F0[initialize_default_shapes]\n        F2[enable_neural_symbolic_synthesis]\n        F3[neural_symbolic_operation]\n        F4[define_canonical_shape]\n        F5[get_canonical_shape]\n        F6[create_tensor]\n        F11[tensor_contraction]\n        F12[parallel_operation]\n        F18[meta_learning_update]\n        F20[get_operation_stats]\n        F21[scheme_tensor_shape]\n    end\n\n    M --> F0\n    M --> F2\n    M --> F3\n    M --> F4\n    M --> F5\n    M --> F6\n    M --> F11\n    M --> F12\n    M --> F18\n    M --> F20\n    M --> F21\n    subgraph \"Dependencies\"\n        D0[neural_symbolic_kernels]\n        D1[enum]\n        D2[typing]\n        D3[os]\n        D4[json]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "neural_symbolic_kernels",
          "enum",
          "typing",
          "os",
          "json",
          "sys",
          "numpy"
        ],
        "components": [
          "TensorFormat",
          "TensorKernel",
          "initialize_default_shapes",
          "__init__",
          "enable_neural_symbolic_synthesis",
          "neural_symbolic_operation",
          "define_canonical_shape",
          "get_canonical_shape",
          "create_tensor",
          "_convert_tensor_format",
          "_apply_ggml_optimizations",
          "_apply_kokkos_layout",
          "_apply_a0ml_metadata",
          "tensor_contraction",
          "parallel_operation",
          "_parallel_reduce",
          "_parallel_map",
          "_parallel_scan",
          "_parallel_stencil",
          "_apply_stencil_kernel",
          "meta_learning_update",
          "_compute_adaptive_learning_rate",
          "get_operation_stats",
          "scheme_tensor_shape"
        ],
        "timestamp": "2025-07-14T04:11:57.809984"
      },
      "tensor_kernel_classes": {
        "module_name": "tensor_kernel",
        "diagram_type": "class_diagram",
        "mermaid_content": "# tensor_kernel - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class TensorFormat {\n        +methods()\n        +attributes\n    }\n\n    class TensorKernel {\n        +methods()\n        +attributes\n    }\n\n    TensorFormat <|-- TensorKernel\n```\n",
        "dependencies": [
          "neural_symbolic_kernels",
          "enum",
          "typing",
          "os",
          "json",
          "sys",
          "numpy"
        ],
        "components": [
          "TensorFormat",
          "TensorKernel"
        ],
        "timestamp": "2025-07-14T04:11:57.810023"
      },
      "phase1_final_validation": {
        "module_name": "phase1_final_validation",
        "diagram_type": "flowchart",
        "mermaid_content": "# phase1_final_validation - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[phase1_final_validation]\n\n    subgraph \"Functions\"\n        F0[run_test_suite]\n        F1[validate_documentation]\n        F2[validate_real_implementation]\n        F3[main]\n    end\n\n    M --> F0\n    M --> F1\n    M --> F2\n    M --> F3\n    subgraph \"Dependencies\"\n        D0[time]\n        D1[sys]\n        D2[subprocess]\n        D3[os]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n```\n",
        "dependencies": [
          "time",
          "sys",
          "subprocess",
          "os"
        ],
        "components": [
          "run_test_suite",
          "validate_documentation",
          "validate_real_implementation",
          "main"
        ],
        "timestamp": "2025-07-14T04:11:57.810075"
      },
      "phase3_acceptance_test": {
        "module_name": "phase3_acceptance_test",
        "diagram_type": "flowchart",
        "mermaid_content": "# phase3_acceptance_test - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[phase3_acceptance_test]\n\n    subgraph \"Functions\"\n        F0[test_acceptance_criteria]\n        F1[main]\n    end\n\n    M --> F0\n    M --> F1\n    subgraph \"Dependencies\"\n        D0[neural_symbolic_kernels]\n        D1[tensor_kernel]\n        D2[phase3_verification]\n        D3[os]\n        D4[time]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "neural_symbolic_kernels",
          "tensor_kernel",
          "phase3_verification",
          "os",
          "time",
          "sys",
          "json",
          "numpy",
          "tensor_benchmarking"
        ],
        "components": [
          "test_acceptance_criteria",
          "main"
        ],
        "timestamp": "2025-07-14T04:11:57.810122"
      },
      "phase1_demo_with_visualization": {
        "module_name": "phase1_demo_with_visualization",
        "diagram_type": "flowchart",
        "mermaid_content": "# phase1_demo_with_visualization - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[phase1_demo_with_visualization]\n\n    subgraph \"Classes\"\n        C0[Phase1DemoWithVisualization]\n    end\n\n    M --> C0\n    subgraph \"Functions\"\n        F0[main]\n        F2[run_complete_demo]\n        F3[demo_microservices_architecture]\n        F4[demo_ko6ml_translation]\n        F5[demo_tensor_fragment_operations]\n        F6[demo_hypergraph_knowledge]\n        F7[demo_attention_allocation]\n        F8[create_comprehensive_visualizations]\n        F9[demo_integration_scenario]\n        F10[final_validation]\n        F11[cleanup]\n    end\n\n    M --> F0\n    M --> F2\n    M --> F3\n    M --> F4\n    M --> F5\n    M --> F6\n    M --> F7\n    M --> F8\n    M --> F9\n    M --> F10\n    M --> F11\n    subgraph \"Dependencies\"\n        D0[tensor_kernel]\n        D1[ko6ml_translator]\n        D2[hypergraph_visualizer]\n        D3[tensor_fragments]\n        D4[traceback]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "tensor_kernel",
          "microservices.ko6ml_translator",
          "hypergraph_visualizer",
          "tensor_fragments",
          "traceback",
          "typing",
          "os",
          "time",
          "sys",
          "attention_allocation",
          "numpy",
          "cognitive_grammar",
          "microservices",
          "threading",
          "meta_cognitive"
        ],
        "components": [
          "Phase1DemoWithVisualization",
          "main",
          "__init__",
          "run_complete_demo",
          "demo_microservices_architecture",
          "demo_ko6ml_translation",
          "demo_tensor_fragment_operations",
          "demo_hypergraph_knowledge",
          "demo_attention_allocation",
          "create_comprehensive_visualizations",
          "demo_integration_scenario",
          "final_validation",
          "cleanup"
        ],
        "timestamp": "2025-07-14T04:11:57.810180"
      },
      "phase1_demo_with_visualization_classes": {
        "module_name": "phase1_demo_with_visualization",
        "diagram_type": "class_diagram",
        "mermaid_content": "# phase1_demo_with_visualization - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class Phase1DemoWithVisualization {\n        +methods()\n        +attributes\n    }\n\n```\n",
        "dependencies": [
          "tensor_kernel",
          "microservices.ko6ml_translator",
          "hypergraph_visualizer",
          "tensor_fragments",
          "traceback",
          "typing",
          "os",
          "time",
          "sys",
          "attention_allocation",
          "numpy",
          "cognitive_grammar",
          "microservices",
          "threading",
          "meta_cognitive"
        ],
        "components": [
          "Phase1DemoWithVisualization"
        ],
        "timestamp": "2025-07-14T04:11:57.810217"
      },
      "test_validation": {
        "module_name": "test_validation",
        "diagram_type": "flowchart",
        "mermaid_content": "# test_validation - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[test_validation]\n\n    subgraph \"Functions\"\n        F0[test_tensor_kernel]\n        F1[test_cognitive_grammar]\n        F2[test_attention_allocation]\n        F3[test_meta_cognitive]\n        F4[test_integration]\n        F5[main]\n    end\n\n    M --> F0\n    M --> F1\n    M --> F2\n    M --> F3\n    M --> F4\n    M --> F5\n    subgraph \"Dependencies\"\n        D0[cognitive_grammar]\n        D1[meta_cognitive]\n        D2[os]\n        D3[attention_allocation]\n        D4[sys]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "cognitive.cognitive_grammar",
          "cognitive.meta_cognitive",
          "os",
          "cognitive.attention_allocation",
          "sys",
          "numpy",
          "cognitive.tensor_kernel",
          "traceback"
        ],
        "components": [
          "test_tensor_kernel",
          "test_cognitive_grammar",
          "test_attention_allocation",
          "test_meta_cognitive",
          "test_integration",
          "main"
        ],
        "timestamp": "2025-07-14T04:11:57.810272"
      },
      "demo": {
        "module_name": "demo",
        "diagram_type": "flowchart",
        "mermaid_content": "# demo - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[demo]\n\n    subgraph \"Functions\"\n        F0[demonstrate_tensor_operations]\n        F1[demonstrate_cognitive_grammar]\n        F2[demonstrate_attention_allocation]\n        F3[demonstrate_meta_cognitive]\n        F4[demonstrate_full_integration]\n        F5[main]\n    end\n\n    M --> F0\n    M --> F1\n    M --> F2\n    M --> F3\n    M --> F4\n    M --> F5\n    subgraph \"Dependencies\"\n        D0[typing]\n        D1[cognitive_grammar]\n        D2[meta_cognitive]\n        D3[os]\n        D4[attention_allocation]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "typing",
          "cognitive.cognitive_grammar",
          "cognitive.meta_cognitive",
          "os",
          "cognitive.attention_allocation",
          "sys",
          "numpy",
          "cognitive.tensor_kernel",
          "traceback"
        ],
        "components": [
          "demonstrate_tensor_operations",
          "demonstrate_cognitive_grammar",
          "demonstrate_attention_allocation",
          "demonstrate_meta_cognitive",
          "demonstrate_full_integration",
          "main"
        ],
        "timestamp": "2025-07-14T04:11:57.810324"
      },
      "phase4_fullstack_integration_test": {
        "module_name": "phase4_fullstack_integration_test",
        "diagram_type": "flowchart",
        "mermaid_content": "# phase4_fullstack_integration_test - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[phase4_fullstack_integration_test]\n\n    subgraph \"Classes\"\n        C0[RecursiveEmbodimentScenario]\n        C1[Phase4FullStackIntegrationTest]\n    end\n\n    M --> C0\n    M --> C1\n    subgraph \"Functions\"\n        F0[run_phase4_fullstack_integration_test]\n        F2[setUpClass]\n        F4[test_recursive_embodiment_level_1_direct_interaction]\n        F5[test_recursive_embodiment_level_2_cross_platform]\n        F6[test_recursive_embodiment_level_3_meta_cognitive]\n        F7[test_concurrent_recursive_embodiment]\n        F8[test_error_recovery_in_recursive_embodiment]\n        F9[test_performance_under_recursive_load]\n        F10[test_full_stack_integration_scenario]\n        F11[execute_concurrent_scenario]\n        F12[execute_load_test_operation]\n    end\n\n    M --> F0\n    M --> F2\n    M --> F4\n    M --> F5\n    M --> F6\n    M --> F7\n    M --> F8\n    M --> F9\n    M --> F10\n    M --> F11\n    M --> F12\n    subgraph \"Dependencies\"\n        D0[neural_symbolic_kernels]\n        D1[web_agent_adapter]\n        D2[unittest]\n        D3[typing]\n        D4[ros_adapter]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "neural_symbolic_kernels",
          "web_agent_adapter",
          "unittest",
          "typing",
          "ros_adapter",
          "phase4_api_server",
          "unity3d_adapter",
          "asyncio",
          "time",
          "json",
          "numpy",
          "logging",
          "uuid",
          "threading",
          "concurrent.futures"
        ],
        "components": [
          "RecursiveEmbodimentScenario",
          "Phase4FullStackIntegrationTest",
          "run_phase4_fullstack_integration_test",
          "__init__",
          "setUpClass",
          "_create_test_agents",
          "test_recursive_embodiment_level_1_direct_interaction",
          "test_recursive_embodiment_level_2_cross_platform",
          "test_recursive_embodiment_level_3_meta_cognitive",
          "test_concurrent_recursive_embodiment",
          "test_error_recovery_in_recursive_embodiment",
          "test_performance_under_recursive_load",
          "test_full_stack_integration_scenario",
          "execute_concurrent_scenario",
          "execute_load_test_operation"
        ],
        "timestamp": "2025-07-14T04:11:57.810380"
      },
      "phase4_fullstack_integration_test_classes": {
        "module_name": "phase4_fullstack_integration_test",
        "diagram_type": "class_diagram",
        "mermaid_content": "# phase4_fullstack_integration_test - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class RecursiveEmbodimentScenario {\n        +methods()\n        +attributes\n    }\n\n    class Phase4FullStackIntegrationTest {\n        +methods()\n        +attributes\n    }\n\n    RecursiveEmbodimentScenario <|-- Phase4FullStackIntegrationTest\n```\n",
        "dependencies": [
          "neural_symbolic_kernels",
          "web_agent_adapter",
          "unittest",
          "typing",
          "ros_adapter",
          "phase4_api_server",
          "unity3d_adapter",
          "asyncio",
          "time",
          "json",
          "numpy",
          "logging",
          "uuid",
          "threading",
          "concurrent.futures"
        ],
        "components": [
          "RecursiveEmbodimentScenario",
          "Phase4FullStackIntegrationTest"
        ],
        "timestamp": "2025-07-14T04:11:57.810419"
      },
      "adaptive_optimization_demo": {
        "module_name": "adaptive_optimization_demo",
        "diagram_type": "flowchart",
        "mermaid_content": "# adaptive_optimization_demo - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[adaptive_optimization_demo]\n\n    subgraph \"Classes\"\n        C0[MockCognitiveKernel]\n        C1[AdaptiveOptimizationDemo]\n    end\n\n    M --> C0\n    M --> C1\n    subgraph \"Functions\"\n        F0[main]\n        F2[get_operation_stats]\n        F3[get_performance_metrics]\n        F4[simulate_work]\n        F5[update_config]\n        F7[setup_cognitive_system]\n        F8[demonstrate_continuous_benchmarking]\n        F9[demonstrate_kernel_autotuning]\n        F10[demonstrate_adaptive_optimization_system]\n        F11[demonstrate_evolutionary_trajectories]\n        F12[run_complete_demo]\n        F13[generate_demo_report]\n    end\n\n    M --> F0\n    M --> F2\n    M --> F3\n    M --> F4\n    M --> F5\n    M --> F7\n    M --> F8\n    M --> F9\n    M --> F10\n    M --> F11\n    M --> F12\n    M --> F13\n    subgraph \"Dependencies\"\n        D0[typing]\n        D1[time]\n        D2[json]\n        D3[numpy]\n        D4[feedback_self_analysis]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "typing",
          "time",
          "json",
          "numpy",
          "feedback_self_analysis",
          "adaptive_optimization",
          "meta_cognitive"
        ],
        "components": [
          "MockCognitiveKernel",
          "AdaptiveOptimizationDemo",
          "main",
          "__init__",
          "get_operation_stats",
          "get_performance_metrics",
          "simulate_work",
          "update_config",
          "__init__",
          "setup_cognitive_system",
          "demonstrate_continuous_benchmarking",
          "demonstrate_kernel_autotuning",
          "demonstrate_adaptive_optimization_system",
          "demonstrate_evolutionary_trajectories",
          "run_complete_demo",
          "generate_demo_report"
        ],
        "timestamp": "2025-07-14T04:11:57.810569"
      },
      "adaptive_optimization_demo_classes": {
        "module_name": "adaptive_optimization_demo",
        "diagram_type": "class_diagram",
        "mermaid_content": "# adaptive_optimization_demo - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class MockCognitiveKernel {\n        +methods()\n        +attributes\n    }\n\n    class AdaptiveOptimizationDemo {\n        +methods()\n        +attributes\n    }\n\n    MockCognitiveKernel <|-- AdaptiveOptimizationDemo\n```\n",
        "dependencies": [
          "typing",
          "time",
          "json",
          "numpy",
          "feedback_self_analysis",
          "adaptive_optimization",
          "meta_cognitive"
        ],
        "components": [
          "MockCognitiveKernel",
          "AdaptiveOptimizationDemo"
        ],
        "timestamp": "2025-07-14T04:11:57.810617"
      },
      "phase6_integration_test": {
        "module_name": "phase6_integration_test",
        "diagram_type": "flowchart",
        "mermaid_content": "# phase6_integration_test - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[phase6_integration_test]\n\n    subgraph \"Classes\"\n        C0[IntegrationTestResult]\n        C1[CognitiveFlowResult]\n        C2[CognitiveUnificationEngine]\n        C3[Phase6IntegrationTestSuite]\n    end\n\n    M --> C0\n    M --> C1\n    M --> C2\n    M --> C3\n    subgraph \"Functions\"\n        F1[validate_unified_cognitive_architecture]\n        F25[setUpClass]\n        F26[test_unified_cognitive_architecture_validation]\n        F27[test_end_to_end_cognitive_workflow]\n        F28[test_cognitive_emergence_validation]\n        F29[test_real_data_implementation_verification]\n        F30[tearDownClass]\n    end\n\n    M --> F1\n    M --> F25\n    M --> F26\n    M --> F27\n    M --> F28\n    M --> F29\n    M --> F30\n    subgraph \"Dependencies\"\n        D0[tensor_kernel]\n        D1[unittest]\n        D2[typing]\n        D3[evolutionary_optimizer]\n        D4[datetime]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "tensor_kernel",
          "unittest",
          "typing",
          "evolutionary_optimizer",
          "datetime",
          "os",
          "time",
          "json",
          "sys",
          "numpy",
          "logging",
          "cognitive_grammar",
          "attention_allocation",
          "feedback_self_analysis",
          "dataclasses",
          "meta_cognitive"
        ],
        "components": [
          "IntegrationTestResult",
          "CognitiveFlowResult",
          "CognitiveUnificationEngine",
          "Phase6IntegrationTestSuite",
          "__init__",
          "validate_unified_cognitive_architecture",
          "_validate_structural_unification",
          "_validate_functional_unification",
          "_validate_data_flow_unification",
          "_validate_emergent_behavior",
          "_validate_cognitive_coherence",
          "_check_interface_consistency",
          "_check_recursive_modularity",
          "_test_function_integration",
          "_test_state_synchronization",
          "_test_error_handling",
          "_test_tensor_to_grammar_flow",
          "_test_grammar_to_attention_flow",
          "_test_attention_to_meta_flow",
          "_test_meta_to_evolution_flow",
          "_test_full_roundtrip_flow",
          "_test_emergent_knowledge_synthesis",
          "_test_emergent_attention_patterns",
          "_test_emergent_optimization",
          "_test_emergent_cognitive_insights",
          "_test_temporal_coherence",
          "_test_spatial_coherence",
          "_test_logical_coherence",
          "_test_causal_coherence",
          "setUpClass",
          "test_unified_cognitive_architecture_validation",
          "test_end_to_end_cognitive_workflow",
          "test_cognitive_emergence_validation",
          "test_real_data_implementation_verification",
          "tearDownClass"
        ],
        "timestamp": "2025-07-14T04:11:57.810711"
      },
      "phase6_integration_test_classes": {
        "module_name": "phase6_integration_test",
        "diagram_type": "class_diagram",
        "mermaid_content": "# phase6_integration_test - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class IntegrationTestResult {\n        +methods()\n        +attributes\n    }\n\n    class CognitiveFlowResult {\n        +methods()\n        +attributes\n    }\n\n    class CognitiveUnificationEngine {\n        +methods()\n        +attributes\n    }\n\n    class Phase6IntegrationTestSuite {\n        +methods()\n        +attributes\n    }\n\n    IntegrationTestResult <|-- CognitiveFlowResult\n    IntegrationTestResult <|-- CognitiveUnificationEngine\n    IntegrationTestResult <|-- Phase6IntegrationTestSuite\n```\n",
        "dependencies": [
          "tensor_kernel",
          "unittest",
          "typing",
          "evolutionary_optimizer",
          "datetime",
          "os",
          "time",
          "json",
          "sys",
          "numpy",
          "logging",
          "cognitive_grammar",
          "attention_allocation",
          "feedback_self_analysis",
          "dataclasses",
          "meta_cognitive"
        ],
        "components": [
          "IntegrationTestResult",
          "CognitiveFlowResult",
          "CognitiveUnificationEngine",
          "Phase6IntegrationTestSuite"
        ],
        "timestamp": "2025-07-14T04:11:57.810764"
      },
      "meta_cognitive": {
        "module_name": "meta_cognitive",
        "diagram_type": "flowchart",
        "mermaid_content": "# meta_cognitive - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[meta_cognitive]\n\n    subgraph \"Classes\"\n        C0[MetaLayer]\n        C1[IntrospectionLevel]\n        C2[MetaTensor]\n        C3[CognitiveState]\n        C4[MetaStateMonitor]\n        C5[RecursiveIntrospector]\n        C6[MetaCognitive]\n    end\n\n    M --> C0\n    M --> C1\n    M --> C2\n    M --> C3\n    M --> C4\n    M --> C5\n    M --> C6\n    subgraph \"Functions\"\n        F2[register_layer_monitor]\n        F3[capture_layer_state]\n        F10[start_monitoring]\n        F11[stop_monitoring]\n        F12[get_current_state]\n        F13[get_state_trajectory]\n        F15[introspect_layer]\n        F20[scheme_introspection]\n        F22[register_layer]\n        F23[update_meta_state]\n        F26[perform_deep_introspection]\n        F27[get_meta_tensor_dynamics]\n        F28[diagnose_system_health]\n        F30[get_current_state]\n        F31[get_system_stats]\n    end\n\n    M --> F2\n    M --> F3\n    M --> F10\n    M --> F11\n    M --> F12\n    M --> F13\n    M --> F15\n    M --> F20\n    M --> F22\n    M --> F23\n    M --> F26\n    M --> F27\n    M --> F28\n    M --> F30\n    M --> F31\n    subgraph \"Dependencies\"\n        D0[psutil]\n        D1[enum]\n        D2[typing]\n        D3[time]\n        D4[json]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "psutil",
          "enum",
          "typing",
          "time",
          "json",
          "numpy",
          "inspect",
          "collections",
          "dataclasses"
        ],
        "components": [
          "MetaLayer",
          "IntrospectionLevel",
          "MetaTensor",
          "CognitiveState",
          "MetaStateMonitor",
          "RecursiveIntrospector",
          "MetaCognitive",
          "__post_init__",
          "__init__",
          "register_layer_monitor",
          "capture_layer_state",
          "_capture_tensor_kernel_state",
          "_capture_grammar_state",
          "_capture_attention_state",
          "_calculate_performance_metrics",
          "_monitor_resources",
          "_check_error_states",
          "start_monitoring",
          "stop_monitoring",
          "get_current_state",
          "get_state_trajectory",
          "__init__",
          "introspect_layer",
          "_perform_introspection",
          "_analyze_structure",
          "_analyze_behavior",
          "_analyze_state",
          "scheme_introspection",
          "__init__",
          "register_layer",
          "update_meta_state",
          "_compute_cognitive_state",
          "_calculate_coherence",
          "perform_deep_introspection",
          "get_meta_tensor_dynamics",
          "diagnose_system_health",
          "_calculate_stability",
          "get_current_state",
          "get_system_stats"
        ],
        "timestamp": "2025-07-14T04:11:57.810847"
      },
      "meta_cognitive_classes": {
        "module_name": "meta_cognitive",
        "diagram_type": "class_diagram",
        "mermaid_content": "# meta_cognitive - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class MetaLayer {\n        +methods()\n        +attributes\n    }\n\n    class IntrospectionLevel {\n        +methods()\n        +attributes\n    }\n\n    class MetaTensor {\n        +methods()\n        +attributes\n    }\n\n    class CognitiveState {\n        +methods()\n        +attributes\n    }\n\n    class MetaStateMonitor {\n        +methods()\n        +attributes\n    }\n\n    class RecursiveIntrospector {\n        +methods()\n        +attributes\n    }\n\n    class MetaCognitive {\n        +methods()\n        +attributes\n    }\n\n    MetaLayer <|-- IntrospectionLevel\n    MetaLayer <|-- MetaTensor\n    MetaLayer <|-- CognitiveState\n    MetaLayer <|-- MetaStateMonitor\n    MetaLayer <|-- RecursiveIntrospector\n    MetaLayer <|-- MetaCognitive\n```\n",
        "dependencies": [
          "psutil",
          "enum",
          "typing",
          "time",
          "json",
          "numpy",
          "inspect",
          "collections",
          "dataclasses"
        ],
        "components": [
          "MetaLayer",
          "IntrospectionLevel",
          "MetaTensor",
          "CognitiveState",
          "MetaStateMonitor",
          "RecursiveIntrospector",
          "MetaCognitive"
        ],
        "timestamp": "2025-07-14T04:11:57.810895"
      },
      "adaptive_optimization": {
        "module_name": "adaptive_optimization",
        "diagram_type": "flowchart",
        "mermaid_content": "# adaptive_optimization - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[adaptive_optimization]\n\n    subgraph \"Classes\"\n        C0[AdaptationStrategy]\n        C1[PerformanceTrajectory]\n        C2[FitnessLandscape]\n        C3[ContinuousBenchmark]\n        C4[KernelAutoTuner]\n        C5[AdaptiveOptimizer]\n    end\n\n    M --> C0\n    M --> C1\n    M --> C2\n    M --> C3\n    M --> C4\n    M --> C5\n    subgraph \"Functions\"\n        F0[add_measurement]\n        F2[add_sample_point]\n        F5[start_continuous_benchmarking]\n        F6[stop_continuous_benchmarking]\n        F8[get_performance_trends]\n        F9[get_landscape_analysis]\n        F11[auto_tune_kernel]\n        F17[start_adaptive_optimization]\n        F18[stop_adaptive_optimization]\n        F26[get_optimization_summary]\n    end\n\n    M --> F0\n    M --> F2\n    M --> F5\n    M --> F6\n    M --> F8\n    M --> F9\n    M --> F11\n    M --> F17\n    M --> F18\n    M --> F26\n    subgraph \"Dependencies\"\n        D0[enum]\n        D1[evolutionary_optimizer]\n        D2[typing]\n        D3[queue]\n        D4[time]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "enum",
          "evolutionary_optimizer",
          "typing",
          "queue",
          "time",
          "json",
          "numpy",
          "feedback_self_analysis",
          "collections",
          "dataclasses",
          "threading",
          "meta_cognitive"
        ],
        "components": [
          "AdaptationStrategy",
          "PerformanceTrajectory",
          "FitnessLandscape",
          "ContinuousBenchmark",
          "KernelAutoTuner",
          "AdaptiveOptimizer",
          "add_measurement",
          "_update_trend_analysis",
          "add_sample_point",
          "_update_landscape_analysis",
          "__init__",
          "start_continuous_benchmarking",
          "stop_continuous_benchmarking",
          "_benchmarking_loop",
          "get_performance_trends",
          "get_landscape_analysis",
          "__init__",
          "auto_tune_kernel",
          "_calculate_adaptation_magnitude",
          "_apply_corrective_tuning",
          "_apply_progressive_tuning",
          "_apply_exploratory_tuning",
          "__init__",
          "start_adaptive_optimization",
          "stop_adaptive_optimization",
          "_adaptive_optimization_loop",
          "_should_adapt",
          "_perform_adaptive_optimization",
          "_extract_kernel_config",
          "_apply_kernel_config",
          "_create_genome_from_current_state",
          "_apply_evolutionary_result",
          "get_optimization_summary"
        ],
        "timestamp": "2025-07-14T04:11:57.810972"
      },
      "adaptive_optimization_classes": {
        "module_name": "adaptive_optimization",
        "diagram_type": "class_diagram",
        "mermaid_content": "# adaptive_optimization - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class AdaptationStrategy {\n        +methods()\n        +attributes\n    }\n\n    class PerformanceTrajectory {\n        +methods()\n        +attributes\n    }\n\n    class FitnessLandscape {\n        +methods()\n        +attributes\n    }\n\n    class ContinuousBenchmark {\n        +methods()\n        +attributes\n    }\n\n    class KernelAutoTuner {\n        +methods()\n        +attributes\n    }\n\n    class AdaptiveOptimizer {\n        +methods()\n        +attributes\n    }\n\n    AdaptationStrategy <|-- PerformanceTrajectory\n    AdaptationStrategy <|-- FitnessLandscape\n    AdaptationStrategy <|-- ContinuousBenchmark\n    AdaptationStrategy <|-- KernelAutoTuner\n    AdaptationStrategy <|-- AdaptiveOptimizer\n```\n",
        "dependencies": [
          "enum",
          "evolutionary_optimizer",
          "typing",
          "queue",
          "time",
          "json",
          "numpy",
          "feedback_self_analysis",
          "collections",
          "dataclasses",
          "threading",
          "meta_cognitive"
        ],
        "components": [
          "AdaptationStrategy",
          "PerformanceTrajectory",
          "FitnessLandscape",
          "ContinuousBenchmark",
          "KernelAutoTuner",
          "AdaptiveOptimizer"
        ],
        "timestamp": "2025-07-14T04:11:57.811019"
      },
      "mesh_topology": {
        "module_name": "mesh_topology",
        "diagram_type": "flowchart",
        "mermaid_content": "# mesh_topology - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[mesh_topology]\n\n    subgraph \"Classes\"\n        C0[AgentRole]\n        C1[MeshTopology]\n        C2[AgentState]\n        C3[MeshMessage]\n        C4[DistributedAgent]\n        C5[DynamicMesh]\n    end\n\n    M --> C0\n    M --> C1\n    M --> C2\n    M --> C3\n    M --> C4\n    M --> C5\n    subgraph \"Functions\"\n        F5[start]\n        F6[stop]\n        F7[send_message]\n        F8[receive_message]\n        F9[update_load]\n        F10[get_capacity]\n        F23[add_agent]\n        F24[remove_agent]\n        F28[propagate_state]\n        F29[benchmark_attention_allocation]\n        F30[get_mesh_topology_stats]\n        F31[visualize_topology]\n        F32[scheme_mesh_spec]\n    end\n\n    M --> F5\n    M --> F6\n    M --> F7\n    M --> F8\n    M --> F9\n    M --> F10\n    M --> F23\n    M --> F24\n    M --> F28\n    M --> F29\n    M --> F30\n    M --> F31\n    M --> F32\n    subgraph \"Dependencies\"\n        D0[uuid]\n        D1[enum]\n        D2[typing]\n        D3[socket]\n        D4[json]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "uuid",
          "enum",
          "typing",
          "socket",
          "json",
          "time",
          "numpy",
          "collections",
          "dataclasses",
          "threading",
          "concurrent.futures",
          "hashlib"
        ],
        "components": [
          "AgentRole",
          "MeshTopology",
          "AgentState",
          "MeshMessage",
          "DistributedAgent",
          "DynamicMesh",
          "__post_init__",
          "__post_init__",
          "__init__",
          "_find_free_port",
          "_initialize_role_capabilities",
          "start",
          "stop",
          "send_message",
          "receive_message",
          "update_load",
          "get_capacity",
          "_handle_coordination",
          "_handle_state_sync",
          "_handle_topology_update",
          "_handle_attention_focus",
          "_handle_attention_spread",
          "_handle_memory_store",
          "_handle_memory_retrieve",
          "_handle_process_task",
          "_handle_compute_tensor",
          "_handle_run_inference",
          "_handle_update_beliefs",
          "__init__",
          "add_agent",
          "remove_agent",
          "_rebuild_topology",
          "_build_adaptive_topology",
          "_update_agent_connections",
          "propagate_state",
          "benchmark_attention_allocation",
          "get_mesh_topology_stats",
          "visualize_topology",
          "scheme_mesh_spec"
        ],
        "timestamp": "2025-07-14T04:11:57.811099"
      },
      "mesh_topology_classes": {
        "module_name": "mesh_topology",
        "diagram_type": "class_diagram",
        "mermaid_content": "# mesh_topology - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class AgentRole {\n        +methods()\n        +attributes\n    }\n\n    class MeshTopology {\n        +methods()\n        +attributes\n    }\n\n    class AgentState {\n        +methods()\n        +attributes\n    }\n\n    class MeshMessage {\n        +methods()\n        +attributes\n    }\n\n    class DistributedAgent {\n        +methods()\n        +attributes\n    }\n\n    class DynamicMesh {\n        +methods()\n        +attributes\n    }\n\n    AgentRole <|-- MeshTopology\n    AgentRole <|-- AgentState\n    AgentRole <|-- MeshMessage\n    AgentRole <|-- DistributedAgent\n    AgentRole <|-- DynamicMesh\n```\n",
        "dependencies": [
          "uuid",
          "enum",
          "typing",
          "socket",
          "json",
          "time",
          "numpy",
          "collections",
          "dataclasses",
          "threading",
          "concurrent.futures",
          "hashlib"
        ],
        "components": [
          "AgentRole",
          "MeshTopology",
          "AgentState",
          "MeshMessage",
          "DistributedAgent",
          "DynamicMesh"
        ],
        "timestamp": "2025-07-14T04:11:57.811143"
      },
      "phase2_demo": {
        "module_name": "phase2_demo",
        "diagram_type": "flowchart",
        "mermaid_content": "# phase2_demo - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[phase2_demo]\n\n    subgraph \"Classes\"\n        C0[Phase2IntegratedDemo]\n    end\n\n    M --> C0\n    subgraph \"Functions\"\n        F0[main]\n        F2[print_section_header]\n        F3[print_subsection]\n        F4[setup_cognitive_infrastructure]\n        F9[demonstrate_resource_allocation]\n        F10[demonstrate_attention_scheduling]\n        F11[demonstrate_mesh_integration]\n        F12[demonstrate_economic_attention_model]\n        F13[run_performance_benchmark]\n        F14[generate_comprehensive_report]\n        F15[demo_dynamic_mesh_creation]\n        F16[demo_resource_kernel_construction]\n        F17[demo_attention_allocation_across_mesh]\n        F18[demo_comprehensive_benchmarking]\n        F19[run_complete_demo]\n        F20[run_complete_demonstration]\n    end\n\n    M --> F0\n    M --> F2\n    M --> F3\n    M --> F4\n    M --> F9\n    M --> F10\n    M --> F11\n    M --> F12\n    M --> F13\n    M --> F14\n    M --> F15\n    M --> F16\n    M --> F17\n    M --> F18\n    M --> F19\n    M --> F20\n    subgraph \"Dependencies\"\n        D0[typing]\n        D1[cognitive_grammar]\n        D2[benchmarking]\n        D3[os]\n        D4[time]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "typing",
          "cognitive.cognitive_grammar",
          "cognitive.benchmarking",
          "os",
          "time",
          "sys",
          "json",
          "numpy",
          "cognitive.attention_allocation",
          "cognitive.mesh_topology",
          "cognitive.resource_kernel",
          "traceback"
        ],
        "components": [
          "Phase2IntegratedDemo",
          "main",
          "__init__",
          "print_section_header",
          "print_subsection",
          "setup_cognitive_infrastructure",
          "_create_business_scenario",
          "_create_attention_network",
          "_setup_cognitive_mesh",
          "_configure_agent_resources",
          "demonstrate_resource_allocation",
          "demonstrate_attention_scheduling",
          "demonstrate_mesh_integration",
          "demonstrate_economic_attention_model",
          "run_performance_benchmark",
          "generate_comprehensive_report",
          "demo_dynamic_mesh_creation",
          "demo_resource_kernel_construction",
          "demo_attention_allocation_across_mesh",
          "demo_comprehensive_benchmarking",
          "run_complete_demo",
          "run_complete_demonstration"
        ],
        "timestamp": "2025-07-14T04:11:57.811218"
      },
      "phase2_demo_classes": {
        "module_name": "phase2_demo",
        "diagram_type": "class_diagram",
        "mermaid_content": "# phase2_demo - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class Phase2IntegratedDemo {\n        +methods()\n        +attributes\n    }\n\n```\n",
        "dependencies": [
          "typing",
          "cognitive.cognitive_grammar",
          "cognitive.benchmarking",
          "os",
          "time",
          "sys",
          "json",
          "numpy",
          "cognitive.attention_allocation",
          "cognitive.mesh_topology",
          "cognitive.resource_kernel",
          "traceback"
        ],
        "components": [
          "Phase2IntegratedDemo"
        ],
        "timestamp": "2025-07-14T04:11:57.811261"
      },
      "phase2_tests": {
        "module_name": "phase2_tests",
        "diagram_type": "flowchart",
        "mermaid_content": "# phase2_tests - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[phase2_tests]\n\n    subgraph \"Classes\"\n        C0[Phase2Tests]\n    end\n\n    M --> C0\n    subgraph \"Functions\"\n        F0[main]\n        F2[test_dynamic_mesh_creation]\n        F3[test_resource_kernel_allocation]\n        F4[test_distributed_resource_management]\n        F5[test_attention_allocation_benchmarking]\n        F6[test_mesh_communication_performance]\n        F7[test_comprehensive_benchmarking]\n        F8[test_integration_scenarios]\n        F9[test_scheme_specifications]\n        F10[run_all_tests]\n    end\n\n    M --> F0\n    M --> F2\n    M --> F3\n    M --> F4\n    M --> F5\n    M --> F6\n    M --> F7\n    M --> F8\n    M --> F9\n    M --> F10\n    subgraph \"Dependencies\"\n        D0[typing]\n        D1[benchmarking]\n        D2[os]\n        D3[time]\n        D4[sys]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "typing",
          "cognitive.benchmarking",
          "os",
          "time",
          "sys",
          "cognitive.attention_allocation",
          "numpy",
          "cognitive.resource_kernel",
          "cognitive.mesh_topology"
        ],
        "components": [
          "Phase2Tests",
          "main",
          "__init__",
          "test_dynamic_mesh_creation",
          "test_resource_kernel_allocation",
          "test_distributed_resource_management",
          "test_attention_allocation_benchmarking",
          "test_mesh_communication_performance",
          "test_comprehensive_benchmarking",
          "test_integration_scenarios",
          "test_scheme_specifications",
          "run_all_tests"
        ],
        "timestamp": "2025-07-14T04:11:57.811326"
      },
      "phase2_tests_classes": {
        "module_name": "phase2_tests",
        "diagram_type": "class_diagram",
        "mermaid_content": "# phase2_tests - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class Phase2Tests {\n        +methods()\n        +attributes\n    }\n\n```\n",
        "dependencies": [
          "typing",
          "cognitive.benchmarking",
          "os",
          "time",
          "sys",
          "cognitive.attention_allocation",
          "numpy",
          "cognitive.resource_kernel",
          "cognitive.mesh_topology"
        ],
        "components": [
          "Phase2Tests"
        ],
        "timestamp": "2025-07-14T04:11:57.811367"
      },
      "standalone_neural_symbolic": {
        "module_name": "standalone_neural_symbolic",
        "diagram_type": "flowchart",
        "mermaid_content": "# standalone_neural_symbolic - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[standalone_neural_symbolic]\n\n    subgraph \"Classes\"\n        C0[SymbolicPrimitive]\n        C1[TensorSignature]\n        C2[AtomSpaceNode]\n        C3[AtomSpaceLink]\n        C4[NeuralSymbolicKernel]\n        C5[EnhancedGGMLConceptualEmbeddingKernel]\n        C6[EnhancedGGMLLogicalInferenceKernel]\n        C7[EnhancedCustomGGMLKernelRegistry]\n        C8[EnhancedNeuralSymbolicSynthesizer]\n        C9[SimpleAttentionKernel]\n        C10[SimpleHypergraphKernel]\n    end\n\n    M --> C0\n    M --> C1\n    M --> C2\n    M --> C3\n    M --> C4\n    M --> C5\n    M --> C6\n    M --> C7\n    M --> C8\n    M --> C9\n    M --> C10\n    subgraph \"Functions\"\n        F0[create_enhanced_kernel_registry]\n        F1[create_atomspace_test_environment]\n        F2[modus_ponens_hook]\n        F3[conjunction_hook]\n        F4[disjunction_hook]\n        F5[forward]\n        F6[backward]\n        F7[get_signature]\n        F10[register_atomspace_node]\n        F11[register_atomspace_link]\n        F12[forward]\n        F16[backward]\n        F17[get_signature]\n        F20[forward]\n        F28[backward]\n        F29[get_signature]\n        F31[register_kernel]\n        F32[register_atomspace_node]\n        F33[register_atomspace_link]\n        F34[execute_kernel]\n        F35[get_kernel_signature]\n        F36[list_kernels]\n        F37[get_registry_stats]\n        F40[register_inference_hook]\n        F41[synthesize]\n        F47[get_synthesis_stats]\n        F48[benchmark_kernels]\n        F50[forward]\n        F51[backward]\n        F52[get_signature]\n        F54[forward]\n        F55[backward]\n        F56[get_signature]\n    end\n\n    M --> F0\n    M --> F1\n    M --> F2\n    M --> F3\n    M --> F4\n    M --> F5\n    M --> F6\n    M --> F7\n    M --> F10\n    M --> F11\n    M --> F12\n    M --> F16\n    M --> F17\n    M --> F20\n    M --> F28\n    M --> F29\n    M --> F31\n    M --> F32\n    M --> F33\n    M --> F34\n    M --> F35\n    M --> F36\n    M --> F37\n    M --> F40\n    M --> F41\n    M --> F47\n    M --> F48\n    M --> F50\n    M --> F51\n    M --> F52\n    M --> F54\n    M --> F55\n    M --> F56\n    subgraph \"Dependencies\"\n        D0[enum]\n        D1[typing]\n        D2[abc]\n        D3[json]\n        D4[time]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "enum",
          "typing",
          "abc",
          "json",
          "time",
          "numpy",
          "dataclasses",
          "statistics"
        ],
        "components": [
          "SymbolicPrimitive",
          "TensorSignature",
          "AtomSpaceNode",
          "AtomSpaceLink",
          "NeuralSymbolicKernel",
          "EnhancedGGMLConceptualEmbeddingKernel",
          "EnhancedGGMLLogicalInferenceKernel",
          "EnhancedCustomGGMLKernelRegistry",
          "EnhancedNeuralSymbolicSynthesizer",
          "SimpleAttentionKernel",
          "SimpleHypergraphKernel",
          "create_enhanced_kernel_registry",
          "create_atomspace_test_environment",
          "modus_ponens_hook",
          "conjunction_hook",
          "disjunction_hook",
          "forward",
          "backward",
          "get_signature",
          "__init__",
          "_init_ggml_matrix",
          "register_atomspace_node",
          "register_atomspace_link",
          "forward",
          "_ggml_tensor_optimize",
          "_compute_enhanced_attention",
          "_apply_atomspace_inference",
          "backward",
          "get_signature",
          "__init__",
          "_init_logic_matrix",
          "forward",
          "_ggml_optimize",
          "_enhanced_neural_and",
          "_enhanced_neural_or",
          "_enhanced_neural_not",
          "_enhanced_neural_implication",
          "_enhanced_neural_biconditional",
          "_propagate_uncertainty",
          "backward",
          "get_signature",
          "__init__",
          "register_kernel",
          "register_atomspace_node",
          "register_atomspace_link",
          "execute_kernel",
          "get_kernel_signature",
          "list_kernels",
          "get_registry_stats",
          "__init__",
          "_create_enhanced_registry",
          "register_inference_hook",
          "synthesize",
          "_enhanced_symbolize_to_tensor",
          "_apply_atomspace_context",
          "_prepare_synthesis_inputs",
          "_apply_inference_hooks",
          "_record_enhanced_metrics",
          "get_synthesis_stats",
          "benchmark_kernels",
          "__init__",
          "forward",
          "backward",
          "get_signature",
          "__init__",
          "forward",
          "backward",
          "get_signature"
        ],
        "timestamp": "2025-07-14T04:11:57.811463"
      },
      "standalone_neural_symbolic_classes": {
        "module_name": "standalone_neural_symbolic",
        "diagram_type": "class_diagram",
        "mermaid_content": "# standalone_neural_symbolic - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class SymbolicPrimitive {\n        +methods()\n        +attributes\n    }\n\n    class TensorSignature {\n        +methods()\n        +attributes\n    }\n\n    class AtomSpaceNode {\n        +methods()\n        +attributes\n    }\n\n    class AtomSpaceLink {\n        +methods()\n        +attributes\n    }\n\n    class NeuralSymbolicKernel {\n        +methods()\n        +attributes\n    }\n\n    class EnhancedGGMLConceptualEmbeddingKernel {\n        +methods()\n        +attributes\n    }\n\n    class EnhancedGGMLLogicalInferenceKernel {\n        +methods()\n        +attributes\n    }\n\n    class EnhancedCustomGGMLKernelRegistry {\n        +methods()\n        +attributes\n    }\n\n    class EnhancedNeuralSymbolicSynthesizer {\n        +methods()\n        +attributes\n    }\n\n    class SimpleAttentionKernel {\n        +methods()\n        +attributes\n    }\n\n    class SimpleHypergraphKernel {\n        +methods()\n        +attributes\n    }\n\n    SymbolicPrimitive <|-- TensorSignature\n    SymbolicPrimitive <|-- AtomSpaceNode\n    SymbolicPrimitive <|-- AtomSpaceLink\n    SymbolicPrimitive <|-- NeuralSymbolicKernel\n    SymbolicPrimitive <|-- EnhancedGGMLConceptualEmbeddingKernel\n    SymbolicPrimitive <|-- EnhancedGGMLLogicalInferenceKernel\n    SymbolicPrimitive <|-- EnhancedCustomGGMLKernelRegistry\n    SymbolicPrimitive <|-- EnhancedNeuralSymbolicSynthesizer\n    SymbolicPrimitive <|-- SimpleAttentionKernel\n    SymbolicPrimitive <|-- SimpleHypergraphKernel\n```\n",
        "dependencies": [
          "enum",
          "typing",
          "abc",
          "json",
          "time",
          "numpy",
          "dataclasses",
          "statistics"
        ],
        "components": [
          "SymbolicPrimitive",
          "TensorSignature",
          "AtomSpaceNode",
          "AtomSpaceLink",
          "NeuralSymbolicKernel",
          "EnhancedGGMLConceptualEmbeddingKernel",
          "EnhancedGGMLLogicalInferenceKernel",
          "EnhancedCustomGGMLKernelRegistry",
          "EnhancedNeuralSymbolicSynthesizer",
          "SimpleAttentionKernel",
          "SimpleHypergraphKernel"
        ],
        "timestamp": "2025-07-14T04:11:57.811512"
      },
      "phase3_comprehensive_demo": {
        "module_name": "phase3_comprehensive_demo",
        "diagram_type": "flowchart",
        "mermaid_content": "# phase3_comprehensive_demo - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[phase3_comprehensive_demo]\n\n    subgraph \"Functions\"\n        F0[demonstrate_custom_ggml_kernels]\n        F1[demonstrate_neural_symbolic_synthesis]\n        F2[demonstrate_tensor_signature_benchmarking]\n        F3[demonstrate_integration_verification]\n        F4[demonstrate_performance_characteristics]\n        F5[generate_comprehensive_report]\n        F6[main]\n    end\n\n    M --> F0\n    M --> F1\n    M --> F2\n    M --> F3\n    M --> F4\n    M --> F5\n    M --> F6\n    subgraph \"Dependencies\"\n        D0[neural_symbolic_kernels]\n        D1[tensor_kernel]\n        D2[typing]\n        D3[time]\n        D4[pathlib]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "neural_symbolic_kernels",
          "tensor_kernel",
          "typing",
          "time",
          "pathlib",
          "json",
          "numpy",
          "tensor_benchmarking"
        ],
        "components": [
          "demonstrate_custom_ggml_kernels",
          "demonstrate_neural_symbolic_synthesis",
          "demonstrate_tensor_signature_benchmarking",
          "demonstrate_integration_verification",
          "demonstrate_performance_characteristics",
          "generate_comprehensive_report",
          "main"
        ],
        "timestamp": "2025-07-14T04:11:57.811576"
      },
      "phase5_acceptance_test": {
        "module_name": "phase5_acceptance_test",
        "diagram_type": "flowchart",
        "mermaid_content": "# phase5_acceptance_test - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[phase5_acceptance_test]\n\n    subgraph \"Classes\"\n        C0[MockCognitiveComponent]\n        C1[Phase5AcceptanceTest]\n        C2[TestRunner]\n    end\n\n    M --> C0\n    M --> C1\n    M --> C2\n    subgraph \"Functions\"\n        F0[main]\n        F2[get_operation_stats]\n        F3[get_knowledge_stats]\n        F4[get_economic_stats]\n        F5[simulate_work]\n        F6[setUp]\n        F7[tearDown]\n        F8[test_real_data_implementation]\n        F9[test_comprehensive_tests]\n        F10[test_recursive_modularity]\n        F11[test_evolutionary_optimization_integration]\n        F12[test_integration_with_existing_phases]\n        F13[test_documentation_and_architecture]\n        F14[test_acceptance_criteria_summary]\n        F15[run_acceptance_tests]\n    end\n\n    M --> F0\n    M --> F2\n    M --> F3\n    M --> F4\n    M --> F5\n    M --> F6\n    M --> F7\n    M --> F8\n    M --> F9\n    M --> F10\n    M --> F11\n    M --> F12\n    M --> F13\n    M --> F14\n    M --> F15\n    subgraph \"Dependencies\"\n        D0[unittest]\n        D1[typing]\n        D2[evolutionary_optimizer]\n        D3[os]\n        D4[time]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "unittest",
          "typing",
          "evolutionary_optimizer",
          "os",
          "time",
          "json",
          "numpy",
          "feedback_self_analysis",
          "tempfile",
          "threading",
          "meta_cognitive"
        ],
        "components": [
          "MockCognitiveComponent",
          "Phase5AcceptanceTest",
          "TestRunner",
          "main",
          "__init__",
          "get_operation_stats",
          "get_knowledge_stats",
          "get_economic_stats",
          "simulate_work",
          "setUp",
          "tearDown",
          "test_real_data_implementation",
          "test_comprehensive_tests",
          "test_recursive_modularity",
          "test_evolutionary_optimization_integration",
          "test_integration_with_existing_phases",
          "test_documentation_and_architecture",
          "test_acceptance_criteria_summary",
          "run_acceptance_tests"
        ],
        "timestamp": "2025-07-14T04:11:57.811671"
      },
      "phase5_acceptance_test_classes": {
        "module_name": "phase5_acceptance_test",
        "diagram_type": "class_diagram",
        "mermaid_content": "# phase5_acceptance_test - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class MockCognitiveComponent {\n        +methods()\n        +attributes\n    }\n\n    class Phase5AcceptanceTest {\n        +methods()\n        +attributes\n    }\n\n    class TestRunner {\n        +methods()\n        +attributes\n    }\n\n    MockCognitiveComponent <|-- Phase5AcceptanceTest\n    MockCognitiveComponent <|-- TestRunner\n```\n",
        "dependencies": [
          "unittest",
          "typing",
          "evolutionary_optimizer",
          "os",
          "time",
          "json",
          "numpy",
          "feedback_self_analysis",
          "tempfile",
          "threading",
          "meta_cognitive"
        ],
        "components": [
          "MockCognitiveComponent",
          "Phase5AcceptanceTest",
          "TestRunner"
        ],
        "timestamp": "2025-07-14T04:11:57.811718"
      },
      "hypergraph_visualizer": {
        "module_name": "hypergraph_visualizer",
        "diagram_type": "flowchart",
        "mermaid_content": "# hypergraph_visualizer - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[hypergraph_visualizer]\n\n    subgraph \"Classes\"\n        C0[HypergraphNode]\n        C1[HypergraphEdge]\n        C2[FragmentLayout]\n        C3[HypergraphVisualizer]\n    end\n\n    M --> C0\n    M --> C1\n    M --> C2\n    M --> C3\n    subgraph \"Functions\"\n        F0[main]\n        F2[create_hypergraph_flowchart]\n        F3[create_ko6ml_translation_diagram]\n        F4[create_tensor_fragment_visualization]\n        F5[create_attention_heatmap]\n        F6[create_comprehensive_flowchart]\n        F20[generate_all_phase1_visualizations]\n    end\n\n    M --> F0\n    M --> F2\n    M --> F3\n    M --> F4\n    M --> F5\n    M --> F6\n    M --> F20\n    subgraph \"Dependencies\"\n        D0[typing]\n        D1[pyplot]\n        D2[json]\n        D3[os]\n        D4[numpy]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "typing",
          "matplotlib.pyplot",
          "json",
          "os",
          "numpy",
          "matplotlib.patches",
          "dataclasses",
          "seaborn"
        ],
        "components": [
          "HypergraphNode",
          "HypergraphEdge",
          "FragmentLayout",
          "HypergraphVisualizer",
          "main",
          "__init__",
          "create_hypergraph_flowchart",
          "create_ko6ml_translation_diagram",
          "create_tensor_fragment_visualization",
          "create_attention_heatmap",
          "create_comprehensive_flowchart",
          "_draw_node",
          "_draw_hyperedge",
          "_draw_ko6ml_primitives",
          "_draw_translation_arrows",
          "_draw_atomspace_atoms",
          "_draw_tensor_grid",
          "_draw_tensor_hierarchy",
          "_draw_fragment_composition",
          "_draw_operations_pipeline",
          "_draw_component_area",
          "_draw_component_connections",
          "_add_legend",
          "_add_comprehensive_legend",
          "generate_all_phase1_visualizations"
        ],
        "timestamp": "2025-07-14T04:11:57.811787"
      },
      "hypergraph_visualizer_classes": {
        "module_name": "hypergraph_visualizer",
        "diagram_type": "class_diagram",
        "mermaid_content": "# hypergraph_visualizer - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class HypergraphNode {\n        +methods()\n        +attributes\n    }\n\n    class HypergraphEdge {\n        +methods()\n        +attributes\n    }\n\n    class FragmentLayout {\n        +methods()\n        +attributes\n    }\n\n    class HypergraphVisualizer {\n        +methods()\n        +attributes\n    }\n\n    HypergraphNode <|-- HypergraphEdge\n    HypergraphNode <|-- FragmentLayout\n    HypergraphNode <|-- HypergraphVisualizer\n```\n",
        "dependencies": [
          "typing",
          "matplotlib.pyplot",
          "json",
          "os",
          "numpy",
          "matplotlib.patches",
          "dataclasses",
          "seaborn"
        ],
        "components": [
          "HypergraphNode",
          "HypergraphEdge",
          "FragmentLayout",
          "HypergraphVisualizer"
        ],
        "timestamp": "2025-07-14T04:11:57.811832"
      },
      "phase1_demo": {
        "module_name": "phase1_demo",
        "diagram_type": "flowchart",
        "mermaid_content": "# phase1_demo - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[phase1_demo]\n\n    subgraph \"Classes\"\n        C0[Phase1Demo]\n    end\n\n    M --> C0\n    subgraph \"Functions\"\n        F0[print_header]\n        F1[print_section]\n        F2[print_success]\n        F3[print_info]\n        F4[main]\n        F6[run_complete_demo]\n        F7[demo_microservices_architecture]\n        F8[demo_ko6ml_translation]\n        F9[demo_tensor_fragment_architecture]\n        F10[demo_integrated_cognitive_scenario]\n        F11[demo_scheme_integration]\n        F12[show_final_statistics]\n        F13[cleanup]\n    end\n\n    M --> F0\n    M --> F1\n    M --> F2\n    M --> F3\n    M --> F4\n    M --> F6\n    M --> F7\n    M --> F8\n    M --> F9\n    M --> F10\n    M --> F11\n    M --> F12\n    M --> F13\n    subgraph \"Dependencies\"\n        D0[tensor_kernel]\n        D1[ko6ml_translator]\n        D2[tensor_fragments]\n        D3[typing]\n        D4[os]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "tensor_kernel",
          "microservices.ko6ml_translator",
          "tensor_fragments",
          "typing",
          "os",
          "time",
          "sys",
          "numpy",
          "cognitive_grammar",
          "microservices",
          "threading",
          "traceback"
        ],
        "components": [
          "Phase1Demo",
          "print_header",
          "print_section",
          "print_success",
          "print_info",
          "main",
          "__init__",
          "run_complete_demo",
          "demo_microservices_architecture",
          "demo_ko6ml_translation",
          "demo_tensor_fragment_architecture",
          "demo_integrated_cognitive_scenario",
          "demo_scheme_integration",
          "show_final_statistics",
          "cleanup"
        ],
        "timestamp": "2025-07-14T04:11:57.811901"
      },
      "phase1_demo_classes": {
        "module_name": "phase1_demo",
        "diagram_type": "class_diagram",
        "mermaid_content": "# phase1_demo - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class Phase1Demo {\n        +methods()\n        +attributes\n    }\n\n```\n",
        "dependencies": [
          "tensor_kernel",
          "microservices.ko6ml_translator",
          "tensor_fragments",
          "typing",
          "os",
          "time",
          "sys",
          "numpy",
          "cognitive_grammar",
          "microservices",
          "threading",
          "traceback"
        ],
        "components": [
          "Phase1Demo"
        ],
        "timestamp": "2025-07-14T04:11:57.811944"
      },
      "phase1_tests": {
        "module_name": "phase1_tests",
        "diagram_type": "flowchart",
        "mermaid_content": "# phase1_tests - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[phase1_tests]\n\n    subgraph \"Classes\"\n        C0[TestPhase1Microservices]\n        C1[TestKo6mlTranslation]\n        C2[TestTensorFragmentArchitecture]\n        C3[TestPhase1Integration]\n    end\n\n    M --> C0\n    M --> C1\n    M --> C2\n    M --> C3\n    subgraph \"Functions\"\n        F0[run_phase1_verification]\n        F1[setUpClass]\n        F2[tearDownClass]\n        F3[test_atomspace_service_health]\n        F4[test_atomspace_crud_operations]\n        F5[test_pln_service_inference]\n        F6[test_pattern_service_operations]\n        F7[setUp]\n        F8[test_basic_ko6ml_to_atomspace]\n        F9[test_atomspace_to_ko6ml]\n        F10[test_round_trip_translation]\n        F11[test_complex_pattern_translation]\n        F12[test_scheme_generation]\n        F13[setUp]\n        F14[test_fragment_creation]\n        F15[test_tensor_decomposition]\n        F16[test_fragment_composition]\n        F17[test_fragment_contraction]\n        F18[test_parallel_fragment_operations]\n        F19[test_fragment_synchronization]\n        F20[test_hierarchical_decomposition]\n        F21[test_scheme_fragment_generation]\n        F22[setUp]\n        F23[test_end_to_end_cognitive_scenario]\n        F24[test_distributed_cognitive_operations]\n    end\n\n    M --> F0\n    M --> F1\n    M --> F2\n    M --> F3\n    M --> F4\n    M --> F5\n    M --> F6\n    M --> F7\n    M --> F8\n    M --> F9\n    M --> F10\n    M --> F11\n    M --> F12\n    M --> F13\n    M --> F14\n    M --> F15\n    M --> F16\n    M --> F17\n    M --> F18\n    M --> F19\n    M --> F20\n    M --> F21\n    M --> F22\n    M --> F23\n    M --> F24\n    subgraph \"Dependencies\"\n        D0[tensor_kernel]\n        D1[ko6ml_translator]\n        D2[tensor_fragments]\n        D3[unittest]\n        D4[typing]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "tensor_kernel",
          "microservices.ko6ml_translator",
          "tensor_fragments",
          "unittest",
          "typing",
          "os",
          "time",
          "json",
          "sys",
          "numpy",
          "cognitive_grammar",
          "microservices",
          "threading",
          "requests"
        ],
        "components": [
          "TestPhase1Microservices",
          "TestKo6mlTranslation",
          "TestTensorFragmentArchitecture",
          "TestPhase1Integration",
          "run_phase1_verification",
          "setUpClass",
          "tearDownClass",
          "test_atomspace_service_health",
          "test_atomspace_crud_operations",
          "test_pln_service_inference",
          "test_pattern_service_operations",
          "setUp",
          "test_basic_ko6ml_to_atomspace",
          "test_atomspace_to_ko6ml",
          "test_round_trip_translation",
          "test_complex_pattern_translation",
          "test_scheme_generation",
          "setUp",
          "test_fragment_creation",
          "test_tensor_decomposition",
          "test_fragment_composition",
          "test_fragment_contraction",
          "test_parallel_fragment_operations",
          "test_fragment_synchronization",
          "test_hierarchical_decomposition",
          "test_scheme_fragment_generation",
          "setUp",
          "test_end_to_end_cognitive_scenario",
          "test_distributed_cognitive_operations"
        ],
        "timestamp": "2025-07-14T04:11:57.812025"
      },
      "phase1_tests_classes": {
        "module_name": "phase1_tests",
        "diagram_type": "class_diagram",
        "mermaid_content": "# phase1_tests - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class TestPhase1Microservices {\n        +methods()\n        +attributes\n    }\n\n    class TestKo6mlTranslation {\n        +methods()\n        +attributes\n    }\n\n    class TestTensorFragmentArchitecture {\n        +methods()\n        +attributes\n    }\n\n    class TestPhase1Integration {\n        +methods()\n        +attributes\n    }\n\n    TestPhase1Microservices <|-- TestKo6mlTranslation\n    TestPhase1Microservices <|-- TestTensorFragmentArchitecture\n    TestPhase1Microservices <|-- TestPhase1Integration\n```\n",
        "dependencies": [
          "tensor_kernel",
          "microservices.ko6ml_translator",
          "tensor_fragments",
          "unittest",
          "typing",
          "os",
          "time",
          "json",
          "sys",
          "numpy",
          "cognitive_grammar",
          "microservices",
          "threading",
          "requests"
        ],
        "components": [
          "TestPhase1Microservices",
          "TestKo6mlTranslation",
          "TestTensorFragmentArchitecture",
          "TestPhase1Integration"
        ],
        "timestamp": "2025-07-14T04:11:57.812066"
      },
      "phase5_demo": {
        "module_name": "phase5_demo",
        "diagram_type": "flowchart",
        "mermaid_content": "# phase5_demo - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[phase5_demo]\n\n    subgraph \"Classes\"\n        C0[MockCognitiveLayer]\n        C1[Phase5Demo]\n    end\n\n    M --> C0\n    M --> C1\n    subgraph \"Functions\"\n        F0[main]\n        F2[get_operation_stats]\n        F3[get_knowledge_stats]\n        F4[get_economic_stats]\n        F5[simulate_operation]\n        F7[initialize_cognitive_system]\n        F8[demonstrate_evolutionary_optimization]\n        F10[demonstrate_recursive_metacognition]\n        F11[demonstrate_feedback_driven_adaptation]\n        F13[demonstrate_integration_with_existing_phases]\n        F14[run_comprehensive_demo]\n        F15[generate_demonstration_report]\n    end\n\n    M --> F0\n    M --> F2\n    M --> F3\n    M --> F4\n    M --> F5\n    M --> F7\n    M --> F8\n    M --> F10\n    M --> F11\n    M --> F13\n    M --> F14\n    M --> F15\n    subgraph \"Dependencies\"\n        D0[neural_symbolic_kernels]\n        D1[tensor_kernel]\n        D2[evolutionary_optimizer]\n        D3[typing]\n        D4[attention_allocation]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "neural_symbolic_kernels",
          "tensor_kernel",
          "evolutionary_optimizer",
          "typing",
          "attention_allocation",
          "time",
          "json",
          "numpy",
          "logging",
          "feedback_self_analysis",
          "cognitive_grammar",
          "threading",
          "meta_cognitive"
        ],
        "components": [
          "MockCognitiveLayer",
          "Phase5Demo",
          "main",
          "__init__",
          "get_operation_stats",
          "get_knowledge_stats",
          "get_economic_stats",
          "simulate_operation",
          "__init__",
          "initialize_cognitive_system",
          "demonstrate_evolutionary_optimization",
          "_create_demonstration_genomes",
          "demonstrate_recursive_metacognition",
          "demonstrate_feedback_driven_adaptation",
          "_simulate_cognitive_workload",
          "demonstrate_integration_with_existing_phases",
          "run_comprehensive_demo",
          "generate_demonstration_report"
        ],
        "timestamp": "2025-07-14T04:11:57.812136"
      },
      "phase5_demo_classes": {
        "module_name": "phase5_demo",
        "diagram_type": "class_diagram",
        "mermaid_content": "# phase5_demo - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class MockCognitiveLayer {\n        +methods()\n        +attributes\n    }\n\n    class Phase5Demo {\n        +methods()\n        +attributes\n    }\n\n    MockCognitiveLayer <|-- Phase5Demo\n```\n",
        "dependencies": [
          "neural_symbolic_kernels",
          "tensor_kernel",
          "evolutionary_optimizer",
          "typing",
          "attention_allocation",
          "time",
          "json",
          "numpy",
          "logging",
          "feedback_self_analysis",
          "cognitive_grammar",
          "threading",
          "meta_cognitive"
        ],
        "components": [
          "MockCognitiveLayer",
          "Phase5Demo"
        ],
        "timestamp": "2025-07-14T04:11:57.812178"
      },
      "phase4_tests": {
        "module_name": "phase4_tests",
        "diagram_type": "flowchart",
        "mermaid_content": "# phase4_tests - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[phase4_tests]\n\n    subgraph \"Classes\"\n        C0[Phase4TestBase]\n        C1[TestRestAPIEndpoints]\n        C2[TestWebSocketCommunication]\n        C3[TestUnity3DIntegration]\n        C4[TestROSIntegration]\n        C5[TestWebAgentIntegration]\n        C6[TestIntegrationScenarios]\n        C7[TestRealDataValidation]\n    end\n\n    M --> C0\n    M --> C1\n    M --> C2\n    M --> C3\n    M --> C4\n    M --> C5\n    M --> C6\n    M --> C7\n    subgraph \"Functions\"\n        F0[run_phase4_tests]\n        F1[setUpClass]\n        F3[tearDownClass]\n        F6[wait_for_server]\n        F7[setUp]\n        F8[test_health_check_endpoint]\n        F9[test_cognitive_synthesis_endpoint]\n        F10[test_task_creation_and_retrieval]\n        F11[test_embodiment_binding]\n        F12[test_cognitive_state_retrieval]\n        F13[test_mesh_state_propagation]\n        F14[setUp]\n        F15[test_websocket_connection]\n        F16[test_real_time_synthesis]\n        F17[setUp]\n        F18[test_unity3d_adapter_status]\n        F19[test_unity3d_protocol_communication]\n        F20[test_unity3d_action_execution]\n        F21[setUp]\n        F22[test_ros_adapter_status]\n        F23[test_ros_protocol_communication]\n        F24[test_ros_topic_publishing]\n        F25[setUp]\n        F26[test_web_dashboard_access]\n        F27[test_web_api_endpoints]\n        F28[test_javascript_sdk_serving]\n        F29[test_web_task_creation]\n        F30[test_multi_adapter_coordination]\n        F31[test_cross_adapter_task_flow]\n        F32[test_real_time_state_synchronization]\n        F33[test_neural_symbolic_synthesis_real_computation]\n        F34[test_distributed_mesh_real_performance]\n        F35[test_memory_usage_real_tracking]\n        F36[connect]\n        F37[synthesis_result]\n    end\n\n    M --> F0\n    M --> F1\n    M --> F3\n    M --> F6\n    M --> F7\n    M --> F8\n    M --> F9\n    M --> F10\n    M --> F11\n    M --> F12\n    M --> F13\n    M --> F14\n    M --> F15\n    M --> F16\n    M --> F17\n    M --> F18\n    M --> F19\n    M --> F20\n    M --> F21\n    M --> F22\n    M --> F23\n    M --> F24\n    M --> F25\n    M --> F26\n    M --> F27\n    M --> F28\n    M --> F29\n    M --> F30\n    M --> F31\n    M --> F32\n    M --> F33\n    M --> F34\n    M --> F35\n    M --> F36\n    M --> F37\n    subgraph \"Dependencies\"\n        D0[web_agent_adapter]\n        D1[unittest]\n        D2[socket]\n        D3[typing]\n        D4[ros_adapter]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "web_agent_adapter",
          "unittest",
          "socket",
          "typing",
          "ros_adapter",
          "phase4_api_server",
          "unity3d_adapter",
          "socketio",
          "time",
          "json",
          "numpy",
          "logging",
          "threading",
          "concurrent.futures",
          "websocket",
          "requests"
        ],
        "components": [
          "Phase4TestBase",
          "TestRestAPIEndpoints",
          "TestWebSocketCommunication",
          "TestUnity3DIntegration",
          "TestROSIntegration",
          "TestWebAgentIntegration",
          "TestIntegrationScenarios",
          "TestRealDataValidation",
          "run_phase4_tests",
          "setUpClass",
          "_find_free_port",
          "tearDownClass",
          "_start_test_servers",
          "_stop_test_servers",
          "wait_for_server",
          "setUp",
          "test_health_check_endpoint",
          "test_cognitive_synthesis_endpoint",
          "test_task_creation_and_retrieval",
          "test_embodiment_binding",
          "test_cognitive_state_retrieval",
          "test_mesh_state_propagation",
          "setUp",
          "test_websocket_connection",
          "test_real_time_synthesis",
          "setUp",
          "test_unity3d_adapter_status",
          "test_unity3d_protocol_communication",
          "test_unity3d_action_execution",
          "setUp",
          "test_ros_adapter_status",
          "test_ros_protocol_communication",
          "test_ros_topic_publishing",
          "setUp",
          "test_web_dashboard_access",
          "test_web_api_endpoints",
          "test_javascript_sdk_serving",
          "test_web_task_creation",
          "test_multi_adapter_coordination",
          "test_cross_adapter_task_flow",
          "test_real_time_state_synchronization",
          "test_neural_symbolic_synthesis_real_computation",
          "test_distributed_mesh_real_performance",
          "test_memory_usage_real_tracking",
          "connect",
          "synthesis_result"
        ],
        "timestamp": "2025-07-14T04:11:57.812265"
      },
      "phase4_tests_classes": {
        "module_name": "phase4_tests",
        "diagram_type": "class_diagram",
        "mermaid_content": "# phase4_tests - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class Phase4TestBase {\n        +methods()\n        +attributes\n    }\n\n    class TestRestAPIEndpoints {\n        +methods()\n        +attributes\n    }\n\n    class TestWebSocketCommunication {\n        +methods()\n        +attributes\n    }\n\n    class TestUnity3DIntegration {\n        +methods()\n        +attributes\n    }\n\n    class TestROSIntegration {\n        +methods()\n        +attributes\n    }\n\n    class TestWebAgentIntegration {\n        +methods()\n        +attributes\n    }\n\n    class TestIntegrationScenarios {\n        +methods()\n        +attributes\n    }\n\n    class TestRealDataValidation {\n        +methods()\n        +attributes\n    }\n\n    Phase4TestBase <|-- TestRestAPIEndpoints\n    Phase4TestBase <|-- TestWebSocketCommunication\n    Phase4TestBase <|-- TestUnity3DIntegration\n    Phase4TestBase <|-- TestROSIntegration\n    Phase4TestBase <|-- TestWebAgentIntegration\n    Phase4TestBase <|-- TestIntegrationScenarios\n    Phase4TestBase <|-- TestRealDataValidation\n```\n",
        "dependencies": [
          "web_agent_adapter",
          "unittest",
          "socket",
          "typing",
          "ros_adapter",
          "phase4_api_server",
          "unity3d_adapter",
          "socketio",
          "time",
          "json",
          "numpy",
          "logging",
          "threading",
          "concurrent.futures",
          "websocket",
          "requests"
        ],
        "components": [
          "Phase4TestBase",
          "TestRestAPIEndpoints",
          "TestWebSocketCommunication",
          "TestUnity3DIntegration",
          "TestROSIntegration",
          "TestWebAgentIntegration",
          "TestIntegrationScenarios",
          "TestRealDataValidation"
        ],
        "timestamp": "2025-07-14T04:11:57.812306"
      },
      "ros_adapter": {
        "module_name": "ros_adapter",
        "diagram_type": "flowchart",
        "mermaid_content": "# ros_adapter - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[ros_adapter]\n\n    subgraph \"Classes\"\n        C0[ROSMessage]\n        C1[ROSService]\n        C2[ROSAction]\n        C3[ROSCognitiveAgent]\n        C4[ROSMessageTypes]\n        C5[ROSProtocol]\n        C6[ROSIntegrationAdapter]\n    end\n\n    M --> C0\n    M --> C1\n    M --> C2\n    M --> C3\n    M --> C4\n    M --> C5\n    M --> C6\n    subgraph \"Functions\"\n        F0[main]\n        F4[pack_message]\n        F5[unpack_message]\n        F7[start_server]\n        F8[stop_server]\n        F25[publish_topic]\n        F26[call_service]\n        F27[send_cognitive_update]\n        F28[get_agent_state]\n        F29[list_agents]\n        F30[get_system_state]\n        F31[get_status]\n        F32[connection_callback]\n    end\n\n    M --> F0\n    M --> F4\n    M --> F5\n    M --> F7\n    M --> F8\n    M --> F25\n    M --> F26\n    M --> F27\n    M --> F28\n    M --> F29\n    M --> F30\n    M --> F31\n    M --> F32\n    subgraph \"Dependencies\"\n        D0[struct]\n        D1[typing]\n        D2[socket]\n        D3[argparse]\n        D4[json]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "struct",
          "typing",
          "socket",
          "argparse",
          "json",
          "time",
          "numpy",
          "logging",
          "dataclasses",
          "threading",
          "concurrent.futures"
        ],
        "components": [
          "ROSMessage",
          "ROSService",
          "ROSAction",
          "ROSCognitiveAgent",
          "ROSMessageTypes",
          "ROSProtocol",
          "ROSIntegrationAdapter",
          "main",
          "__post_init__",
          "__post_init__",
          "__post_init__",
          "pack_message",
          "unpack_message",
          "__init__",
          "start_server",
          "stop_server",
          "_accept_connections",
          "_handle_ros_client",
          "_process_ros_message",
          "_handle_topic_publish",
          "_handle_topic_subscribe",
          "_handle_service_call",
          "_handle_action_goal",
          "_handle_agent_state_update",
          "_handle_ros_heartbeat",
          "_process_service_request",
          "_execute_ros_action",
          "_forward_message_to_connection",
          "_cleanup_ros_connection",
          "_monitor_ros_system",
          "_process_messages",
          "_send_message_to_ros",
          "publish_topic",
          "call_service",
          "send_cognitive_update",
          "get_agent_state",
          "list_agents",
          "get_system_state",
          "get_status",
          "connection_callback"
        ],
        "timestamp": "2025-07-14T04:11:57.812388"
      },
      "ros_adapter_classes": {
        "module_name": "ros_adapter",
        "diagram_type": "class_diagram",
        "mermaid_content": "# ros_adapter - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class ROSMessage {\n        +methods()\n        +attributes\n    }\n\n    class ROSService {\n        +methods()\n        +attributes\n    }\n\n    class ROSAction {\n        +methods()\n        +attributes\n    }\n\n    class ROSCognitiveAgent {\n        +methods()\n        +attributes\n    }\n\n    class ROSMessageTypes {\n        +methods()\n        +attributes\n    }\n\n    class ROSProtocol {\n        +methods()\n        +attributes\n    }\n\n    class ROSIntegrationAdapter {\n        +methods()\n        +attributes\n    }\n\n    ROSMessage <|-- ROSService\n    ROSMessage <|-- ROSAction\n    ROSMessage <|-- ROSCognitiveAgent\n    ROSMessage <|-- ROSMessageTypes\n    ROSMessage <|-- ROSProtocol\n    ROSMessage <|-- ROSIntegrationAdapter\n```\n",
        "dependencies": [
          "struct",
          "typing",
          "socket",
          "argparse",
          "json",
          "time",
          "numpy",
          "logging",
          "dataclasses",
          "threading",
          "concurrent.futures"
        ],
        "components": [
          "ROSMessage",
          "ROSService",
          "ROSAction",
          "ROSCognitiveAgent",
          "ROSMessageTypes",
          "ROSProtocol",
          "ROSIntegrationAdapter"
        ],
        "timestamp": "2025-07-14T04:11:57.812454"
      },
      "unity3d_adapter": {
        "module_name": "unity3d_adapter",
        "diagram_type": "flowchart",
        "mermaid_content": "# unity3d_adapter - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[unity3d_adapter]\n\n    subgraph \"Classes\"\n        C0[Unity3DTransform]\n        C1[Unity3DCognitiveAgent]\n        C2[Unity3DAction]\n        C3[Unity3DProtocol]\n        C4[Unity3DIntegrationAdapter]\n    end\n\n    M --> C0\n    M --> C1\n    M --> C2\n    M --> C3\n    M --> C4\n    subgraph \"Functions\"\n        F0[main]\n        F3[pack_message]\n        F4[unpack_message]\n        F6[start_server]\n        F7[stop_server]\n        F18[send_cognitive_state_update]\n        F19[execute_action]\n        F20[get_agent_state]\n        F21[list_agents]\n        F22[get_environment_state]\n        F23[update_agent_transform]\n        F24[get_status]\n    end\n\n    M --> F0\n    M --> F3\n    M --> F4\n    M --> F6\n    M --> F7\n    M --> F18\n    M --> F19\n    M --> F20\n    M --> F21\n    M --> F22\n    M --> F23\n    M --> F24\n    subgraph \"Dependencies\"\n        D0[struct]\n        D1[typing]\n        D2[socket]\n        D3[argparse]\n        D4[json]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "struct",
          "typing",
          "socket",
          "argparse",
          "json",
          "time",
          "numpy",
          "logging",
          "dataclasses",
          "threading",
          "concurrent.futures"
        ],
        "components": [
          "Unity3DTransform",
          "Unity3DCognitiveAgent",
          "Unity3DAction",
          "Unity3DProtocol",
          "Unity3DIntegrationAdapter",
          "main",
          "__post_init__",
          "__post_init__",
          "pack_message",
          "unpack_message",
          "__init__",
          "start_server",
          "stop_server",
          "_accept_connections",
          "_handle_client",
          "_process_unity_message",
          "_handle_agent_update",
          "_handle_action_response",
          "_handle_sensor_data",
          "_handle_heartbeat",
          "_cleanup_connection",
          "_process_messages",
          "_send_message_to_unity",
          "send_cognitive_state_update",
          "execute_action",
          "get_agent_state",
          "list_agents",
          "get_environment_state",
          "update_agent_transform",
          "get_status"
        ],
        "timestamp": "2025-07-14T04:11:57.812529"
      },
      "unity3d_adapter_classes": {
        "module_name": "unity3d_adapter",
        "diagram_type": "class_diagram",
        "mermaid_content": "# unity3d_adapter - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class Unity3DTransform {\n        +methods()\n        +attributes\n    }\n\n    class Unity3DCognitiveAgent {\n        +methods()\n        +attributes\n    }\n\n    class Unity3DAction {\n        +methods()\n        +attributes\n    }\n\n    class Unity3DProtocol {\n        +methods()\n        +attributes\n    }\n\n    class Unity3DIntegrationAdapter {\n        +methods()\n        +attributes\n    }\n\n    Unity3DTransform <|-- Unity3DCognitiveAgent\n    Unity3DTransform <|-- Unity3DAction\n    Unity3DTransform <|-- Unity3DProtocol\n    Unity3DTransform <|-- Unity3DIntegrationAdapter\n```\n",
        "dependencies": [
          "struct",
          "typing",
          "socket",
          "argparse",
          "json",
          "time",
          "numpy",
          "logging",
          "dataclasses",
          "threading",
          "concurrent.futures"
        ],
        "components": [
          "Unity3DTransform",
          "Unity3DCognitiveAgent",
          "Unity3DAction",
          "Unity3DProtocol",
          "Unity3DIntegrationAdapter"
        ],
        "timestamp": "2025-07-14T04:11:57.812576"
      },
      "phase4_api_server": {
        "module_name": "phase4_api_server",
        "diagram_type": "flowchart",
        "mermaid_content": "# phase4_api_server - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[phase4_api_server]\n\n    subgraph \"Classes\"\n        C0[CognitiveTask]\n        C1[EmbodimentBinding]\n        C2[CognitiveAPIServer]\n    end\n\n    M --> C0\n    M --> C1\n    M --> C2\n    subgraph \"Functions\"\n        F0[main]\n        F20[run]\n        F21[health_check]\n        F22[synthesize]\n        F23[create_task]\n        F24[get_task]\n        F25[get_cognitive_state]\n        F26[bind_embodiment]\n        F27[list_bindings]\n        F28[list_mesh_nodes]\n        F29[propagate_state]\n        F30[handle_connect]\n        F31[handle_disconnect]\n        F32[handle_join_room]\n        F33[handle_real_time_synthesis]\n        F34[handle_state_subscription]\n        F35[metrics_updater]\n        F36[heartbeat_monitor]\n    end\n\n    M --> F0\n    M --> F20\n    M --> F21\n    M --> F22\n    M --> F23\n    M --> F24\n    M --> F25\n    M --> F26\n    M --> F27\n    M --> F28\n    M --> F29\n    M --> F30\n    M --> F31\n    M --> F32\n    M --> F33\n    M --> F34\n    M --> F35\n    M --> F36\n    subgraph \"Dependencies\"\n        D0[neural_symbolic_kernels]\n        D1[psutil]\n        D2[futures]\n        D3[flask_socketio]\n        D4[dataclasses]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "neural_symbolic_kernels",
          "psutil",
          "concurrent.futures",
          "flask_socketio",
          "dataclasses",
          "typing",
          "argparse",
          "os",
          "json",
          "time",
          "sys",
          "numpy",
          "logging",
          "mesh_topology",
          "cognitive_grammar",
          "uuid",
          "threading",
          "flask"
        ],
        "components": [
          "CognitiveTask",
          "EmbodimentBinding",
          "CognitiveAPIServer",
          "main",
          "__post_init__",
          "__post_init__",
          "__init__",
          "_create_default_mesh_agents",
          "_setup_routes",
          "_setup_websocket_handlers",
          "_assign_task_to_agents",
          "_execute_task",
          "_execute_synthesis_task",
          "_execute_attention_task",
          "_execute_inference_task",
          "_execute_generic_task",
          "_initialize_embodiment_binding",
          "_setup_unity3d_binding",
          "_setup_ros_binding",
          "_setup_web_binding",
          "_propagate_cognitive_state",
          "_update_operations_per_second",
          "_start_background_services",
          "run",
          "health_check",
          "synthesize",
          "create_task",
          "get_task",
          "get_cognitive_state",
          "bind_embodiment",
          "list_bindings",
          "list_mesh_nodes",
          "propagate_state",
          "handle_connect",
          "handle_disconnect",
          "handle_join_room",
          "handle_real_time_synthesis",
          "handle_state_subscription",
          "metrics_updater",
          "heartbeat_monitor"
        ],
        "timestamp": "2025-07-14T04:11:57.812673"
      },
      "phase4_api_server_classes": {
        "module_name": "phase4_api_server",
        "diagram_type": "class_diagram",
        "mermaid_content": "# phase4_api_server - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class CognitiveTask {\n        +methods()\n        +attributes\n    }\n\n    class EmbodimentBinding {\n        +methods()\n        +attributes\n    }\n\n    class CognitiveAPIServer {\n        +methods()\n        +attributes\n    }\n\n    CognitiveTask <|-- EmbodimentBinding\n    CognitiveTask <|-- CognitiveAPIServer\n```\n",
        "dependencies": [
          "neural_symbolic_kernels",
          "psutil",
          "concurrent.futures",
          "flask_socketio",
          "dataclasses",
          "typing",
          "argparse",
          "os",
          "json",
          "time",
          "sys",
          "numpy",
          "logging",
          "mesh_topology",
          "cognitive_grammar",
          "uuid",
          "threading",
          "flask"
        ],
        "components": [
          "CognitiveTask",
          "EmbodimentBinding",
          "CognitiveAPIServer"
        ],
        "timestamp": "2025-07-14T04:11:57.812714"
      },
      "phase4_demo": {
        "module_name": "phase4_demo",
        "diagram_type": "flowchart",
        "mermaid_content": "# phase4_demo - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[phase4_demo]\n\n    subgraph \"Classes\"\n        C0[Phase4Demo]\n    end\n\n    M --> C0\n    subgraph \"Functions\"\n        F0[main]\n        F2[initialize_components]\n        F3[demonstrate_neural_symbolic_synthesis]\n        F4[demonstrate_embodiment_integration]\n        F5[demonstrate_distributed_orchestration]\n        F9[demonstrate_real_time_state_propagation]\n        F10[run_comprehensive_demo]\n        F11[run_interactive_demo]\n    end\n\n    M --> F0\n    M --> F2\n    M --> F3\n    M --> F4\n    M --> F5\n    M --> F9\n    M --> F10\n    M --> F11\n    subgraph \"Dependencies\"\n        D0[neural_symbolic_kernels]\n        D1[web_agent_adapter]\n        D2[typing]\n        D3[ros_adapter]\n        D4[argparse]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "neural_symbolic_kernels",
          "web_agent_adapter",
          "typing",
          "ros_adapter",
          "argparse",
          "phase4_api_server",
          "unity3d_adapter",
          "time",
          "json",
          "numpy",
          "logging",
          "threading"
        ],
        "components": [
          "Phase4Demo",
          "main",
          "__init__",
          "initialize_components",
          "demonstrate_neural_symbolic_synthesis",
          "demonstrate_embodiment_integration",
          "demonstrate_distributed_orchestration",
          "_execute_perception_task",
          "_execute_spatial_task",
          "_execute_language_task",
          "demonstrate_real_time_state_propagation",
          "run_comprehensive_demo",
          "run_interactive_demo"
        ],
        "timestamp": "2025-07-14T04:11:57.812780"
      },
      "phase4_demo_classes": {
        "module_name": "phase4_demo",
        "diagram_type": "class_diagram",
        "mermaid_content": "# phase4_demo - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class Phase4Demo {\n        +methods()\n        +attributes\n    }\n\n```\n",
        "dependencies": [
          "neural_symbolic_kernels",
          "web_agent_adapter",
          "typing",
          "ros_adapter",
          "argparse",
          "phase4_api_server",
          "unity3d_adapter",
          "time",
          "json",
          "numpy",
          "logging",
          "threading"
        ],
        "components": [
          "Phase4Demo"
        ],
        "timestamp": "2025-07-14T04:11:57.812820"
      },
      "benchmarking": {
        "module_name": "benchmarking",
        "diagram_type": "flowchart",
        "mermaid_content": "# benchmarking - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[benchmarking]\n\n    subgraph \"Classes\"\n        C0[BenchmarkType]\n        C1[MetricType]\n        C2[BenchmarkResult]\n        C3[BenchmarkConfig]\n        C4[DistributedCognitiveBenchmark]\n    end\n\n    M --> C0\n    M --> C1\n    M --> C2\n    M --> C3\n    M --> C4\n    subgraph \"Functions\"\n        F1[success_rate]\n        F4[setup_test_environment]\n        F5[teardown_test_environment]\n        F6[benchmark_attention_allocation]\n        F8[benchmark_resource_allocation]\n        F10[benchmark_mesh_communication]\n        F12[run_comprehensive_benchmark]\n        F16[generate_benchmark_report]\n        F17[scheme_benchmark_spec]\n    end\n\n    M --> F1\n    M --> F4\n    M --> F5\n    M --> F6\n    M --> F8\n    M --> F10\n    M --> F12\n    M --> F16\n    M --> F17\n    subgraph \"Dependencies\"\n        D0[resource_kernel]\n        D1[enum]\n        D2[base64]\n        D3[typing]\n        D4[statistics]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "resource_kernel",
          "enum",
          "base64",
          "typing",
          "statistics",
          "matplotlib.pyplot",
          "time",
          "json",
          "mesh_topology",
          "numpy",
          "attention_allocation",
          "collections",
          "dataclasses",
          "threading",
          "concurrent.futures",
          "io"
        ],
        "components": [
          "BenchmarkType",
          "MetricType",
          "BenchmarkResult",
          "BenchmarkConfig",
          "DistributedCognitiveBenchmark",
          "__post_init__",
          "success_rate",
          "__post_init__",
          "__init__",
          "setup_test_environment",
          "teardown_test_environment",
          "benchmark_attention_allocation",
          "_attention_allocation_task",
          "benchmark_resource_allocation",
          "_resource_allocation_task",
          "benchmark_mesh_communication",
          "_mesh_communication_task",
          "run_comprehensive_benchmark",
          "_analyze_scalability",
          "_calculate_mesh_efficiency",
          "_calculate_average_utilization",
          "generate_benchmark_report",
          "scheme_benchmark_spec"
        ],
        "timestamp": "2025-07-14T04:11:57.812887"
      },
      "benchmarking_classes": {
        "module_name": "benchmarking",
        "diagram_type": "class_diagram",
        "mermaid_content": "# benchmarking - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class BenchmarkType {\n        +methods()\n        +attributes\n    }\n\n    class MetricType {\n        +methods()\n        +attributes\n    }\n\n    class BenchmarkResult {\n        +methods()\n        +attributes\n    }\n\n    class BenchmarkConfig {\n        +methods()\n        +attributes\n    }\n\n    class DistributedCognitiveBenchmark {\n        +methods()\n        +attributes\n    }\n\n    BenchmarkType <|-- MetricType\n    BenchmarkType <|-- BenchmarkResult\n    BenchmarkType <|-- BenchmarkConfig\n    BenchmarkType <|-- DistributedCognitiveBenchmark\n```\n",
        "dependencies": [
          "resource_kernel",
          "enum",
          "base64",
          "typing",
          "statistics",
          "matplotlib.pyplot",
          "time",
          "json",
          "mesh_topology",
          "numpy",
          "attention_allocation",
          "collections",
          "dataclasses",
          "threading",
          "concurrent.futures",
          "io"
        ],
        "components": [
          "BenchmarkType",
          "MetricType",
          "BenchmarkResult",
          "BenchmarkConfig",
          "DistributedCognitiveBenchmark"
        ],
        "timestamp": "2025-07-14T04:11:57.812930"
      },
      "standalone_phase3_test": {
        "module_name": "standalone_phase3_test",
        "diagram_type": "flowchart",
        "mermaid_content": "# standalone_phase3_test - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[standalone_phase3_test]\n\n    subgraph \"Functions\"\n        F0[test_neural_symbolic_kernels]\n        F1[test_neural_symbolic_synthesizer]\n        F2[test_benchmarking_system]\n        F3[test_performance_characteristics]\n        F4[run_comprehensive_test]\n        F5[count_tests]\n        F6[test_operation]\n    end\n\n    M --> F0\n    M --> F1\n    M --> F2\n    M --> F3\n    M --> F4\n    M --> F5\n    M --> F6\n    subgraph \"Dependencies\"\n        D0[neural_symbolic_kernels]\n        D1[os]\n        D2[time]\n        D3[sys]\n        D4[json]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "neural_symbolic_kernels",
          "os",
          "time",
          "sys",
          "json",
          "numpy",
          "pathlib",
          "tensor_benchmarking"
        ],
        "components": [
          "test_neural_symbolic_kernels",
          "test_neural_symbolic_synthesizer",
          "test_benchmarking_system",
          "test_performance_characteristics",
          "run_comprehensive_test",
          "count_tests",
          "test_operation"
        ],
        "timestamp": "2025-07-14T04:11:57.812991"
      },
      "phase2_acceptance_test": {
        "module_name": "phase2_acceptance_test",
        "diagram_type": "flowchart",
        "mermaid_content": "# phase2_acceptance_test - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[phase2_acceptance_test]\n\n    subgraph \"Classes\"\n        C0[Phase2TestSuite]\n    end\n\n    M --> C0\n    subgraph \"Functions\"\n        F0[main]\n        F2[log_test]\n        F3[test_resource_kernel_basic_functionality]\n        F4[test_resource_kernel_mesh_integration]\n        F5[test_attention_scheduler_functionality]\n        F6[test_enhanced_ecan_attention]\n        F7[test_integrated_cognitive_scenario]\n        F8[test_performance_benchmarks]\n        F9[test_scheme_specifications]\n        F10[run_all_tests]\n    end\n\n    M --> F0\n    M --> F2\n    M --> F3\n    M --> F4\n    M --> F5\n    M --> F6\n    M --> F7\n    M --> F8\n    M --> F9\n    M --> F10\n    subgraph \"Dependencies\"\n        D0[resource_kernel]\n        D1[typing]\n        D2[attention_allocation]\n        D3[time]\n        D4[sys]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "resource_kernel",
          "typing",
          "attention_allocation",
          "time",
          "sys",
          "numpy",
          "cognitive_grammar",
          "dataclasses"
        ],
        "components": [
          "Phase2TestSuite",
          "main",
          "__init__",
          "log_test",
          "test_resource_kernel_basic_functionality",
          "test_resource_kernel_mesh_integration",
          "test_attention_scheduler_functionality",
          "test_enhanced_ecan_attention",
          "test_integrated_cognitive_scenario",
          "test_performance_benchmarks",
          "test_scheme_specifications",
          "run_all_tests"
        ],
        "timestamp": "2025-07-14T04:11:57.813052"
      },
      "phase2_acceptance_test_classes": {
        "module_name": "phase2_acceptance_test",
        "diagram_type": "class_diagram",
        "mermaid_content": "# phase2_acceptance_test - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class Phase2TestSuite {\n        +methods()\n        +attributes\n    }\n\n```\n",
        "dependencies": [
          "resource_kernel",
          "typing",
          "attention_allocation",
          "time",
          "sys",
          "numpy",
          "cognitive_grammar",
          "dataclasses"
        ],
        "components": [
          "Phase2TestSuite"
        ],
        "timestamp": "2025-07-14T04:11:57.813103"
      },
      "resource_kernel": {
        "module_name": "resource_kernel",
        "diagram_type": "flowchart",
        "mermaid_content": "# resource_kernel - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[resource_kernel]\n\n    subgraph \"Classes\"\n        C0[ResourceType]\n        C1[ResourcePriority]\n        C2[AllocationStrategy]\n        C3[ResourceQuota]\n        C4[ResourceRequest]\n        C5[ResourceAllocation]\n        C6[ResourcePool]\n        C7[ResourceKernel]\n        C8[AttentionScheduler]\n        C9[DistributedResourceManager]\n    end\n\n    M --> C0\n    M --> C1\n    M --> C2\n    M --> C3\n    M --> C4\n    M --> C5\n    M --> C6\n    M --> C7\n    M --> C8\n    M --> C9\n    subgraph \"Functions\"\n        F0[available]\n        F2[is_expired]\n        F3[is_expired]\n        F8[request_resource]\n        F11[release_resource]\n        F12[process_pending_requests]\n        F13[cleanup_expired_allocations]\n        F14[get_resource_utilization]\n        F15[get_performance_metrics]\n        F16[register_mesh_node]\n        F17[get_mesh_status]\n        F18[optimize_allocations]\n        F19[scheme_resource_spec]\n        F21[schedule_attention]\n        F22[schedule_attention_cycle]\n        F23[process_attention_queue]\n        F24[complete_attention_cycle]\n        F25[get_scheduler_stats]\n        F26[get_attention_status]\n        F28[register_resource_kernel]\n        F29[unregister_resource_kernel]\n        F31[find_best_provider]\n        F32[distributed_resource_request]\n        F33[rebalance_resources]\n        F34[get_global_resource_stats]\n        F35[benchmark_resource_allocation]\n        F36[scheme_distributed_spec]\n        F37[scheme_resource_spec]\n    end\n\n    M --> F0\n    M --> F2\n    M --> F3\n    M --> F8\n    M --> F11\n    M --> F12\n    M --> F13\n    M --> F14\n    M --> F15\n    M --> F16\n    M --> F17\n    M --> F18\n    M --> F19\n    M --> F21\n    M --> F22\n    M --> F23\n    M --> F24\n    M --> F25\n    M --> F26\n    M --> F28\n    M --> F29\n    M --> F31\n    M --> F32\n    M --> F33\n    M --> F34\n    M --> F35\n    M --> F36\n    M --> F37\n    subgraph \"Dependencies\"\n        D0[enum]\n        D1[typing]\n        D2[time]\n        D3[json]\n        D4[numpy]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "enum",
          "typing",
          "time",
          "json",
          "numpy",
          "collections",
          "dataclasses",
          "threading",
          "concurrent.futures"
        ],
        "components": [
          "ResourceType",
          "ResourcePriority",
          "AllocationStrategy",
          "ResourceQuota",
          "ResourceRequest",
          "ResourceAllocation",
          "ResourcePool",
          "ResourceKernel",
          "AttentionScheduler",
          "DistributedResourceManager",
          "available",
          "__post_init__",
          "is_expired",
          "is_expired",
          "__post_init__",
          "__init__",
          "_initialize_resource_pools",
          "_initialize_quotas",
          "request_resource",
          "_try_allocate_request",
          "_calculate_resource_cost",
          "release_resource",
          "process_pending_requests",
          "cleanup_expired_allocations",
          "get_resource_utilization",
          "get_performance_metrics",
          "register_mesh_node",
          "get_mesh_status",
          "optimize_allocations",
          "scheme_resource_spec",
          "__init__",
          "schedule_attention",
          "schedule_attention_cycle",
          "process_attention_queue",
          "complete_attention_cycle",
          "get_scheduler_stats",
          "get_attention_status",
          "__init__",
          "register_resource_kernel",
          "unregister_resource_kernel",
          "_update_global_view",
          "find_best_provider",
          "distributed_resource_request",
          "rebalance_resources",
          "get_global_resource_stats",
          "benchmark_resource_allocation",
          "scheme_distributed_spec",
          "scheme_resource_spec"
        ],
        "timestamp": "2025-07-14T04:11:57.813200"
      },
      "resource_kernel_classes": {
        "module_name": "resource_kernel",
        "diagram_type": "class_diagram",
        "mermaid_content": "# resource_kernel - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class ResourceType {\n        +methods()\n        +attributes\n    }\n\n    class ResourcePriority {\n        +methods()\n        +attributes\n    }\n\n    class AllocationStrategy {\n        +methods()\n        +attributes\n    }\n\n    class ResourceQuota {\n        +methods()\n        +attributes\n    }\n\n    class ResourceRequest {\n        +methods()\n        +attributes\n    }\n\n    class ResourceAllocation {\n        +methods()\n        +attributes\n    }\n\n    class ResourcePool {\n        +methods()\n        +attributes\n    }\n\n    class ResourceKernel {\n        +methods()\n        +attributes\n    }\n\n    class AttentionScheduler {\n        +methods()\n        +attributes\n    }\n\n    class DistributedResourceManager {\n        +methods()\n        +attributes\n    }\n\n    ResourceType <|-- ResourcePriority\n    ResourceType <|-- AllocationStrategy\n    ResourceType <|-- ResourceQuota\n    ResourceType <|-- ResourceRequest\n    ResourceType <|-- ResourceAllocation\n    ResourceType <|-- ResourcePool\n    ResourceType <|-- ResourceKernel\n    ResourceType <|-- AttentionScheduler\n    ResourceType <|-- DistributedResourceManager\n```\n",
        "dependencies": [
          "enum",
          "typing",
          "time",
          "json",
          "numpy",
          "collections",
          "dataclasses",
          "threading",
          "concurrent.futures"
        ],
        "components": [
          "ResourceType",
          "ResourcePriority",
          "AllocationStrategy",
          "ResourceQuota",
          "ResourceRequest",
          "ResourceAllocation",
          "ResourcePool",
          "ResourceKernel",
          "AttentionScheduler",
          "DistributedResourceManager"
        ],
        "timestamp": "2025-07-14T04:11:57.813246"
      },
      "phase5_tests": {
        "module_name": "phase5_tests",
        "diagram_type": "flowchart",
        "mermaid_content": "# phase5_tests - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[phase5_tests]\n\n    subgraph \"Classes\"\n        C0[TestEvolutionaryOptimizer]\n        C1[TestFeedbackDrivenSelfAnalysis]\n        C2[TestIntegration]\n        C3[TestRealDataValidation]\n        C4[Phase5TestSuite]\n    end\n\n    M --> C0\n    M --> C1\n    M --> C2\n    M --> C3\n    M --> C4\n    subgraph \"Functions\"\n        F0[main]\n        F1[setUp]\n        F2[test_genome_creation_and_validation]\n        F3[test_fitness_evaluator]\n        F4[test_genetic_operators]\n        F5[test_selection_strategies]\n        F6[test_evolution_process]\n        F7[setUp]\n        F8[test_performance_analyzer]\n        F9[test_pattern_recognizer]\n        F10[test_recursive_self_analyzer]\n        F11[test_feedback_signal_processing]\n        F12[test_continuous_analysis]\n        F13[test_evolutionary_optimization_trigger]\n        F14[setUp]\n        F15[test_meta_cognitive_integration]\n        F16[test_feedback_meta_cognitive_integration]\n        F17[test_evolutionary_meta_cognitive_integration]\n        F18[test_end_to_end_workflow]\n        F19[test_evolutionary_algorithms_are_real]\n        F20[test_fitness_evaluation_is_real]\n        F21[test_feedback_analysis_uses_real_data]\n        F22[run_all_tests]\n    end\n\n    M --> F0\n    M --> F1\n    M --> F2\n    M --> F3\n    M --> F4\n    M --> F5\n    M --> F6\n    M --> F7\n    M --> F8\n    M --> F9\n    M --> F10\n    M --> F11\n    M --> F12\n    M --> F13\n    M --> F14\n    M --> F15\n    M --> F16\n    M --> F17\n    M --> F18\n    M --> F19\n    M --> F20\n    M --> F21\n    M --> F22\n    subgraph \"Dependencies\"\n        D0[mock]\n        D1[unittest]\n        D2[typing]\n        D3[evolutionary_optimizer]\n        D4[time]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "unittest.mock",
          "unittest",
          "typing",
          "evolutionary_optimizer",
          "time",
          "json",
          "numpy",
          "feedback_self_analysis",
          "tempfile",
          "threading",
          "meta_cognitive"
        ],
        "components": [
          "TestEvolutionaryOptimizer",
          "TestFeedbackDrivenSelfAnalysis",
          "TestIntegration",
          "TestRealDataValidation",
          "Phase5TestSuite",
          "main",
          "setUp",
          "test_genome_creation_and_validation",
          "test_fitness_evaluator",
          "test_genetic_operators",
          "test_selection_strategies",
          "test_evolution_process",
          "setUp",
          "test_performance_analyzer",
          "test_pattern_recognizer",
          "test_recursive_self_analyzer",
          "test_feedback_signal_processing",
          "test_continuous_analysis",
          "test_evolutionary_optimization_trigger",
          "setUp",
          "test_meta_cognitive_integration",
          "test_feedback_meta_cognitive_integration",
          "test_evolutionary_meta_cognitive_integration",
          "test_end_to_end_workflow",
          "test_evolutionary_algorithms_are_real",
          "test_fitness_evaluation_is_real",
          "test_feedback_analysis_uses_real_data",
          "run_all_tests"
        ],
        "timestamp": "2025-07-14T04:11:57.813328"
      },
      "phase5_tests_classes": {
        "module_name": "phase5_tests",
        "diagram_type": "class_diagram",
        "mermaid_content": "# phase5_tests - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class TestEvolutionaryOptimizer {\n        +methods()\n        +attributes\n    }\n\n    class TestFeedbackDrivenSelfAnalysis {\n        +methods()\n        +attributes\n    }\n\n    class TestIntegration {\n        +methods()\n        +attributes\n    }\n\n    class TestRealDataValidation {\n        +methods()\n        +attributes\n    }\n\n    class Phase5TestSuite {\n        +methods()\n        +attributes\n    }\n\n    TestEvolutionaryOptimizer <|-- TestFeedbackDrivenSelfAnalysis\n    TestEvolutionaryOptimizer <|-- TestIntegration\n    TestEvolutionaryOptimizer <|-- TestRealDataValidation\n    TestEvolutionaryOptimizer <|-- Phase5TestSuite\n```\n",
        "dependencies": [
          "unittest.mock",
          "unittest",
          "typing",
          "evolutionary_optimizer",
          "time",
          "json",
          "numpy",
          "feedback_self_analysis",
          "tempfile",
          "threading",
          "meta_cognitive"
        ],
        "components": [
          "TestEvolutionaryOptimizer",
          "TestFeedbackDrivenSelfAnalysis",
          "TestIntegration",
          "TestRealDataValidation",
          "Phase5TestSuite"
        ],
        "timestamp": "2025-07-14T04:11:57.813375"
      },
      "feedback_self_analysis": {
        "module_name": "feedback_self_analysis",
        "diagram_type": "flowchart",
        "mermaid_content": "# feedback_self_analysis - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[feedback_self_analysis]\n\n    subgraph \"Classes\"\n        C0[FeedbackType]\n        C1[AnalysisDepth]\n        C2[FeedbackSignal]\n        C3[AnalysisReport]\n        C4[PerformanceAnalyzer]\n        C5[PatternRecognizer]\n        C6[RecursiveSelfAnalyzer]\n        C7[FeedbackDrivenSelfAnalysis]\n    end\n\n    M --> C0\n    M --> C1\n    M --> C2\n    M --> C3\n    M --> C4\n    M --> C5\n    M --> C6\n    M --> C7\n    subgraph \"Functions\"\n        F3[update_metrics]\n        F4[analyze_performance_trends]\n        F10[analyze_correlation_patterns]\n        F14[perform_recursive_analysis]\n        F27[start_continuous_analysis]\n        F28[stop_continuous_analysis]\n        F35[perform_deep_analysis]\n        F36[get_feedback_summary]\n    end\n\n    M --> F3\n    M --> F4\n    M --> F10\n    M --> F14\n    M --> F27\n    M --> F28\n    M --> F35\n    M --> F36\n    subgraph \"Dependencies\"\n        D0[enum]\n        D1[evolutionary_optimizer]\n        D2[typing]\n        D3[queue]\n        D4[time]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "enum",
          "evolutionary_optimizer",
          "typing",
          "queue",
          "time",
          "json",
          "numpy",
          "collections",
          "dataclasses",
          "threading",
          "meta_cognitive"
        ],
        "components": [
          "FeedbackType",
          "AnalysisDepth",
          "FeedbackSignal",
          "AnalysisReport",
          "PerformanceAnalyzer",
          "PatternRecognizer",
          "RecursiveSelfAnalyzer",
          "FeedbackDrivenSelfAnalysis",
          "__post_init__",
          "__post_init__",
          "__init__",
          "update_metrics",
          "analyze_performance_trends",
          "_detect_degradation",
          "_detect_inefficiency",
          "_detect_optimization_opportunity",
          "_infer_source_layer",
          "__init__",
          "analyze_correlation_patterns",
          "_group_signals_by_correlation",
          "_create_correlation_signal",
          "__init__",
          "perform_recursive_analysis",
          "_perform_analysis_at_depth",
          "_surface_analysis",
          "_intermediate_analysis",
          "_deep_analysis",
          "_analyze_analysis_process",
          "_analyze_stability",
          "_create_shallow_report",
          "_calculate_health_score",
          "_generate_recommendations",
          "_predict_outcomes",
          "_calculate_confidence",
          "__init__",
          "start_continuous_analysis",
          "stop_continuous_analysis",
          "_continuous_analysis_loop",
          "_process_feedback_signals",
          "_trigger_evolutionary_optimization",
          "_extract_current_configuration",
          "_config_to_genome",
          "_apply_genome_configuration",
          "perform_deep_analysis",
          "get_feedback_summary"
        ],
        "timestamp": "2025-07-14T04:11:57.813454"
      },
      "feedback_self_analysis_classes": {
        "module_name": "feedback_self_analysis",
        "diagram_type": "class_diagram",
        "mermaid_content": "# feedback_self_analysis - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class FeedbackType {\n        +methods()\n        +attributes\n    }\n\n    class AnalysisDepth {\n        +methods()\n        +attributes\n    }\n\n    class FeedbackSignal {\n        +methods()\n        +attributes\n    }\n\n    class AnalysisReport {\n        +methods()\n        +attributes\n    }\n\n    class PerformanceAnalyzer {\n        +methods()\n        +attributes\n    }\n\n    class PatternRecognizer {\n        +methods()\n        +attributes\n    }\n\n    class RecursiveSelfAnalyzer {\n        +methods()\n        +attributes\n    }\n\n    class FeedbackDrivenSelfAnalysis {\n        +methods()\n        +attributes\n    }\n\n    FeedbackType <|-- AnalysisDepth\n    FeedbackType <|-- FeedbackSignal\n    FeedbackType <|-- AnalysisReport\n    FeedbackType <|-- PerformanceAnalyzer\n    FeedbackType <|-- PatternRecognizer\n    FeedbackType <|-- RecursiveSelfAnalyzer\n    FeedbackType <|-- FeedbackDrivenSelfAnalysis\n```\n",
        "dependencies": [
          "enum",
          "evolutionary_optimizer",
          "typing",
          "queue",
          "time",
          "json",
          "numpy",
          "collections",
          "dataclasses",
          "threading",
          "meta_cognitive"
        ],
        "components": [
          "FeedbackType",
          "AnalysisDepth",
          "FeedbackSignal",
          "AnalysisReport",
          "PerformanceAnalyzer",
          "PatternRecognizer",
          "RecursiveSelfAnalyzer",
          "FeedbackDrivenSelfAnalysis"
        ],
        "timestamp": "2025-07-14T04:11:57.813527"
      },
      "pattern_service": {
        "module_name": "pattern_service",
        "diagram_type": "flowchart",
        "mermaid_content": "# pattern_service - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[pattern_service]\n\n    subgraph \"Classes\"\n        C0[PatternHTTPHandler]\n        C1[PatternService]\n    end\n\n    M --> C0\n    M --> C1\n    subgraph \"Functions\"\n        F0[main]\n        F1[do_POST]\n        F2[do_GET]\n        F3[do_DELETE]\n        F16[start]\n        F17[stop]\n        F18[get_pattern_matcher]\n        F19[is_running]\n    end\n\n    M --> F0\n    M --> F1\n    M --> F2\n    M --> F3\n    M --> F16\n    M --> F17\n    M --> F18\n    M --> F19\n    subgraph \"Dependencies\"\n        D0[typing]\n        D1[server]\n        D2[parse]\n        D3[json]\n        D4[sys]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "typing",
          "http.server",
          "urllib.parse",
          "json",
          "sys",
          "os",
          "cognitive_grammar",
          "threading"
        ],
        "components": [
          "PatternHTTPHandler",
          "PatternService",
          "main",
          "do_POST",
          "do_GET",
          "do_DELETE",
          "_handle_define_pattern",
          "_handle_match_pattern",
          "_handle_multi_pattern_match",
          "_handle_generate_scheme_pattern",
          "_handle_list_patterns",
          "_handle_get_pattern",
          "_handle_delete_pattern",
          "_handle_health_check",
          "_handle_get_stats",
          "_send_json_response",
          "_send_error",
          "__init__",
          "start",
          "stop",
          "get_pattern_matcher",
          "is_running"
        ],
        "timestamp": "2025-07-14T04:11:57.813598"
      },
      "pattern_service_classes": {
        "module_name": "pattern_service",
        "diagram_type": "class_diagram",
        "mermaid_content": "# pattern_service - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class PatternHTTPHandler {\n        +methods()\n        +attributes\n    }\n\n    class PatternService {\n        +methods()\n        +attributes\n    }\n\n    PatternHTTPHandler <|-- PatternService\n```\n",
        "dependencies": [
          "typing",
          "http.server",
          "urllib.parse",
          "json",
          "sys",
          "os",
          "cognitive_grammar",
          "threading"
        ],
        "components": [
          "PatternHTTPHandler",
          "PatternService"
        ],
        "timestamp": "2025-07-14T04:11:57.813670"
      },
      "pln_service": {
        "module_name": "pln_service",
        "diagram_type": "flowchart",
        "mermaid_content": "# pln_service - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[pln_service]\n\n    subgraph \"Classes\"\n        C0[PLNHTTPHandler]\n        C1[PLNService]\n    end\n\n    M --> C0\n    M --> C1\n    subgraph \"Functions\"\n        F0[main]\n        F1[do_POST]\n        F2[do_GET]\n        F12[start]\n        F13[stop]\n        F14[get_pln]\n        F15[is_running]\n    end\n\n    M --> F0\n    M --> F1\n    M --> F2\n    M --> F12\n    M --> F13\n    M --> F14\n    M --> F15\n    subgraph \"Dependencies\"\n        D0[typing]\n        D1[server]\n        D2[parse]\n        D3[json]\n        D4[sys]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "typing",
          "http.server",
          "urllib.parse",
          "json",
          "sys",
          "os",
          "cognitive_grammar",
          "threading"
        ],
        "components": [
          "PLNHTTPHandler",
          "PLNService",
          "main",
          "do_POST",
          "do_GET",
          "_handle_deduction",
          "_handle_induction",
          "_handle_abduction",
          "_handle_inference_chain",
          "_handle_health_check",
          "_handle_get_stats",
          "_send_json_response",
          "_send_error",
          "__init__",
          "start",
          "stop",
          "get_pln",
          "is_running"
        ],
        "timestamp": "2025-07-14T04:11:57.813740"
      },
      "pln_service_classes": {
        "module_name": "pln_service",
        "diagram_type": "class_diagram",
        "mermaid_content": "# pln_service - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class PLNHTTPHandler {\n        +methods()\n        +attributes\n    }\n\n    class PLNService {\n        +methods()\n        +attributes\n    }\n\n    PLNHTTPHandler <|-- PLNService\n```\n",
        "dependencies": [
          "typing",
          "http.server",
          "urllib.parse",
          "json",
          "sys",
          "os",
          "cognitive_grammar",
          "threading"
        ],
        "components": [
          "PLNHTTPHandler",
          "PLNService"
        ],
        "timestamp": "2025-07-14T04:11:57.813787"
      },
      "ko6ml_translator": {
        "module_name": "ko6ml_translator",
        "diagram_type": "flowchart",
        "mermaid_content": "# ko6ml_translator - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[ko6ml_translator]\n\n    subgraph \"Classes\"\n        C0[Ko6mlPrimitive]\n        C1[Ko6mlExpression]\n        C2[AtomSpacePattern]\n        C3[Ko6mlTranslator]\n    end\n\n    M --> C0\n    M --> C1\n    M --> C2\n    M --> C3\n    subgraph \"Functions\"\n        F2[ko6ml_to_atomspace]\n        F3[atomspace_to_ko6ml]\n        F4[translate_pattern]\n        F5[atomspace_pattern_to_ko6ml]\n        F6[verify_round_trip]\n        F12[get_translation_stats]\n        F13[generate_scheme_translation]\n    end\n\n    M --> F2\n    M --> F3\n    M --> F4\n    M --> F5\n    M --> F6\n    M --> F12\n    M --> F13\n    subgraph \"Dependencies\"\n        D0[enum]\n        D1[typing]\n        D2[os]\n        D3[json]\n        D4[sys]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "enum",
          "typing",
          "os",
          "json",
          "sys",
          "cognitive_grammar",
          "dataclasses"
        ],
        "components": [
          "Ko6mlPrimitive",
          "Ko6mlExpression",
          "AtomSpacePattern",
          "Ko6mlTranslator",
          "__init__",
          "_initialize_translation_rules",
          "ko6ml_to_atomspace",
          "atomspace_to_ko6ml",
          "translate_pattern",
          "atomspace_pattern_to_ko6ml",
          "verify_round_trip",
          "_extract_truth_value",
          "_atom_type_to_ko6ml",
          "_link_type_to_relation",
          "_process_parameters",
          "_extract_parameters",
          "get_translation_stats",
          "generate_scheme_translation"
        ],
        "timestamp": "2025-07-14T04:11:57.813853"
      },
      "ko6ml_translator_classes": {
        "module_name": "ko6ml_translator",
        "diagram_type": "class_diagram",
        "mermaid_content": "# ko6ml_translator - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class Ko6mlPrimitive {\n        +methods()\n        +attributes\n    }\n\n    class Ko6mlExpression {\n        +methods()\n        +attributes\n    }\n\n    class AtomSpacePattern {\n        +methods()\n        +attributes\n    }\n\n    class Ko6mlTranslator {\n        +methods()\n        +attributes\n    }\n\n    Ko6mlPrimitive <|-- Ko6mlExpression\n    Ko6mlPrimitive <|-- AtomSpacePattern\n    Ko6mlPrimitive <|-- Ko6mlTranslator\n```\n",
        "dependencies": [
          "enum",
          "typing",
          "os",
          "json",
          "sys",
          "cognitive_grammar",
          "dataclasses"
        ],
        "components": [
          "Ko6mlPrimitive",
          "Ko6mlExpression",
          "AtomSpacePattern",
          "Ko6mlTranslator"
        ],
        "timestamp": "2025-07-14T04:11:57.813896"
      },
      "atomspace_service": {
        "module_name": "atomspace_service",
        "diagram_type": "flowchart",
        "mermaid_content": "# atomspace_service - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[atomspace_service]\n\n    subgraph \"Classes\"\n        C0[AtomSpaceHTTPHandler]\n        C1[AtomSpaceService]\n    end\n\n    M --> C0\n    M --> C1\n    subgraph \"Functions\"\n        F0[main]\n        F1[do_GET]\n        F2[do_POST]\n        F17[start]\n        F18[stop]\n        F19[get_atomspace]\n        F20[is_running]\n    end\n\n    M --> F0\n    M --> F1\n    M --> F2\n    M --> F17\n    M --> F18\n    M --> F19\n    M --> F20\n    subgraph \"Dependencies\"\n        D0[dataclasses]\n        D1[typing]\n        D2[server]\n        D3[parse]\n        D4[json]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "dataclasses",
          "typing",
          "http.server",
          "urllib.parse",
          "json",
          "sys",
          "os",
          "cognitive_grammar",
          "uuid",
          "threading"
        ],
        "components": [
          "AtomSpaceHTTPHandler",
          "AtomSpaceService",
          "main",
          "do_GET",
          "do_POST",
          "_handle_list_atoms",
          "_handle_create_atom",
          "_handle_get_atom",
          "_handle_list_links",
          "_handle_create_link",
          "_handle_get_link",
          "_handle_query_atoms",
          "_handle_get_stats",
          "_handle_health_check",
          "_atom_to_dict",
          "_link_to_dict",
          "_send_json_response",
          "_send_error",
          "__init__",
          "start",
          "stop",
          "get_atomspace",
          "is_running"
        ],
        "timestamp": "2025-07-14T04:11:57.813962"
      },
      "atomspace_service_classes": {
        "module_name": "atomspace_service",
        "diagram_type": "class_diagram",
        "mermaid_content": "# atomspace_service - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class AtomSpaceHTTPHandler {\n        +methods()\n        +attributes\n    }\n\n    class AtomSpaceService {\n        +methods()\n        +attributes\n    }\n\n    AtomSpaceHTTPHandler <|-- AtomSpaceService\n```\n",
        "dependencies": [
          "dataclasses",
          "typing",
          "http.server",
          "urllib.parse",
          "json",
          "sys",
          "os",
          "cognitive_grammar",
          "uuid",
          "threading"
        ],
        "components": [
          "AtomSpaceHTTPHandler",
          "AtomSpaceService"
        ],
        "timestamp": "2025-07-14T04:11:57.814003"
      },
      "cognitive_ros_client": {
        "module_name": "cognitive_ros_client",
        "diagram_type": "flowchart",
        "mermaid_content": "# cognitive_ros_client - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[cognitive_ros_client]\n\n    subgraph \"Classes\"\n        C0[CognitiveRosMessage]\n        C1[CognitiveRosClient]\n    end\n\n    M --> C0\n    M --> C1\n    subgraph \"Functions\"\n        F0[main]\n        F3[setup_ros_publishers_and_subscribers]\n        F4[connect_to_cognitive_mesh]\n        F5[disconnect]\n        F21[odometry_callback]\n        F22[laser_callback]\n        F23[joint_states_callback]\n        F24[cmd_vel_callback]\n        F25[send_agent_state_update]\n        F26[send_sensor_data]\n        F27[send_action_result]\n        F28[send_service_response]\n        F29[send_heartbeat]\n        F30[update_cognitive_state]\n        F31[run]\n    end\n\n    M --> F0\n    M --> F3\n    M --> F4\n    M --> F5\n    M --> F21\n    M --> F22\n    M --> F23\n    M --> F24\n    M --> F25\n    M --> F26\n    M --> F27\n    M --> F28\n    M --> F29\n    M --> F30\n    M --> F31\n    subgraph \"Dependencies\"\n        D0[struct]\n        D1[msg]\n        D2[msg]\n        D3[socket]\n        D4[typing]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "struct",
          "sensor_msgs.msg",
          "nav_msgs.msg",
          "socket",
          "typing",
          "queue",
          "argparse",
          "json",
          "time",
          "numpy",
          "std_msgs.msg",
          "geometry_msgs.msg",
          "dataclasses",
          "threading",
          "rospy"
        ],
        "components": [
          "CognitiveRosMessage",
          "CognitiveRosClient",
          "main",
          "__post_init__",
          "__init__",
          "setup_ros_publishers_and_subscribers",
          "connect_to_cognitive_mesh",
          "disconnect",
          "_pack_message",
          "_unpack_message",
          "_receive_messages",
          "_send_messages",
          "_heartbeat_loop",
          "_process_cognitive_message",
          "_handle_cognitive_update",
          "_handle_action_goal",
          "_handle_service_call",
          "_handle_heartbeat",
          "_execute_action",
          "_execute_navigation",
          "_execute_manipulation",
          "_execute_observation",
          "_process_service_request",
          "odometry_callback",
          "laser_callback",
          "joint_states_callback",
          "cmd_vel_callback",
          "send_agent_state_update",
          "send_sensor_data",
          "send_action_result",
          "send_service_response",
          "send_heartbeat",
          "update_cognitive_state",
          "run"
        ],
        "timestamp": "2025-07-14T04:11:57.814078"
      },
      "cognitive_ros_client_classes": {
        "module_name": "cognitive_ros_client",
        "diagram_type": "class_diagram",
        "mermaid_content": "# cognitive_ros_client - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class CognitiveRosMessage {\n        +methods()\n        +attributes\n    }\n\n    class CognitiveRosClient {\n        +methods()\n        +attributes\n    }\n\n    CognitiveRosMessage <|-- CognitiveRosClient\n```\n",
        "dependencies": [
          "struct",
          "sensor_msgs.msg",
          "nav_msgs.msg",
          "socket",
          "typing",
          "queue",
          "argparse",
          "json",
          "time",
          "numpy",
          "std_msgs.msg",
          "geometry_msgs.msg",
          "dataclasses",
          "threading",
          "rospy"
        ],
        "components": [
          "CognitiveRosMessage",
          "CognitiveRosClient"
        ],
        "timestamp": "2025-07-14T04:11:57.814116"
      },
      "test_cognitive_architecture": {
        "module_name": "test_cognitive_architecture",
        "diagram_type": "flowchart",
        "mermaid_content": "# test_cognitive_architecture - Architectural Flowchart\n\n```mermaid\ngraph TD\n    M[test_cognitive_architecture]\n\n    subgraph \"Classes\"\n        C0[TestTensorKernel]\n        C1[TestCognitiveGrammar]\n        C2[TestAttentionAllocation]\n        C3[TestMetaCognitive]\n        C4[TestIntegration]\n    end\n\n    M --> C0\n    M --> C1\n    M --> C2\n    M --> C3\n    M --> C4\n    subgraph \"Functions\"\n        F0[setUp]\n        F1[test_tensor_creation]\n        F2[test_canonical_shapes]\n        F3[test_tensor_contraction]\n        F4[test_parallel_operations]\n        F5[test_meta_learning_update]\n        F6[test_operation_stats]\n        F7[test_scheme_tensor_shape]\n        F8[setUp]\n        F9[test_entity_creation]\n        F10[test_relationship_creation]\n        F11[test_atom_space_operations]\n        F12[test_pln_inference]\n        F13[test_pattern_matching]\n        F14[test_knowledge_stats]\n        F15[setUp]\n        F16[test_attention_focus]\n        F17[test_attention_spreading]\n        F18[test_economic_allocation]\n        F19[test_attention_visualization]\n        F20[test_attention_cycle]\n        F21[test_activation_spreading]\n        F22[test_scheme_attention_spec]\n        F23[setUp]\n        F24[test_layer_registration]\n        F25[test_meta_state_update]\n        F26[test_introspection]\n        F27[test_system_health_diagnosis]\n        F28[test_meta_tensor_dynamics]\n        F29[test_system_stats]\n        F30[test_full_integration]\n        F31[test_scheme_integration]\n    end\n\n    M --> F0\n    M --> F1\n    M --> F2\n    M --> F3\n    M --> F4\n    M --> F5\n    M --> F6\n    M --> F7\n    M --> F8\n    M --> F9\n    M --> F10\n    M --> F11\n    M --> F12\n    M --> F13\n    M --> F14\n    M --> F15\n    M --> F16\n    M --> F17\n    M --> F18\n    M --> F19\n    M --> F20\n    M --> F21\n    M --> F22\n    M --> F23\n    M --> F24\n    M --> F25\n    M --> F26\n    M --> F27\n    M --> F28\n    M --> F29\n    M --> F30\n    M --> F31\n    subgraph \"Dependencies\"\n        D0[mock]\n        D1[tensor_kernel]\n        D2[unittest]\n        D3[os]\n        D4[attention_allocation]\n    end\n\n    D0 --> M\n    D1 --> M\n    D2 --> M\n    D3 --> M\n    D4 --> M\n```\n",
        "dependencies": [
          "unittest.mock",
          "tensor_kernel",
          "unittest",
          "os",
          "attention_allocation",
          "sys",
          "numpy",
          "cognitive_grammar",
          "meta_cognitive"
        ],
        "components": [
          "TestTensorKernel",
          "TestCognitiveGrammar",
          "TestAttentionAllocation",
          "TestMetaCognitive",
          "TestIntegration",
          "setUp",
          "test_tensor_creation",
          "test_canonical_shapes",
          "test_tensor_contraction",
          "test_parallel_operations",
          "test_meta_learning_update",
          "test_operation_stats",
          "test_scheme_tensor_shape",
          "setUp",
          "test_entity_creation",
          "test_relationship_creation",
          "test_atom_space_operations",
          "test_pln_inference",
          "test_pattern_matching",
          "test_knowledge_stats",
          "setUp",
          "test_attention_focus",
          "test_attention_spreading",
          "test_economic_allocation",
          "test_attention_visualization",
          "test_attention_cycle",
          "test_activation_spreading",
          "test_scheme_attention_spec",
          "setUp",
          "test_layer_registration",
          "test_meta_state_update",
          "test_introspection",
          "test_system_health_diagnosis",
          "test_meta_tensor_dynamics",
          "test_system_stats",
          "test_full_integration",
          "test_scheme_integration"
        ],
        "timestamp": "2025-07-14T04:11:57.814201"
      },
      "test_cognitive_architecture_classes": {
        "module_name": "test_cognitive_architecture",
        "diagram_type": "class_diagram",
        "mermaid_content": "# test_cognitive_architecture - Class Diagram\n\n```mermaid\nclassDiagram\n\n    class TestTensorKernel {\n        +methods()\n        +attributes\n    }\n\n    class TestCognitiveGrammar {\n        +methods()\n        +attributes\n    }\n\n    class TestAttentionAllocation {\n        +methods()\n        +attributes\n    }\n\n    class TestMetaCognitive {\n        +methods()\n        +attributes\n    }\n\n    class TestIntegration {\n        +methods()\n        +attributes\n    }\n\n    TestTensorKernel <|-- TestCognitiveGrammar\n    TestTensorKernel <|-- TestAttentionAllocation\n    TestTensorKernel <|-- TestMetaCognitive\n    TestTensorKernel <|-- TestIntegration\n```\n",
        "dependencies": [
          "unittest.mock",
          "tensor_kernel",
          "unittest",
          "os",
          "attention_allocation",
          "sys",
          "numpy",
          "cognitive_grammar",
          "meta_cognitive"
        ],
        "components": [
          "TestTensorKernel",
          "TestCognitiveGrammar",
          "TestAttentionAllocation",
          "TestMetaCognitive",
          "TestIntegration"
        ],
        "timestamp": "2025-07-14T04:11:57.814240"
      },
      "cognitive_architecture": {
        "module_name": "cognitive_architecture",
        "diagram_type": "dependency_graph",
        "mermaid_content": "# Cognitive Architecture - Dependency Graph\n\n```mermaid\ngraph TB\n\n    subgraph \"Core Cognitive Architecture\"\n        TENSOR_KERNEL[tensor_kernel]\n        COGNITIVE_GRAMMAR[cognitive_grammar]\n        ATTENTION_ALLOCATION[attention_allocation]\n        META_COGNITIVE[meta_cognitive]\n        EVOLUTIONARY_OPTIMIZER[evolutionary_optimizer]\n        FEEDBACK_SELF_ANALYSIS[feedback_self_analysis]\n    end\n\n    subgraph \"Testing & Validation\"\n        PHASE3_VERIFICATION[phase3_verification]\n        PHASE1_ACCEPTANCE_TEST[phase1_acceptance_test]\n        PHASE6_DEMO[phase6_demo]\n        PHASE6_ACCEPTANCE_TEST[phase6_acceptance_test]\n        PHASE4_SIMPLIFIED_INTEGRATION_TEST[phase4_simplified_integration_test]\n    end\n\n    TENSOR_KERNEL --> COGNITIVE_GRAMMAR\n    COGNITIVE_GRAMMAR --> ATTENTION_ALLOCATION\n    ATTENTION_ALLOCATION --> META_COGNITIVE\n    META_COGNITIVE --> EVOLUTIONARY_OPTIMIZER\n    EVOLUTIONARY_OPTIMIZER --> FEEDBACK_SELF_ANALYSIS\n    FEEDBACK_SELF_ANALYSIS --> TENSOR_KERNEL\n```\n",
        "dependencies": [
          "neural_symbolic_kernels",
          "resource_kernel",
          "typing",
          "phase6_acceptance_test",
          "feedback_self_analysis",
          "io",
          "copy",
          "nav_msgs.msg",
          "pathlib",
          "tensor_benchmarking",
          "logging",
          "platform",
          "queue",
          "time",
          "matplotlib.patches",
          "adaptive_optimization",
          "gc",
          "enum",
          "phase3_verification",
          "http.server",
          "math",
          "numpy",
          "rospy",
          "urllib.parse",
          "phase6_comprehensive_test",
          "cognitive.cognitive_grammar",
          "unity3d_adapter",
          "tempfile",
          "flask",
          "psutil",
          "flask_socketio",
          "abc",
          "phase4_api_server",
          "random",
          "microservices",
          "statistics",
          "datetime",
          "phase6_integration_test",
          "matplotlib.pyplot",
          "json",
          "geometry_msgs.msg",
          "uuid",
          "threading",
          "requests",
          "evolutionary_optimizer",
          "socket",
          "cognitive.meta_cognitive",
          "os",
          "cognitive.attention_allocation",
          "sys",
          "meta_cognitive",
          "std_msgs.msg",
          "subprocess",
          "hashlib",
          "struct",
          "cognitive.tensor_kernel",
          "dataclasses",
          "tensor_kernel",
          "microservices.ko6ml_translator",
          "importlib",
          "collections",
          "cognitive.resource_kernel",
          "concurrent.futures",
          "ast",
          "watchdog.events",
          "sensor_msgs.msg",
          "documentation_generator",
          "unittest",
          "attention_allocation",
          "mesh_topology",
          "cognitive_grammar",
          "tensor_fragments",
          "base64",
          "websocket",
          "ros_adapter",
          "cognitive.mesh_topology",
          "traceback",
          "unittest.mock",
          "web_agent_adapter",
          "watchdog.observers",
          "phase6_deep_testing_protocols",
          "inspect",
          "seaborn",
          "hypergraph_visualizer",
          "argparse",
          "socketio",
          "cognitive.benchmarking",
          "asyncio"
        ],
        "components": [
          "cognitive_grammar",
          "phase3_verification",
          "phase1_acceptance_test",
          "phase6_demo",
          "phase6_acceptance_test",
          "web_agent_adapter",
          "attention_allocation",
          "phase4_simplified_integration_test",
          "neural_symbolic_kernels",
          "phase6_comprehensive_test",
          "documentation_generator",
          "phase6_deep_testing_protocols",
          "evolutionary_optimizer",
          "tensor_fragments",
          "living_documentation",
          "phase3_demo",
          "tensor_benchmarking",
          "phase4_acceptance_test",
          "tensor_signature_tests",
          "tensor_kernel",
          "phase1_final_validation",
          "phase3_acceptance_test",
          "phase1_demo_with_visualization",
          "test_validation",
          "demo",
          "phase4_fullstack_integration_test",
          "adaptive_optimization_demo",
          "phase6_integration_test",
          "meta_cognitive",
          "adaptive_optimization",
          "mesh_topology",
          "phase2_demo",
          "phase2_tests",
          "standalone_neural_symbolic",
          "phase3_comprehensive_demo",
          "phase5_acceptance_test",
          "hypergraph_visualizer",
          "phase1_demo",
          "phase1_tests",
          "phase5_demo",
          "phase4_tests",
          "ros_adapter",
          "unity3d_adapter",
          "phase4_api_server",
          "phase4_demo",
          "benchmarking",
          "standalone_phase3_test",
          "phase2_acceptance_test",
          "resource_kernel",
          "phase5_tests",
          "feedback_self_analysis",
          "pattern_service",
          "pln_service",
          "ko6ml_translator",
          "atomspace_service",
          "cognitive_ros_client",
          "test_cognitive_architecture"
        ],
        "timestamp": "2025-07-14T04:11:57.814394"
      }
    },
    "living_documentation": {
      "code_evolution": [
        {
          "timestamp": "2025-07-14T04:11:57.474912",
          "modules_count": 57,
          "total_classes": 207,
          "total_functions": 1205,
          "average_complexity": 33.91228070175438
        },
        {
          "timestamp": "2025-07-14T04:11:57.814482",
          "modules_count": 57,
          "total_classes": 207,
          "total_functions": 1205,
          "average_complexity": 33.91228070175438
        }
      ],
      "tensor_signatures": {
        "tensor_fragments": {
          "classes": [
            "FragmentType",
            "SyncState",
            "FragmentMetadata",
            "TensorFragment",
            "FragmentRegistry",
            "TensorFragmentArchitecture"
          ],
          "functions": [
            "decompose_tensor"
          ],
          "last_modified": "2025-07-14T04:06:57.485121"
        },
        "tensor_benchmarking": {
          "classes": [
            "BenchmarkMetric",
            "BenchmarkResult",
            "BenchmarkSuite",
            "TensorSignatureBenchmark"
          ],
          "functions": [],
          "last_modified": "2025-07-14T04:06:57.485121"
        },
        "tensor_signature_tests": {
          "classes": [
            "TestTensorSignatures",
            "TestPrimeFactorizationMapping",
            "TestFragmentSignatureValidation"
          ],
          "functions": [
            "test_attention_tensor_signature",
            "test_grammar_tensor_signature",
            "test_meta_cognitive_tensor_signature",
            "test_scheme_tensor_generation"
          ],
          "last_modified": "2025-07-14T04:06:57.485121"
        },
        "tensor_kernel": {
          "classes": [
            "TensorFormat",
            "TensorKernel"
          ],
          "functions": [
            "create_tensor",
            "_convert_tensor_format",
            "tensor_contraction",
            "scheme_tensor_shape"
          ],
          "last_modified": "2025-07-14T04:06:57.485121"
        }
      },
      "test_coverage": {
        "cognitive_grammar": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814537"
        },
        "phase3_verification": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814540"
        },
        "phase1_acceptance_test": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814541"
        },
        "phase6_demo": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814542"
        },
        "phase6_acceptance_test": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814543"
        },
        "web_agent_adapter": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814544"
        },
        "attention_allocation": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814545"
        },
        "phase4_simplified_integration_test": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814547"
        },
        "neural_symbolic_kernels": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814548"
        },
        "phase6_comprehensive_test": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814549"
        },
        "documentation_generator": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814550"
        },
        "phase6_deep_testing_protocols": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814551"
        },
        "evolutionary_optimizer": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814552"
        },
        "tensor_fragments": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814553"
        },
        "living_documentation": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814554"
        },
        "phase3_demo": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814555"
        },
        "tensor_benchmarking": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814556"
        },
        "phase4_acceptance_test": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814558"
        },
        "tensor_signature_tests": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814559"
        },
        "tensor_kernel": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814560"
        },
        "phase1_final_validation": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814561"
        },
        "phase3_acceptance_test": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814562"
        },
        "phase1_demo_with_visualization": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814563"
        },
        "test_validation": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814564"
        },
        "demo": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814566"
        },
        "phase4_fullstack_integration_test": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814567"
        },
        "adaptive_optimization_demo": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814568"
        },
        "phase6_integration_test": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814569"
        },
        "meta_cognitive": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814570"
        },
        "adaptive_optimization": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814571"
        },
        "mesh_topology": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814572"
        },
        "phase2_demo": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814573"
        },
        "phase2_tests": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814574"
        },
        "standalone_neural_symbolic": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814575"
        },
        "phase3_comprehensive_demo": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814577"
        },
        "phase5_acceptance_test": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814578"
        },
        "hypergraph_visualizer": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814579"
        },
        "phase1_demo": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814580"
        },
        "phase1_tests": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814581"
        },
        "phase5_demo": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814582"
        },
        "phase4_tests": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814583"
        },
        "ros_adapter": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814584"
        },
        "unity3d_adapter": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814585"
        },
        "phase4_api_server": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814586"
        },
        "phase4_demo": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814588"
        },
        "benchmarking": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814589"
        },
        "standalone_phase3_test": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814590"
        },
        "phase2_acceptance_test": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814591"
        },
        "resource_kernel": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814592"
        },
        "phase5_tests": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814593"
        },
        "feedback_self_analysis": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814594"
        },
        "pattern_service": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814596"
        },
        "pln_service": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814597"
        },
        "ko6ml_translator": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814598"
        },
        "atomspace_service": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814599"
        },
        "cognitive_ros_client": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814600"
        },
        "test_cognitive_architecture": {
          "coverage": 0.0,
          "has_tests": false,
          "last_updated": "2025-07-14T04:11:57.814601"
        }
      },
      "architecture_changes": [
        {
          "timestamp": "2025-07-14T04:11:57.475094",
          "changes": [
            {
              "module": "cognitive_grammar",
              "last_modified": "2025-07-14T04:06:57.479121",
              "complexity_score": 50.5
            },
            {
              "module": "phase3_verification",
              "last_modified": "2025-07-14T04:06:57.482121",
              "complexity_score": 22.0
            },
            {
              "module": "phase1_acceptance_test",
              "last_modified": "2025-07-14T04:06:57.481121",
              "complexity_score": 13.0
            },
            {
              "module": "phase6_demo",
              "last_modified": "2025-07-14T04:06:57.484121",
              "complexity_score": 22.0
            },
            {
              "module": "phase6_acceptance_test",
              "last_modified": "2025-07-14T04:06:57.484121",
              "complexity_score": 28.5
            },
            {
              "module": "web_agent_adapter",
              "last_modified": "2025-07-14T04:06:57.486121",
              "complexity_score": 48.0
            },
            {
              "module": "attention_allocation",
              "last_modified": "2025-07-14T04:06:57.479121",
              "complexity_score": 52.0
            },
            {
              "module": "phase4_simplified_integration_test",
              "last_modified": "2025-07-14T04:06:57.483121",
              "complexity_score": 15.0
            },
            {
              "module": "neural_symbolic_kernels",
              "last_modified": "2025-07-14T04:06:57.480121",
              "complexity_score": 64.5
            },
            {
              "module": "phase6_comprehensive_test",
              "last_modified": "2025-07-14T04:06:57.484121",
              "complexity_score": 47.0
            },
            {
              "module": "documentation_generator",
              "last_modified": "2025-07-14T04:10:11.256366",
              "complexity_score": 31.5
            },
            {
              "module": "phase6_deep_testing_protocols",
              "last_modified": "2025-07-14T04:06:57.484121",
              "complexity_score": 52.0
            },
            {
              "module": "evolutionary_optimizer",
              "last_modified": "2025-07-14T04:06:57.479121",
              "complexity_score": 53.5
            },
            {
              "module": "tensor_fragments",
              "last_modified": "2025-07-14T04:06:57.485121",
              "complexity_score": 41.0
            },
            {
              "module": "living_documentation",
              "last_modified": "2025-07-14T04:11:42.188431",
              "complexity_score": 42.0
            },
            {
              "module": "phase3_demo",
              "last_modified": "2025-07-14T04:06:57.482121",
              "complexity_score": 15.0
            },
            {
              "module": "tensor_benchmarking",
              "last_modified": "2025-07-14T04:06:57.485121",
              "complexity_score": 28.5
            },
            {
              "module": "phase4_acceptance_test",
              "last_modified": "2025-07-14T04:06:57.482121",
              "complexity_score": 19.0
            },
            {
              "module": "tensor_signature_tests",
              "last_modified": "2025-07-14T04:06:57.485121",
              "complexity_score": 27.0
            },
            {
              "module": "tensor_kernel",
              "last_modified": "2025-07-14T04:06:57.485121",
              "complexity_score": 29.5
            },
            {
              "module": "phase1_final_validation",
              "last_modified": "2025-07-14T04:06:57.481121",
              "complexity_score": 6.0
            },
            {
              "module": "phase3_acceptance_test",
              "last_modified": "2025-07-14T04:06:57.481121",
              "complexity_score": 6.5
            },
            {
              "module": "phase1_demo_with_visualization",
              "last_modified": "2025-07-14T04:06:57.481121",
              "complexity_score": 21.5
            },
            {
              "module": "test_validation",
              "last_modified": "2025-07-14T04:06:57.485121",
              "complexity_score": 10.0
            },
            {
              "module": "demo",
              "last_modified": "2025-07-14T04:06:57.479121",
              "complexity_score": 10.5
            },
            {
              "module": "phase4_fullstack_integration_test",
              "last_modified": "2025-07-14T04:06:57.483121",
              "complexity_score": 24.5
            },
            {
              "module": "adaptive_optimization_demo",
              "last_modified": "2025-07-14T04:06:57.479121",
              "complexity_score": 21.5
            },
            {
              "module": "phase6_integration_test",
              "last_modified": "2025-07-14T04:06:57.484121",
              "complexity_score": 47.0
            },
            {
              "module": "meta_cognitive",
              "last_modified": "2025-07-14T04:06:57.480121",
              "complexity_score": 50.5
            },
            {
              "module": "adaptive_optimization",
              "last_modified": "2025-07-14T04:06:57.479121",
              "complexity_score": 45.0
            },
            {
              "module": "mesh_topology",
              "last_modified": "2025-07-14T04:06:57.480121",
              "complexity_score": 51.0
            },
            {
              "module": "phase2_demo",
              "last_modified": "2025-07-14T04:06:57.481121",
              "complexity_score": 29.0
            },
            {
              "module": "phase2_tests",
              "last_modified": "2025-07-14T04:06:57.481121",
              "complexity_score": 17.5
            },
            {
              "module": "standalone_neural_symbolic",
              "last_modified": "2025-07-14T04:06:57.485121",
              "complexity_score": 83.0
            },
            {
              "module": "phase3_comprehensive_demo",
              "last_modified": "2025-07-14T04:06:57.481121",
              "complexity_score": 11.0
            },
            {
              "module": "phase5_acceptance_test",
              "last_modified": "2025-07-14T04:06:57.483121",
              "complexity_score": 27.5
            },
            {
              "module": "hypergraph_visualizer",
              "last_modified": "2025-07-14T04:06:57.480121",
              "complexity_score": 33.0
            },
            {
              "module": "phase1_demo",
              "last_modified": "2025-07-14T04:06:57.481121",
              "complexity_score": 22.0
            },
            {
              "module": "phase1_tests",
              "last_modified": "2025-07-14T04:06:57.481121",
              "complexity_score": 40.0
            },
            {
              "module": "phase5_demo",
              "last_modified": "2025-07-14T04:06:57.483121",
              "complexity_score": 26.5
            },
            {
              "module": "phase4_tests",
              "last_modified": "2025-07-14T04:06:57.483121",
              "complexity_score": 62.0
            },
            {
              "module": "ros_adapter",
              "last_modified": "2025-07-14T04:06:57.485121",
              "complexity_score": 52.5
            },
            {
              "module": "unity3d_adapter",
              "last_modified": "2025-07-14T04:06:57.486121",
              "complexity_score": 40.5
            },
            {
              "module": "phase4_api_server",
              "last_modified": "2025-07-14T04:06:57.482121",
              "complexity_score": 52.0
            },
            {
              "module": "phase4_demo",
              "last_modified": "2025-07-14T04:06:57.482121",
              "complexity_score": 20.0
            },
            {
              "module": "benchmarking",
              "last_modified": "2025-07-14T04:06:57.479121",
              "complexity_score": 36.0
            },
            {
              "module": "standalone_phase3_test",
              "last_modified": "2025-07-14T04:06:57.485121",
              "complexity_score": 11.0
            },
            {
              "module": "phase2_acceptance_test",
              "last_modified": "2025-07-14T04:06:57.481121",
              "complexity_score": 17.0
            },
            {
              "module": "resource_kernel",
              "last_modified": "2025-07-14T04:06:57.484121",
              "complexity_score": 62.5
            },
            {
              "module": "phase5_tests",
              "last_modified": "2025-07-14T04:06:57.483121",
              "complexity_score": 38.5
            },
            {
              "module": "feedback_self_analysis",
              "last_modified": "2025-07-14T04:06:57.480121",
              "complexity_score": 58.5
            },
            {
              "module": "pattern_service",
              "last_modified": "2025-07-14T04:06:57.480121",
              "complexity_score": 28.0
            },
            {
              "module": "pln_service",
              "last_modified": "2025-07-14T04:06:57.480121",
              "complexity_score": 24.0
            },
            {
              "module": "ko6ml_translator",
              "last_modified": "2025-07-14T04:06:57.480121",
              "complexity_score": 25.5
            },
            {
              "module": "atomspace_service",
              "last_modified": "2025-07-14T04:06:57.480121",
              "complexity_score": 30.0
            },
            {
              "module": "cognitive_ros_client",
              "last_modified": "2025-07-14T04:06:57.485121",
              "complexity_score": 43.5
            },
            {
              "module": "test_cognitive_architecture",
              "last_modified": "2025-07-14T04:06:57.486121",
              "complexity_score": 46.5
            }
          ]
        },
        {
          "timestamp": "2025-07-14T04:11:57.814691",
          "changes": [
            {
              "module": "cognitive_grammar",
              "last_modified": "2025-07-14T04:06:57.479121",
              "complexity_score": 50.5
            },
            {
              "module": "phase3_verification",
              "last_modified": "2025-07-14T04:06:57.482121",
              "complexity_score": 22.0
            },
            {
              "module": "phase1_acceptance_test",
              "last_modified": "2025-07-14T04:06:57.481121",
              "complexity_score": 13.0
            },
            {
              "module": "phase6_demo",
              "last_modified": "2025-07-14T04:06:57.484121",
              "complexity_score": 22.0
            },
            {
              "module": "phase6_acceptance_test",
              "last_modified": "2025-07-14T04:06:57.484121",
              "complexity_score": 28.5
            },
            {
              "module": "web_agent_adapter",
              "last_modified": "2025-07-14T04:06:57.486121",
              "complexity_score": 48.0
            },
            {
              "module": "attention_allocation",
              "last_modified": "2025-07-14T04:06:57.479121",
              "complexity_score": 52.0
            },
            {
              "module": "phase4_simplified_integration_test",
              "last_modified": "2025-07-14T04:06:57.483121",
              "complexity_score": 15.0
            },
            {
              "module": "neural_symbolic_kernels",
              "last_modified": "2025-07-14T04:06:57.480121",
              "complexity_score": 64.5
            },
            {
              "module": "phase6_comprehensive_test",
              "last_modified": "2025-07-14T04:06:57.484121",
              "complexity_score": 47.0
            },
            {
              "module": "documentation_generator",
              "last_modified": "2025-07-14T04:10:11.256366",
              "complexity_score": 31.5
            },
            {
              "module": "phase6_deep_testing_protocols",
              "last_modified": "2025-07-14T04:06:57.484121",
              "complexity_score": 52.0
            },
            {
              "module": "evolutionary_optimizer",
              "last_modified": "2025-07-14T04:06:57.479121",
              "complexity_score": 53.5
            },
            {
              "module": "tensor_fragments",
              "last_modified": "2025-07-14T04:06:57.485121",
              "complexity_score": 41.0
            },
            {
              "module": "living_documentation",
              "last_modified": "2025-07-14T04:11:42.188431",
              "complexity_score": 42.0
            },
            {
              "module": "phase3_demo",
              "last_modified": "2025-07-14T04:06:57.482121",
              "complexity_score": 15.0
            },
            {
              "module": "tensor_benchmarking",
              "last_modified": "2025-07-14T04:06:57.485121",
              "complexity_score": 28.5
            },
            {
              "module": "phase4_acceptance_test",
              "last_modified": "2025-07-14T04:06:57.482121",
              "complexity_score": 19.0
            },
            {
              "module": "tensor_signature_tests",
              "last_modified": "2025-07-14T04:06:57.485121",
              "complexity_score": 27.0
            },
            {
              "module": "tensor_kernel",
              "last_modified": "2025-07-14T04:06:57.485121",
              "complexity_score": 29.5
            },
            {
              "module": "phase1_final_validation",
              "last_modified": "2025-07-14T04:06:57.481121",
              "complexity_score": 6.0
            },
            {
              "module": "phase3_acceptance_test",
              "last_modified": "2025-07-14T04:06:57.481121",
              "complexity_score": 6.5
            },
            {
              "module": "phase1_demo_with_visualization",
              "last_modified": "2025-07-14T04:06:57.481121",
              "complexity_score": 21.5
            },
            {
              "module": "test_validation",
              "last_modified": "2025-07-14T04:06:57.485121",
              "complexity_score": 10.0
            },
            {
              "module": "demo",
              "last_modified": "2025-07-14T04:06:57.479121",
              "complexity_score": 10.5
            },
            {
              "module": "phase4_fullstack_integration_test",
              "last_modified": "2025-07-14T04:06:57.483121",
              "complexity_score": 24.5
            },
            {
              "module": "adaptive_optimization_demo",
              "last_modified": "2025-07-14T04:06:57.479121",
              "complexity_score": 21.5
            },
            {
              "module": "phase6_integration_test",
              "last_modified": "2025-07-14T04:06:57.484121",
              "complexity_score": 47.0
            },
            {
              "module": "meta_cognitive",
              "last_modified": "2025-07-14T04:06:57.480121",
              "complexity_score": 50.5
            },
            {
              "module": "adaptive_optimization",
              "last_modified": "2025-07-14T04:06:57.479121",
              "complexity_score": 45.0
            },
            {
              "module": "mesh_topology",
              "last_modified": "2025-07-14T04:06:57.480121",
              "complexity_score": 51.0
            },
            {
              "module": "phase2_demo",
              "last_modified": "2025-07-14T04:06:57.481121",
              "complexity_score": 29.0
            },
            {
              "module": "phase2_tests",
              "last_modified": "2025-07-14T04:06:57.481121",
              "complexity_score": 17.5
            },
            {
              "module": "standalone_neural_symbolic",
              "last_modified": "2025-07-14T04:06:57.485121",
              "complexity_score": 83.0
            },
            {
              "module": "phase3_comprehensive_demo",
              "last_modified": "2025-07-14T04:06:57.481121",
              "complexity_score": 11.0
            },
            {
              "module": "phase5_acceptance_test",
              "last_modified": "2025-07-14T04:06:57.483121",
              "complexity_score": 27.5
            },
            {
              "module": "hypergraph_visualizer",
              "last_modified": "2025-07-14T04:06:57.480121",
              "complexity_score": 33.0
            },
            {
              "module": "phase1_demo",
              "last_modified": "2025-07-14T04:06:57.481121",
              "complexity_score": 22.0
            },
            {
              "module": "phase1_tests",
              "last_modified": "2025-07-14T04:06:57.481121",
              "complexity_score": 40.0
            },
            {
              "module": "phase5_demo",
              "last_modified": "2025-07-14T04:06:57.483121",
              "complexity_score": 26.5
            },
            {
              "module": "phase4_tests",
              "last_modified": "2025-07-14T04:06:57.483121",
              "complexity_score": 62.0
            },
            {
              "module": "ros_adapter",
              "last_modified": "2025-07-14T04:06:57.485121",
              "complexity_score": 52.5
            },
            {
              "module": "unity3d_adapter",
              "last_modified": "2025-07-14T04:06:57.486121",
              "complexity_score": 40.5
            },
            {
              "module": "phase4_api_server",
              "last_modified": "2025-07-14T04:06:57.482121",
              "complexity_score": 52.0
            },
            {
              "module": "phase4_demo",
              "last_modified": "2025-07-14T04:06:57.482121",
              "complexity_score": 20.0
            },
            {
              "module": "benchmarking",
              "last_modified": "2025-07-14T04:06:57.479121",
              "complexity_score": 36.0
            },
            {
              "module": "standalone_phase3_test",
              "last_modified": "2025-07-14T04:06:57.485121",
              "complexity_score": 11.0
            },
            {
              "module": "phase2_acceptance_test",
              "last_modified": "2025-07-14T04:06:57.481121",
              "complexity_score": 17.0
            },
            {
              "module": "resource_kernel",
              "last_modified": "2025-07-14T04:06:57.484121",
              "complexity_score": 62.5
            },
            {
              "module": "phase5_tests",
              "last_modified": "2025-07-14T04:06:57.483121",
              "complexity_score": 38.5
            },
            {
              "module": "feedback_self_analysis",
              "last_modified": "2025-07-14T04:06:57.480121",
              "complexity_score": 58.5
            },
            {
              "module": "pattern_service",
              "last_modified": "2025-07-14T04:06:57.480121",
              "complexity_score": 28.0
            },
            {
              "module": "pln_service",
              "last_modified": "2025-07-14T04:06:57.480121",
              "complexity_score": 24.0
            },
            {
              "module": "ko6ml_translator",
              "last_modified": "2025-07-14T04:06:57.480121",
              "complexity_score": 25.5
            },
            {
              "module": "atomspace_service",
              "last_modified": "2025-07-14T04:06:57.480121",
              "complexity_score": 30.0
            },
            {
              "module": "cognitive_ros_client",
              "last_modified": "2025-07-14T04:06:57.485121",
              "complexity_score": 43.5
            },
            {
              "module": "test_cognitive_architecture",
              "last_modified": "2025-07-14T04:06:57.486121",
              "complexity_score": 46.5
            }
          ]
        }
      ]
    },
    "documentation_completeness": {
      "overall": 0.9649122807017544,
      "docstring_coverage": 1.0,
      "test_coverage": 0.0,
      "diagram_coverage": 1.894736842105263
    }
  },
  "recent_events": []
}